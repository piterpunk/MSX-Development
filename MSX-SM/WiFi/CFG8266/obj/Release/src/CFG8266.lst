                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11570 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module CFG8266
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _FinishUpdate
                             13 	.globl _WaitForRXData
                             14 	.globl _ultostr
                             15 	.globl _TxByte
                             16 	.globl _IsValidInput
                             17 	.globl _MyRead
                             18 	.globl _DosCall
                             19 	.globl _Close
                             20 	.globl _Open
                             21 	.globl _Inkey
                             22 	.globl _PrintChar
                             23 	.globl _InputString
                             24 	.globl _Print
                             25 	.globl _strlen
                             26 	.globl _atol
                             27 	.globl _atoi
                             28 	.globl _puts
                             29 	.globl _printf
                             30 	.globl _uiTimeout
                             31 	.globl _ucSetTimeout
                             32 	.globl _ucRadioOff
                             33 	.globl _ucNagleOn
                             34 	.globl _ucNagleOff
                             35 	.globl _ucIsFw
                             36 	.globl _ucLocalUpdate
                             37 	.globl _lPort
                             38 	.globl _uiPort
                             39 	.globl _ucPort
                             40 	.globl _ucFile
                             41 	.globl _ucServer
                             42 	.globl _ucScan
                             43 	.globl _TickCount
                             44 	.globl _strUsage
                             45 	.globl _responseReady2
                             46 	.globl _radioOffResponse
                             47 	.globl _responseRadioOnTimeout
                             48 	.globl _responseOTASPIFF
                             49 	.globl _responseOTAFW
                             50 	.globl _responseWRBlock
                             51 	.globl _responseRSCERTUpdate
                             52 	.globl _responseRSFWUpdate
                             53 	.globl _apconfigurationResponse
                             54 	.globl _scanresResponse
                             55 	.globl _nagleoffResponse
                             56 	.globl _nagleonResponse
                             57 	.globl _scanResponse
                             58 	.globl _responseOK
                             59 	.globl _certificateDone
                             60 	.globl _endUpdate
                             61 	.globl _responseReady
                             62 ;--------------------------------------------------------
                             63 ; special function registers
                             64 ;--------------------------------------------------------
                     0006    65 _myPort6	=	0x0006
                     0007    66 _myPort7	=	0x0007
                             67 ;--------------------------------------------------------
                             68 ; ram data
                             69 ;--------------------------------------------------------
                             70 	.area _DATA
                     FC9E    71 _TickCount	=	0xfc9e
   0000                      72 _ucScan::
   0000                      73 	.ds 1
   0001                      74 _ucServer::
   0001                      75 	.ds 256
   0101                      76 _ucFile::
   0101                      77 	.ds 256
   0201                      78 _ucPort::
   0201                      79 	.ds 6
   0207                      80 _uiPort::
   0207                      81 	.ds 2
   0209                      82 _lPort::
   0209                      83 	.ds 4
   020D                      84 _ucLocalUpdate::
   020D                      85 	.ds 1
   020E                      86 _ucIsFw::
   020E                      87 	.ds 1
   020F                      88 _ucNagleOff::
   020F                      89 	.ds 1
   0210                      90 _ucNagleOn::
   0210                      91 	.ds 1
   0211                      92 _ucRadioOff::
   0211                      93 	.ds 1
   0212                      94 _ucSetTimeout::
   0212                      95 	.ds 1
   0213                      96 _uiTimeout::
   0213                      97 	.ds 2
                             98 ;--------------------------------------------------------
                             99 ; ram data
                            100 ;--------------------------------------------------------
                            101 	.area _INITIALIZED
                            102 ;--------------------------------------------------------
                            103 ; absolute external ram data
                            104 ;--------------------------------------------------------
                            105 	.area _DABS (ABS)
                            106 ;--------------------------------------------------------
                            107 ; global & static initialisations
                            108 ;--------------------------------------------------------
                            109 	.area _HOME
                            110 	.area _GSINIT
                            111 	.area _GSFINAL
                            112 	.area _GSINIT
                            113 ;--------------------------------------------------------
                            114 ; Home
                            115 ;--------------------------------------------------------
                            116 	.area _HOME
                            117 	.area _HOME
                            118 ;--------------------------------------------------------
                            119 ; code
                            120 ;--------------------------------------------------------
                            121 	.area _CODE
                            122 ;src\CFG8266.c:47: unsigned int MyRead (int Handle, unsigned char* Buffer, unsigned int Size)
                            123 ;	---------------------------------
                            124 ; Function MyRead
                            125 ; ---------------------------------
   0000                     126 _MyRead::
   0000 CDr00r00      [17]  127 	call	___sdcc_enter_ix
   0003 21 F2 FF      [10]  128 	ld	hl, #-14
   0006 39            [11]  129 	add	hl, sp
   0007 F9            [ 6]  130 	ld	sp, hl
                            131 ;src\CFG8266.c:49: unsigned int iRet = 0;
   0008 01 00 00      [10]  132 	ld	bc, #0x0000
                            133 ;src\CFG8266.c:53: regs.Words.DE = (unsigned int) Buffer;
   000B 21 00 00      [10]  134 	ld	hl, #0
   000E 39            [11]  135 	add	hl, sp
   000F EB            [ 4]  136 	ex	de, hl
   0010 21 04 00      [10]  137 	ld	hl, #0x0004
   0013 19            [11]  138 	add	hl, de
   0014 DD 7E 06      [19]  139 	ld	a, 6 (ix)
   0017 DD 77 FE      [19]  140 	ld	-2 (ix), a
   001A DD 7E 07      [19]  141 	ld	a, 7 (ix)
   001D DD 77 FF      [19]  142 	ld	-1 (ix), a
   0020 DD 7E FE      [19]  143 	ld	a, -2 (ix)
   0023 77            [ 7]  144 	ld	(hl), a
   0024 23            [ 6]  145 	inc	hl
   0025 DD 7E FF      [19]  146 	ld	a, -1 (ix)
   0028 77            [ 7]  147 	ld	(hl), a
                            148 ;src\CFG8266.c:54: regs.Words.HL = Size;
   0029 21 06 00      [10]  149 	ld	hl, #0x0006
   002C 19            [11]  150 	add	hl, de
   002D DD 7E 08      [19]  151 	ld	a, 8 (ix)
   0030 77            [ 7]  152 	ld	(hl), a
   0031 23            [ 6]  153 	inc	hl
   0032 DD 7E 09      [19]  154 	ld	a, 9 (ix)
   0035 77            [ 7]  155 	ld	(hl), a
                            156 ;src\CFG8266.c:55: regs.Bytes.B = (unsigned char)(Handle&0xff);
   0036 21 03 00      [10]  157 	ld	hl, #3
   0039 39            [11]  158 	add	hl, sp
   003A DD 7E 04      [19]  159 	ld	a, 4 (ix)
   003D 77            [ 7]  160 	ld	(hl), a
                            161 ;src\CFG8266.c:56: DosCall(0x48, &regs, REGS_MAIN, REGS_MAIN);
   003E 21 00 00      [10]  162 	ld	hl, #0
   0041 39            [11]  163 	add	hl, sp
   0042 EB            [ 4]  164 	ex	de, hl
   0043 6B            [ 4]  165 	ld	l, e
   0044 62            [ 4]  166 	ld	h, d
   0045 C5            [11]  167 	push	bc
   0046 D5            [11]  168 	push	de
   0047 11 02 02      [10]  169 	ld	de, #0x0202
   004A D5            [11]  170 	push	de
   004B E5            [11]  171 	push	hl
   004C 3E 48         [ 7]  172 	ld	a, #0x48
   004E F5            [11]  173 	push	af
   004F 33            [ 6]  174 	inc	sp
   0050 CDr00r00      [17]  175 	call	_DosCall
   0053 F1            [10]  176 	pop	af
   0054 F1            [10]  177 	pop	af
   0055 33            [ 6]  178 	inc	sp
   0056 D1            [10]  179 	pop	de
   0057 C1            [10]  180 	pop	bc
                            181 ;src\CFG8266.c:57: if (regs.Bytes.A == 0)
   0058 6B            [ 4]  182 	ld	l, e
   0059 62            [ 4]  183 	ld	h, d
   005A 23            [ 6]  184 	inc	hl
   005B 7E            [ 7]  185 	ld	a, (hl)
   005C B7            [ 4]  186 	or	a, a
   005D 20 08         [12]  187 	jr	NZ,00102$
                            188 ;src\CFG8266.c:60: iRet = regs.Words.HL;
   005F EB            [ 4]  189 	ex	de,hl
   0060 11 06 00      [10]  190 	ld	de, #0x0006
   0063 19            [11]  191 	add	hl, de
   0064 4E            [ 7]  192 	ld	c, (hl)
   0065 23            [ 6]  193 	inc	hl
   0066 46            [ 7]  194 	ld	b, (hl)
   0067                     195 00102$:
                            196 ;src\CFG8266.c:63: return iRet;
   0067 69            [ 4]  197 	ld	l, c
   0068 60            [ 4]  198 	ld	h, b
                            199 ;src\CFG8266.c:64: }
   0069 DD F9         [10]  200 	ld	sp, ix
   006B DD E1         [14]  201 	pop	ix
   006D C9            [10]  202 	ret
   006E                     203 _Done_Version:
   006E 4D 61 64 65 20 77   204 	.ascii "Made with FUSION-C 1.2 (ebsoft)"
        69 74 68 20 46 55
        53 49 4F 4E 2D 43
        20 31 2E 32 20 28
        65 62 73 6F 66 74
        29
   008D 00                  205 	.db 0x00
   008E                     206 _responseReady:
   008E 52                  207 	.db #0x52	; 82	'R'
   008F 65                  208 	.db #0x65	; 101	'e'
   0090 61                  209 	.db #0x61	; 97	'a'
   0091 64                  210 	.db #0x64	; 100	'd'
   0092 79                  211 	.db #0x79	; 121	'y'
   0093 0D                  212 	.db #0x0d	; 13
   0094 0A                  213 	.db #0x0a	; 10
   0095                     214 _endUpdate:
   0095 45                  215 	.db #0x45	; 69	'E'
   0096 00                  216 	.db #0x00	; 0
   0097                     217 _certificateDone:
   0097 49                  218 	.db #0x49	; 73	'I'
   0098 00                  219 	.db #0x00	; 0
   0099                     220 _responseOK:
   0099 4F                  221 	.db #0x4f	; 79	'O'
   009A 4B                  222 	.db #0x4b	; 75	'K'
   009B                     223 _scanResponse:
   009B 53                  224 	.db #0x53	; 83	'S'
   009C 00                  225 	.db #0x00	; 0
   009D                     226 _nagleonResponse:
   009D 44                  227 	.db #0x44	; 68	'D'
   009E 00                  228 	.db #0x00	; 0
   009F                     229 _nagleoffResponse:
   009F 4E                  230 	.db #0x4e	; 78	'N'
   00A0 00                  231 	.db #0x00	; 0
   00A1                     232 _scanresResponse:
   00A1 73                  233 	.db #0x73	; 115	's'
   00A2 00                  234 	.db #0x00	; 0
   00A3                     235 _apconfigurationResponse:
   00A3 41                  236 	.db #0x41	; 65	'A'
   00A4 00                  237 	.db #0x00	; 0
   00A5                     238 _responseRSFWUpdate:
   00A5 5A                  239 	.db #0x5a	; 90	'Z'
   00A6 00                  240 	.db #0x00	; 0
   00A7                     241 _responseRSCERTUpdate:
   00A7 59                  242 	.db #0x59	; 89	'Y'
   00A8 00                  243 	.db #0x00	; 0
   00A9                     244 _responseWRBlock:
   00A9 7A                  245 	.db #0x7a	; 122	'z'
   00AA 00                  246 	.db #0x00	; 0
   00AB                     247 _responseOTAFW:
   00AB 55                  248 	.db #0x55	; 85	'U'
   00AC 00                  249 	.db #0x00	; 0
   00AD                     250 _responseOTASPIFF:
   00AD 75                  251 	.db #0x75	; 117	'u'
   00AE 00                  252 	.db #0x00	; 0
   00AF                     253 _responseRadioOnTimeout:
   00AF 54                  254 	.db #0x54	; 84	'T'
   00B0 00                  255 	.db #0x00	; 0
   00B1                     256 _radioOffResponse:
   00B1 4F                  257 	.db #0x4f	; 79	'O'
   00B2 00                  258 	.db #0x00	; 0
   00B3                     259 _responseReady2:
   00B3 52                  260 	.db #0x52	; 82	'R'
   00B4 65                  261 	.db #0x65	; 101	'e'
   00B5 61                  262 	.db #0x61	; 97	'a'
   00B6 64                  263 	.db #0x64	; 100	'd'
   00B7 79                  264 	.db #0x79	; 121	'y'
   00B8 0D                  265 	.db #0x0d	; 13
   00B9 0A                  266 	.db #0x0a	; 10
   00BA                     267 _strUsage:
   00BA 55 73 61 67 65 3A   268 	.ascii "Usage: CFG8266 /s to scan networks and choose one to connect"
        20 43 46 47 38 32
        36 36 20 2F 73 20
        74 6F 20 73 63 61
        6E 20 6E 65 74 77
        6F 72 6B 73 20 61
        6E 64 20 63 68 6F
        6F 73 65 20 6F 6E
        65 20 74 6F 20 63
        6F 6E 6E 65 63 74
   00F6 0D                  269 	.db 0x0d
   00F7 0A                  270 	.db 0x0a
   00F8 0A                  271 	.db 0x0a
   00F9 20 20 20 20 20 20   272 	.ascii "       CFG8266 /n to turn off Nagle Algorithm (default) or /"
        20 43 46 47 38 32
        36 36 20 2F 6E 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        4E 61 67 6C 65 20
        41 6C 67 6F 72 69
        74 68 6D 20 28 64
        65 66 61 75 6C 74
        29 20 6F 72 20 2F
   0135 6D 20 74 6F 20 74   273 	.ascii "m to turn it on"
        75 72 6E 20 69 74
        20 6F 6E
   0144 0D                  274 	.db 0x0d
   0145 0A                  275 	.db 0x0a
   0146 0A                  276 	.db 0x0a
   0147 20 20 20 20 20 20   277 	.ascii "       CFG8266 /o to turn off radio now if no connections ar"
        20 43 46 47 38 32
        36 36 20 2F 6F 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        72 61 64 69 6F 20
        6E 6F 77 20 69 66
        20 6E 6F 20 63 6F
        6E 6E 65 63 74 69
        6F 6E 73 20 61 72
   0183 65 20 6F 70 65 6E   278 	.ascii "e open"
   0189 0D                  279 	.db 0x0d
   018A 0A                  280 	.db 0x0a
   018B 0A                  281 	.db 0x0a
   018C 20 20 20 20 20 20   282 	.ascii "       CFG8266 CERTFILE /c to update ESP8266 firmware locall"
        20 43 46 47 38 32
        36 36 20 43 45 52
        54 46 49 4C 45 20
        2F 63 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
        6D 77 61 72 65 20
        6C 6F 63 61 6C 6C
   01C8 79                  283 	.ascii "y"
   01C9 0D                  284 	.db 0x0d
   01CA 0A                  285 	.db 0x0a
   01CB 0A                  286 	.db 0x0a
   01CC 20 20 20 20 20 20   287 	.ascii "       CFG8266 FWFILE to update ESP8266 firmware locally"
        20 43 46 47 38 32
        36 36 20 46 57 46
        49 4C 45 20 74 6F
        20 75 70 64 61 74
        65 20 45 53 50 38
        32 36 36 20 66 69
        72 6D 77 61 72 65
        20 6C 6F 63 61 6C
        6C 79
   0204 0D                  288 	.db 0x0d
   0205 0A                  289 	.db 0x0a
   0206 0A                  290 	.db 0x0a
   0207 20 20 20 20 20 20   291 	.ascii "       CFG8266 /u SERVER PORT FILEPATH to update ESP8266 fir"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
   0243 6D 77 61 72 65 20   292 	.ascii "mware remotely"
        72 65 6D 6F 74 65
        6C 79
   0251 0D                  293 	.db 0x0d
   0252 0A                  294 	.db 0x0a
   0253 0A                  295 	.db 0x0a
   0254 20 20 20 20 20 20   296 	.ascii "       CFG8266 /c SERVER PORT FILEPATH to update TLS certifi"
        20 43 46 47 38 32
        36 36 20 2F 63 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 54 4C 53 20 63
        65 72 74 69 66 69
   0290 63 61 74 65 73 20   297 	.ascii "cates remotely"
        72 65 6D 6F 74 65
        6C 79
   029E 0D                  298 	.db 0x0d
   029F 0A                  299 	.db 0x0a
   02A0 20 20 20 20 20 20   300 	.ascii "       CFG8266 /t TIM to change the inactivity time in secon"
        20 43 46 47 38 32
        36 36 20 2F 74 20
        54 49 4D 20 74 6F
        20 63 68 61 6E 67
        65 20 74 68 65 20
        69 6E 61 63 74 69
        76 69 74 79 20 74
        69 6D 65 20 69 6E
        20 73 65 63 6F 6E
   02DC 64 73 20 74 6F 20   301 	.ascii "ds to disable radio               0-600 (0 means never disab"
        64 69 73 61 62 6C
        65 20 72 61 64 69
        6F 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 30 2D
        36 30 30 20 28 30
        20 6D 65 61 6E 73
        20 6E 65 76 65 72
        20 64 69 73 61 62
   0318 6C 65 29            302 	.ascii "le)"
   031B 0D                  303 	.db 0x0d
   031C 0A                  304 	.db 0x0a
   031D 45 78 2E 3A 20 20   305 	.ascii "Ex.:   CFG8266 /u 192.168.31.1 80 /fw/fw.bin"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        31 39 32 2E 31 36
        38 2E 33 31 2E 31
        20 38 30 20 2F 66
        77 2F 66 77 2E 62
        69 6E
   0349 00                  306 	.db 0x00
                            307 ;src\CFG8266.c:67: unsigned int IsValidInput (char**argv, int argc)
                            308 ;	---------------------------------
                            309 ; Function IsValidInput
                            310 ; ---------------------------------
   034A                     311 _IsValidInput::
   034A CDr00r00      [17]  312 	call	___sdcc_enter_ix
   034D F5            [11]  313 	push	af
   034E F5            [11]  314 	push	af
   034F F5            [11]  315 	push	af
   0350 F5            [11]  316 	push	af
                            317 ;src\CFG8266.c:69: unsigned int ret = 1;
   0351 01 01 00      [10]  318 	ld	bc, #0x0001
                            319 ;src\CFG8266.c:70: unsigned char * Input = (unsigned char*)argv[0];
   0354 DD 7E 04      [19]  320 	ld	a, 4 (ix)
   0357 DD 77 F8      [19]  321 	ld	-8 (ix), a
   035A DD 7E 05      [19]  322 	ld	a, 5 (ix)
   035D DD 77 F9      [19]  323 	ld	-7 (ix), a
   0360 E1            [10]  324 	pop	hl
   0361 E5            [11]  325 	push	hl
   0362 7E            [ 7]  326 	ld	a, (hl)
   0363 DD 77 FD      [19]  327 	ld	-3 (ix), a
   0366 23            [ 6]  328 	inc	hl
   0367 7E            [ 7]  329 	ld	a, (hl)
   0368 DD 77 FE      [19]  330 	ld	-2 (ix), a
                            331 ;src\CFG8266.c:72: ucScan = 0;
   036B 21r00r00      [10]  332 	ld	hl,#_ucScan + 0
   036E 36 00         [10]  333 	ld	(hl), #0x00
                            334 ;src\CFG8266.c:74: if (argc)
   0370 DD 7E 07      [19]  335 	ld	a, 7 (ix)
   0373 DD B6 06      [19]  336 	or	a, 6 (ix)
   0376 CAr03r06      [10]  337 	jp	Z, 00162$
                            338 ;src\CFG8266.c:76: if ((argc==1)||(argc==2)||(argc==4))
   0379 DD 7E 06      [19]  339 	ld	a, 6 (ix)
   037C 3D            [ 4]  340 	dec	a
   037D DD B6 07      [19]  341 	or	a, 7 (ix)
   0380 3E 01         [ 7]  342 	ld	a, #0x01
   0382 28 01         [12]  343 	jr	Z,00287$
   0384 AF            [ 4]  344 	xor	a, a
   0385                     345 00287$:
   0385 DD 77 FF      [19]  346 	ld	-1 (ix), a
   0388 DD 7E 06      [19]  347 	ld	a, 6 (ix)
   038B D6 02         [ 7]  348 	sub	a, #0x02
   038D DD B6 07      [19]  349 	or	a, 7 (ix)
   0390 3E 01         [ 7]  350 	ld	a, #0x01
   0392 28 01         [12]  351 	jr	Z,00289$
   0394 AF            [ 4]  352 	xor	a, a
   0395                     353 00289$:
   0395 57            [ 4]  354 	ld	d, a
   0396 DD 7E FF      [19]  355 	ld	a, -1 (ix)
   0399 B7            [ 4]  356 	or	a,a
   039A 20 0E         [12]  357 	jr	NZ,00156$
   039C B2            [ 4]  358 	or	a,d
   039D 20 0B         [12]  359 	jr	NZ,00156$
   039F DD 7E 06      [19]  360 	ld	a, 6 (ix)
   03A2 D6 04         [ 7]  361 	sub	a, #0x04
   03A4 DD B6 07      [19]  362 	or	a, 7 (ix)
   03A7 C2rFEr05      [10]  363 	jp	NZ,00157$
   03AA                     364 00156$:
                            365 ;src\CFG8266.c:80: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   03AA DD 6E FD      [19]  366 	ld	l, -3 (ix)
   03AD DD 66 FE      [19]  367 	ld	h, -2 (ix)
   03B0 5E            [ 7]  368 	ld	e, (hl)
   03B1 DD 6E FD      [19]  369 	ld	l, -3 (ix)
   03B4 DD 66 FE      [19]  370 	ld	h, -2 (ix)
   03B7 23            [ 6]  371 	inc	hl
                            372 ;src\CFG8266.c:91: Input = (unsigned char*)argv[1];
   03B8 DD 7E F8      [19]  373 	ld	a, -8 (ix)
   03BB C6 02         [ 7]  374 	add	a, #0x02
   03BD DD 77 FA      [19]  375 	ld	-6 (ix), a
   03C0 DD 7E F9      [19]  376 	ld	a, -7 (ix)
   03C3 CE 00         [ 7]  377 	adc	a, #0x00
   03C5 DD 77 FB      [19]  378 	ld	-5 (ix), a
                            379 ;src\CFG8266.c:80: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   03C8 7B            [ 4]  380 	ld	a, e
   03C9 D6 2F         [ 7]  381 	sub	a, #0x2f
   03CB 3E 01         [ 7]  382 	ld	a, #0x01
   03CD 28 01         [12]  383 	jr	Z,00293$
   03CF AF            [ 4]  384 	xor	a, a
   03D0                     385 00293$:
   03D0 5F            [ 4]  386 	ld	e, a
                            387 ;src\CFG8266.c:78: if ((argc==1)||(argc==2))
   03D1 DD 7E FF      [19]  388 	ld	a, -1 (ix)
   03D4 B7            [ 4]  389 	or	a,a
   03D5 20 04         [12]  390 	jr	NZ,00152$
   03D7 B2            [ 4]  391 	or	a,d
   03D8 CArB9r04      [10]  392 	jp	Z, 00153$
   03DB                     393 00152$:
                            394 ;src\CFG8266.c:80: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   03DB 7B            [ 4]  395 	ld	a, e
   03DC B7            [ 4]  396 	or	a, a
   03DD 28 11         [12]  397 	jr	Z,00132$
   03DF 7E            [ 7]  398 	ld	a, (hl)
   03E0 FE 73         [ 7]  399 	cp	a, #0x73
   03E2 28 04         [12]  400 	jr	Z,00131$
   03E4 D6 53         [ 7]  401 	sub	a, #0x53
   03E6 20 08         [12]  402 	jr	NZ,00132$
   03E8                     403 00131$:
                            404 ;src\CFG8266.c:81: ucScan = 1;
   03E8 21r00r00      [10]  405 	ld	hl,#_ucScan + 0
   03EB 36 01         [10]  406 	ld	(hl), #0x01
   03ED C3r06r06      [10]  407 	jp	00163$
   03F0                     408 00132$:
                            409 ;src\CFG8266.c:82: else if ((Input[0]=='/')&&((Input[1]=='n')||(Input[1]=='N')))
   03F0 7B            [ 4]  410 	ld	a, e
   03F1 B7            [ 4]  411 	or	a, a
   03F2 28 11         [12]  412 	jr	Z,00127$
   03F4 7E            [ 7]  413 	ld	a, (hl)
   03F5 FE 6E         [ 7]  414 	cp	a, #0x6e
   03F7 28 04         [12]  415 	jr	Z,00126$
   03F9 D6 4E         [ 7]  416 	sub	a, #0x4e
   03FB 20 08         [12]  417 	jr	NZ,00127$
   03FD                     418 00126$:
                            419 ;src\CFG8266.c:83: ucNagleOff = 1;
   03FD 21r0Fr02      [10]  420 	ld	hl,#_ucNagleOff + 0
   0400 36 01         [10]  421 	ld	(hl), #0x01
   0402 C3r06r06      [10]  422 	jp	00163$
   0405                     423 00127$:
                            424 ;src\CFG8266.c:84: else if ((Input[0]=='/')&&((Input[1]=='m')||(Input[1]=='M')))
   0405 7B            [ 4]  425 	ld	a, e
   0406 B7            [ 4]  426 	or	a, a
   0407 28 11         [12]  427 	jr	Z,00122$
   0409 7E            [ 7]  428 	ld	a, (hl)
   040A FE 6D         [ 7]  429 	cp	a, #0x6d
   040C 28 04         [12]  430 	jr	Z,00121$
   040E D6 4D         [ 7]  431 	sub	a, #0x4d
   0410 20 08         [12]  432 	jr	NZ,00122$
   0412                     433 00121$:
                            434 ;src\CFG8266.c:85: ucNagleOn = 1;
   0412 21r10r02      [10]  435 	ld	hl,#_ucNagleOn + 0
   0415 36 01         [10]  436 	ld	(hl), #0x01
   0417 C3r06r06      [10]  437 	jp	00163$
   041A                     438 00122$:
                            439 ;src\CFG8266.c:86: else if ((Input[0]=='/')&&((Input[1]=='o')||(Input[1]=='O')))
   041A 7B            [ 4]  440 	ld	a, e
   041B B7            [ 4]  441 	or	a, a
   041C 28 11         [12]  442 	jr	Z,00117$
   041E 7E            [ 7]  443 	ld	a, (hl)
   041F FE 6F         [ 7]  444 	cp	a, #0x6f
   0421 28 04         [12]  445 	jr	Z,00116$
   0423 D6 4F         [ 7]  446 	sub	a, #0x4f
   0425 20 08         [12]  447 	jr	NZ,00117$
   0427                     448 00116$:
                            449 ;src\CFG8266.c:87: ucRadioOff = 1;
   0427 21r11r02      [10]  450 	ld	hl,#_ucRadioOff + 0
   042A 36 01         [10]  451 	ld	(hl), #0x01
   042C C3r06r06      [10]  452 	jp	00163$
   042F                     453 00117$:
                            454 ;src\CFG8266.c:88: else if ((Input[0]=='/')&&((Input[1]=='t')||(Input[1]=='T')))
   042F 7B            [ 4]  455 	ld	a, e
   0430 B7            [ 4]  456 	or	a, a
   0431 28 3B         [12]  457 	jr	Z,00112$
   0433 7E            [ 7]  458 	ld	a, (hl)
   0434 FE 74         [ 7]  459 	cp	a, #0x74
   0436 28 04         [12]  460 	jr	Z,00111$
   0438 D6 54         [ 7]  461 	sub	a, #0x54
   043A 20 32         [12]  462 	jr	NZ,00112$
   043C                     463 00111$:
                            464 ;src\CFG8266.c:90: ucSetTimeout = 1;
   043C 21r12r02      [10]  465 	ld	hl,#_ucSetTimeout + 0
   043F 36 01         [10]  466 	ld	(hl), #0x01
                            467 ;src\CFG8266.c:91: Input = (unsigned char*)argv[1];
   0441 DD 6E FA      [19]  468 	ld	l, -6 (ix)
   0444 DD 66 FB      [19]  469 	ld	h, -5 (ix)
   0447 5E            [ 7]  470 	ld	e, (hl)
   0448 23            [ 6]  471 	inc	hl
   0449 56            [ 7]  472 	ld	d, (hl)
                            473 ;src\CFG8266.c:92: uiTimeout = atoi (Input);
   044A C5            [11]  474 	push	bc
   044B D5            [11]  475 	push	de
   044C CDr00r00      [17]  476 	call	_atoi
   044F F1            [10]  477 	pop	af
   0450 C1            [10]  478 	pop	bc
   0451 22r13r02      [16]  479 	ld	(_uiTimeout), hl
                            480 ;src\CFG8266.c:93: if (uiTimeout > 600)
   0454 3E 58         [ 7]  481 	ld	a, #0x58
   0456 FD 21r13r02   [14]  482 	ld	iy, #_uiTimeout
   045A FD BE 00      [19]  483 	cp	a, 0 (iy)
   045D 3E 02         [ 7]  484 	ld	a, #0x02
   045F FD 9E 01      [19]  485 	sbc	a, 1 (iy)
   0462 D2r06r06      [10]  486 	jp	NC, 00163$
                            487 ;src\CFG8266.c:94: uiTimeout = 600;
   0465 21 58 02      [10]  488 	ld	hl, #0x0258
   0468 22r13r02      [16]  489 	ld	(_uiTimeout), hl
   046B C3r06r06      [10]  490 	jp	00163$
   046E                     491 00112$:
                            492 ;src\CFG8266.c:98: strcpy (ucFile,Input);
   046E C5            [11]  493 	push	bc
   046F D5            [11]  494 	push	de
   0470 11r01r01      [10]  495 	ld	de, #_ucFile
   0473 DD 6E FD      [19]  496 	ld	l, -3 (ix)
   0476 DD 66 FE      [19]  497 	ld	h, -2 (ix)
   0479 AF            [ 4]  498 	xor	a, a
   047A                     499 00309$:
   047A BE            [ 7]  500 	cp	a, (hl)
   047B ED A0         [16]  501 	ldi
   047D 20 FB         [12]  502 	jr	NZ, 00309$
   047F D1            [10]  503 	pop	de
   0480 C1            [10]  504 	pop	bc
                            505 ;src\CFG8266.c:99: ucLocalUpdate = 1;
   0481 21r0Dr02      [10]  506 	ld	hl,#_ucLocalUpdate + 0
   0484 36 01         [10]  507 	ld	(hl), #0x01
                            508 ;src\CFG8266.c:100: if (argc==2)
   0486 7A            [ 4]  509 	ld	a, d
   0487 B7            [ 4]  510 	or	a, a
   0488 28 27         [12]  511 	jr	Z,00109$
                            512 ;src\CFG8266.c:102: Input = (unsigned char*)argv[1];
   048A DD 6E FA      [19]  513 	ld	l, -6 (ix)
   048D DD 66 FB      [19]  514 	ld	h, -5 (ix)
   0490 5E            [ 7]  515 	ld	e, (hl)
   0491 23            [ 6]  516 	inc	hl
   0492 56            [ 7]  517 	ld	d, (hl)
                            518 ;src\CFG8266.c:103: if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   0493 1A            [ 7]  519 	ld	a, (de)
   0494 D6 2F         [ 7]  520 	sub	a, #0x2f
   0496 20 13         [12]  521 	jr	NZ,00104$
   0498 EB            [ 4]  522 	ex	de,hl
   0499 23            [ 6]  523 	inc	hl
   049A 7E            [ 7]  524 	ld	a, (hl)
   049B FE 63         [ 7]  525 	cp	a, #0x63
   049D 28 04         [12]  526 	jr	Z,00103$
   049F D6 43         [ 7]  527 	sub	a, #0x43
   04A1 20 08         [12]  528 	jr	NZ,00104$
   04A3                     529 00103$:
                            530 ;src\CFG8266.c:104: ucIsFw=0;
   04A3 21r0Er02      [10]  531 	ld	hl,#_ucIsFw + 0
   04A6 36 00         [10]  532 	ld	(hl), #0x00
   04A8 C3r06r06      [10]  533 	jp	00163$
   04AB                     534 00104$:
                            535 ;src\CFG8266.c:106: ret=0;
   04AB 01 00 00      [10]  536 	ld	bc, #0x0000
   04AE C3r06r06      [10]  537 	jp	00163$
   04B1                     538 00109$:
                            539 ;src\CFG8266.c:110: ucIsFw=1;
   04B1 21r0Er02      [10]  540 	ld	hl,#_ucIsFw + 0
   04B4 36 01         [10]  541 	ld	(hl), #0x01
   04B6 C3r06r06      [10]  542 	jp	00163$
   04B9                     543 00153$:
                            544 ;src\CFG8266.c:118: Input = (unsigned char*)argv[2];
   04B9 DD 7E F8      [19]  545 	ld	a, -8 (ix)
   04BC C6 04         [ 7]  546 	add	a, #0x04
   04BE DD 77 FC      [19]  547 	ld	-4 (ix), a
   04C1 DD 7E F9      [19]  548 	ld	a, -7 (ix)
   04C4 CE 00         [ 7]  549 	adc	a, #0x00
   04C6 DD 77 FD      [19]  550 	ld	-3 (ix), a
                            551 ;src\CFG8266.c:124: Input = (unsigned char*)argv[3];
   04C9 DD 7E F8      [19]  552 	ld	a, -8 (ix)
   04CC C6 06         [ 7]  553 	add	a, #0x06
   04CE DD 77 FE      [19]  554 	ld	-2 (ix), a
   04D1 DD 7E F9      [19]  555 	ld	a, -7 (ix)
   04D4 CE 00         [ 7]  556 	adc	a, #0x00
   04D6 DD 77 FF      [19]  557 	ld	-1 (ix), a
                            558 ;src\CFG8266.c:115: if ((Input[0]=='/')&&((Input[1]=='u')||(Input[1]=='U')))
   04D9 7B            [ 4]  559 	ld	a, e
   04DA B7            [ 4]  560 	or	a, a
   04DB CAr6Ar05      [10]  561 	jp	Z, 00148$
   04DE 7E            [ 7]  562 	ld	a, (hl)
   04DF FE 75         [ 7]  563 	cp	a, #0x75
   04E1 28 05         [12]  564 	jr	Z,00147$
   04E3 D6 55         [ 7]  565 	sub	a, #0x55
   04E5 C2r6Ar05      [10]  566 	jp	NZ,00148$
   04E8                     567 00147$:
                            568 ;src\CFG8266.c:117: ucIsFw = 1;
   04E8 21r0Er02      [10]  569 	ld	hl,#_ucIsFw + 0
   04EB 36 01         [10]  570 	ld	(hl), #0x01
                            571 ;src\CFG8266.c:118: Input = (unsigned char*)argv[2];
   04ED DD 6E FC      [19]  572 	ld	l, -4 (ix)
   04F0 DD 66 FD      [19]  573 	ld	h, -3 (ix)
   04F3 5E            [ 7]  574 	ld	e, (hl)
   04F4 23            [ 6]  575 	inc	hl
   04F5 56            [ 7]  576 	ld	d, (hl)
                            577 ;src\CFG8266.c:119: if (strlen (Input)<7)
   04F6 C5            [11]  578 	push	bc
   04F7 D5            [11]  579 	push	de
   04F8 CDr00r00      [17]  580 	call	_strlen
   04FB F1            [10]  581 	pop	af
   04FC C1            [10]  582 	pop	bc
   04FD 7D            [ 4]  583 	ld	a, l
   04FE D6 07         [ 7]  584 	sub	a, #0x07
   0500 7C            [ 4]  585 	ld	a, h
   0501 DE 00         [ 7]  586 	sbc	a, #0x00
   0503 30 5F         [12]  587 	jr	NC,00137$
                            588 ;src\CFG8266.c:121: strcpy(ucPort,Input);
   0505 21r01r02      [10]  589 	ld	hl, #_ucPort
   0508 C5            [11]  590 	push	bc
   0509 EB            [ 4]  591 	ex	de, hl
   050A AF            [ 4]  592 	xor	a, a
   050B                     593 00318$:
   050B BE            [ 7]  594 	cp	a, (hl)
   050C ED A0         [16]  595 	ldi
   050E 20 FB         [12]  596 	jr	NZ, 00318$
   0510 C1            [10]  597 	pop	bc
                            598 ;src\CFG8266.c:122: Input = (unsigned char*)argv[1];
   0511 DD 6E FA      [19]  599 	ld	l, -6 (ix)
   0514 DD 66 FB      [19]  600 	ld	h, -5 (ix)
   0517 5E            [ 7]  601 	ld	e, (hl)
   0518 23            [ 6]  602 	inc	hl
   0519 56            [ 7]  603 	ld	d, (hl)
                            604 ;src\CFG8266.c:123: strcpy(ucServer,Input);
   051A 21r01r00      [10]  605 	ld	hl, #_ucServer+0
   051D C5            [11]  606 	push	bc
   051E EB            [ 4]  607 	ex	de, hl
   051F AF            [ 4]  608 	xor	a, a
   0520                     609 00319$:
   0520 BE            [ 7]  610 	cp	a, (hl)
   0521 ED A0         [16]  611 	ldi
   0523 20 FB         [12]  612 	jr	NZ, 00319$
   0525 C1            [10]  613 	pop	bc
                            614 ;src\CFG8266.c:124: Input = (unsigned char*)argv[3];
   0526 DD 6E FE      [19]  615 	ld	l, -2 (ix)
   0529 DD 66 FF      [19]  616 	ld	h, -1 (ix)
   052C 5E            [ 7]  617 	ld	e, (hl)
   052D 23            [ 6]  618 	inc	hl
   052E 56            [ 7]  619 	ld	d, (hl)
                            620 ;src\CFG8266.c:125: strcpy(ucFile,Input);
   052F 21r01r01      [10]  621 	ld	hl, #_ucFile+0
   0532 C5            [11]  622 	push	bc
   0533 EB            [ 4]  623 	ex	de, hl
   0534 AF            [ 4]  624 	xor	a, a
   0535                     625 00320$:
   0535 BE            [ 7]  626 	cp	a, (hl)
   0536 ED A0         [16]  627 	ldi
   0538 20 FB         [12]  628 	jr	NZ, 00320$
   053A 21r01r02      [10]  629 	ld	hl, #_ucPort
   053D E5            [11]  630 	push	hl
   053E CDr00r00      [17]  631 	call	_atol
   0541 F1            [10]  632 	pop	af
   0542 DD 75 FC      [19]  633 	ld	-4 (ix), l
   0545 DD 74 FD      [19]  634 	ld	-3 (ix), h
   0548 DD 73 FE      [19]  635 	ld	-2 (ix), e
   054B DD 72 FF      [19]  636 	ld	-1 (ix), d
   054E 11r09r02      [10]  637 	ld	de, #_lPort
   0551 21 06 00      [10]  638 	ld	hl, #6
   0554 39            [11]  639 	add	hl, sp
   0555 01 04 00      [10]  640 	ld	bc, #4
   0558 ED B0         [21]  641 	ldir
   055A C1            [10]  642 	pop	bc
                            643 ;src\CFG8266.c:127: uiPort = (lPort&0xffff);
   055B 2Ar09r02      [16]  644 	ld	hl, (_lPort)
   055E 22r07r02      [16]  645 	ld	(_uiPort), hl
   0561 C3r06r06      [10]  646 	jp	00163$
   0564                     647 00137$:
                            648 ;src\CFG8266.c:130: ret = 0;
   0564 01 00 00      [10]  649 	ld	bc, #0x0000
   0567 C3r06r06      [10]  650 	jp	00163$
   056A                     651 00148$:
                            652 ;src\CFG8266.c:132: else if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   056A 7B            [ 4]  653 	ld	a, e
   056B B7            [ 4]  654 	or	a, a
   056C CArF9r05      [10]  655 	jp	Z, 00143$
   056F 7E            [ 7]  656 	ld	a, (hl)
   0570 FE 63         [ 7]  657 	cp	a, #0x63
   0572 28 05         [12]  658 	jr	Z,00142$
   0574 D6 43         [ 7]  659 	sub	a, #0x43
   0576 C2rF9r05      [10]  660 	jp	NZ,00143$
   0579                     661 00142$:
                            662 ;src\CFG8266.c:134: ucIsFw = 0;
   0579 21r0Er02      [10]  663 	ld	hl,#_ucIsFw + 0
   057C 36 00         [10]  664 	ld	(hl), #0x00
                            665 ;src\CFG8266.c:135: Input = (unsigned char*)argv[2];
   057E DD 6E FC      [19]  666 	ld	l, -4 (ix)
   0581 DD 66 FD      [19]  667 	ld	h, -3 (ix)
   0584 5E            [ 7]  668 	ld	e, (hl)
   0585 23            [ 6]  669 	inc	hl
   0586 56            [ 7]  670 	ld	d, (hl)
                            671 ;src\CFG8266.c:136: if (strlen (Input)<7)
   0587 C5            [11]  672 	push	bc
   0588 D5            [11]  673 	push	de
   0589 CDr00r00      [17]  674 	call	_strlen
   058C F1            [10]  675 	pop	af
   058D C1            [10]  676 	pop	bc
   058E 7D            [ 4]  677 	ld	a, l
   058F D6 07         [ 7]  678 	sub	a, #0x07
   0591 7C            [ 4]  679 	ld	a, h
   0592 DE 00         [ 7]  680 	sbc	a, #0x00
   0594 30 5E         [12]  681 	jr	NC,00140$
                            682 ;src\CFG8266.c:138: strcpy(ucPort,Input);
   0596 21r01r02      [10]  683 	ld	hl, #_ucPort
   0599 C5            [11]  684 	push	bc
   059A EB            [ 4]  685 	ex	de, hl
   059B AF            [ 4]  686 	xor	a, a
   059C                     687 00324$:
   059C BE            [ 7]  688 	cp	a, (hl)
   059D ED A0         [16]  689 	ldi
   059F 20 FB         [12]  690 	jr	NZ, 00324$
   05A1 C1            [10]  691 	pop	bc
                            692 ;src\CFG8266.c:139: Input = (unsigned char*)argv[1];
   05A2 DD 6E FA      [19]  693 	ld	l, -6 (ix)
   05A5 DD 66 FB      [19]  694 	ld	h, -5 (ix)
   05A8 5E            [ 7]  695 	ld	e, (hl)
   05A9 23            [ 6]  696 	inc	hl
   05AA 56            [ 7]  697 	ld	d, (hl)
                            698 ;src\CFG8266.c:140: strcpy(ucServer,Input);
   05AB 21r01r00      [10]  699 	ld	hl, #_ucServer+0
   05AE C5            [11]  700 	push	bc
   05AF EB            [ 4]  701 	ex	de, hl
   05B0 AF            [ 4]  702 	xor	a, a
   05B1                     703 00325$:
   05B1 BE            [ 7]  704 	cp	a, (hl)
   05B2 ED A0         [16]  705 	ldi
   05B4 20 FB         [12]  706 	jr	NZ, 00325$
   05B6 C1            [10]  707 	pop	bc
                            708 ;src\CFG8266.c:141: Input = (unsigned char*)argv[3];
   05B7 DD 6E FE      [19]  709 	ld	l, -2 (ix)
   05BA DD 66 FF      [19]  710 	ld	h, -1 (ix)
   05BD 5E            [ 7]  711 	ld	e, (hl)
   05BE 23            [ 6]  712 	inc	hl
   05BF 56            [ 7]  713 	ld	d, (hl)
                            714 ;src\CFG8266.c:142: strcpy(ucFile,Input);
   05C0 21r01r01      [10]  715 	ld	hl, #_ucFile+0
   05C3 C5            [11]  716 	push	bc
   05C4 EB            [ 4]  717 	ex	de, hl
   05C5 AF            [ 4]  718 	xor	a, a
   05C6                     719 00326$:
   05C6 BE            [ 7]  720 	cp	a, (hl)
   05C7 ED A0         [16]  721 	ldi
   05C9 20 FB         [12]  722 	jr	NZ, 00326$
   05CB 21r01r02      [10]  723 	ld	hl, #_ucPort
   05CE E5            [11]  724 	push	hl
   05CF CDr00r00      [17]  725 	call	_atol
   05D2 F1            [10]  726 	pop	af
   05D3 DD 75 FC      [19]  727 	ld	-4 (ix), l
   05D6 DD 74 FD      [19]  728 	ld	-3 (ix), h
   05D9 DD 73 FE      [19]  729 	ld	-2 (ix), e
   05DC DD 72 FF      [19]  730 	ld	-1 (ix), d
   05DF 11r09r02      [10]  731 	ld	de, #_lPort
   05E2 21 06 00      [10]  732 	ld	hl, #6
   05E5 39            [11]  733 	add	hl, sp
   05E6 01 04 00      [10]  734 	ld	bc, #4
   05E9 ED B0         [21]  735 	ldir
   05EB C1            [10]  736 	pop	bc
                            737 ;src\CFG8266.c:144: uiPort = (lPort&0xffff);
   05EC 2Ar09r02      [16]  738 	ld	hl, (_lPort)
   05EF 22r07r02      [16]  739 	ld	(_uiPort), hl
   05F2 18 12         [12]  740 	jr	00163$
   05F4                     741 00140$:
                            742 ;src\CFG8266.c:147: ret = 0;
   05F4 01 00 00      [10]  743 	ld	bc, #0x0000
   05F7 18 0D         [12]  744 	jr	00163$
   05F9                     745 00143$:
                            746 ;src\CFG8266.c:150: ret = 0;
   05F9 01 00 00      [10]  747 	ld	bc, #0x0000
   05FC 18 08         [12]  748 	jr	00163$
   05FE                     749 00157$:
                            750 ;src\CFG8266.c:154: ret = 0;
   05FE 01 00 00      [10]  751 	ld	bc, #0x0000
   0601 18 03         [12]  752 	jr	00163$
   0603                     753 00162$:
                            754 ;src\CFG8266.c:157: ret=0;
   0603 01 00 00      [10]  755 	ld	bc, #0x0000
   0606                     756 00163$:
                            757 ;src\CFG8266.c:159: return ret;
   0606 69            [ 4]  758 	ld	l, c
   0607 60            [ 4]  759 	ld	h, b
                            760 ;src\CFG8266.c:160: }
   0608 DD F9         [10]  761 	ld	sp, ix
   060A DD E1         [14]  762 	pop	ix
   060C C9            [10]  763 	ret
                            764 ;src\CFG8266.c:162: void TxByte(char chTxByte)
                            765 ;	---------------------------------
                            766 ; Function TxByte
                            767 ; ---------------------------------
   060D                     768 _TxByte::
                            769 ;src\CFG8266.c:165: do
   060D                     770 00103$:
                            771 ;src\CFG8266.c:167: UartStatus = myPort7&2 ;
   060D DB 07         [11]  772 	in	a, (_myPort7)
   060F CB 4F         [ 8]  773 	bit	1, a
   0611 20 FA         [12]  774 	jr	NZ,00103$
                            775 ;src\CFG8266.c:168: if (!UartStatus)
                            776 ;src\CFG8266.c:173: myPort7 = chTxByte;
   0613 21 02 00      [10]  777 	ld	hl, #2+0
   0616 39            [11]  778 	add	hl, sp
   0617 7E            [ 7]  779 	ld	a, (hl)
   0618 D3 07         [11]  780 	out	(_myPort7), a
                            781 ;src\CFG8266.c:177: while (1);
                            782 ;src\CFG8266.c:178: }
   061A C9            [10]  783 	ret
                            784 ;src\CFG8266.c:180: char *ultostr(unsigned long value, char *ptr, int base)
                            785 ;	---------------------------------
                            786 ; Function ultostr
                            787 ; ---------------------------------
   061B                     788 _ultostr::
   061B CDr00r00      [17]  789 	call	___sdcc_enter_ix
   061E 21 F1 FF      [10]  790 	ld	hl, #-15
   0621 39            [11]  791 	add	hl, sp
   0622 F9            [ 6]  792 	ld	sp, hl
                            793 ;src\CFG8266.c:183: unsigned long tmp = value;
   0623 DD 4E 04      [19]  794 	ld	c, 4 (ix)
   0626 DD 46 05      [19]  795 	ld	b, 5 (ix)
   0629 DD 5E 06      [19]  796 	ld	e, 6 (ix)
   062C DD 56 07      [19]  797 	ld	d, 7 (ix)
                            798 ;src\CFG8266.c:184: int count = 0;
   062F AF            [ 4]  799 	xor	a, a
   0630 DD 77 FE      [19]  800 	ld	-2 (ix), a
   0633 DD 77 FF      [19]  801 	ld	-1 (ix), a
                            802 ;src\CFG8266.c:186: if (NULL == ptr)
   0636 DD 7E 09      [19]  803 	ld	a, 9 (ix)
   0639 DD B6 08      [19]  804 	or	a, 8 (ix)
   063C 20 06         [12]  805 	jr	NZ,00102$
                            806 ;src\CFG8266.c:188: return NULL;
   063E 21 00 00      [10]  807 	ld	hl, #0x0000
   0641 C3rC3r07      [10]  808 	jp	00117$
   0644                     809 00102$:
                            810 ;src\CFG8266.c:191: if (tmp == 0)
   0644 7A            [ 4]  811 	ld	a, d
   0645 B3            [ 4]  812 	or	a, e
   0646 B0            [ 4]  813 	or	a, b
   0647 B1            [ 4]  814 	or	a, c
   0648 20 08         [12]  815 	jr	NZ,00122$
                            816 ;src\CFG8266.c:193: count++;
   064A DD 36 FE 01   [19]  817 	ld	-2 (ix), #0x01
   064E AF            [ 4]  818 	xor	a, a
   064F DD 77 FF      [19]  819 	ld	-1 (ix), a
                            820 ;src\CFG8266.c:196: while(tmp > 0)
   0652                     821 00122$:
   0652                     822 00105$:
                            823 ;src\CFG8266.c:198: tmp = tmp/base;
   0652 DD 7E 0A      [19]  824 	ld	a, 10 (ix)
   0655 DD 77 F1      [19]  825 	ld	-15 (ix), a
   0658 DD 7E 0B      [19]  826 	ld	a, 11 (ix)
   065B DD 77 F2      [19]  827 	ld	-14 (ix), a
   065E 17            [ 4]  828 	rla
   065F 9F            [ 4]  829 	sbc	a, a
   0660 DD 77 F3      [19]  830 	ld	-13 (ix), a
   0663 DD 77 F4      [19]  831 	ld	-12 (ix), a
                            832 ;src\CFG8266.c:196: while(tmp > 0)
   0666 7A            [ 4]  833 	ld	a, d
   0667 B3            [ 4]  834 	or	a, e
   0668 B0            [ 4]  835 	or	a, b
   0669 B1            [ 4]  836 	or	a, c
   066A 28 23         [12]  837 	jr	Z,00107$
                            838 ;src\CFG8266.c:198: tmp = tmp/base;
   066C DD 6E F3      [19]  839 	ld	l, -13 (ix)
   066F DD 66 F4      [19]  840 	ld	h, -12 (ix)
   0672 E5            [11]  841 	push	hl
   0673 DD 6E F1      [19]  842 	ld	l, -15 (ix)
   0676 DD 66 F2      [19]  843 	ld	h, -14 (ix)
   0679 E5            [11]  844 	push	hl
   067A D5            [11]  845 	push	de
   067B C5            [11]  846 	push	bc
   067C CDr00r00      [17]  847 	call	__divulong
   067F F1            [10]  848 	pop	af
   0680 F1            [10]  849 	pop	af
   0681 F1            [10]  850 	pop	af
   0682 F1            [10]  851 	pop	af
   0683 4D            [ 4]  852 	ld	c, l
   0684 44            [ 4]  853 	ld	b, h
                            854 ;src\CFG8266.c:199: count++;
   0685 DD 34 FE      [23]  855 	inc	-2 (ix)
   0688 20 C8         [12]  856 	jr	NZ,00105$
   068A DD 34 FF      [23]  857 	inc	-1 (ix)
   068D 18 C3         [12]  858 	jr	00105$
   068F                     859 00107$:
                            860 ;src\CFG8266.c:202: ptr += count;
   068F DD 7E 08      [19]  861 	ld	a, 8 (ix)
   0692 DD 86 FE      [19]  862 	add	a, -2 (ix)
   0695 DD 77 08      [19]  863 	ld	8 (ix), a
   0698 DD 7E 09      [19]  864 	ld	a, 9 (ix)
   069B DD 8E FF      [19]  865 	adc	a, -1 (ix)
   069E DD 77 09      [19]  866 	ld	9 (ix), a
                            867 ;src\CFG8266.c:204: *ptr = '\0';
   06A1 DD 4E 08      [19]  868 	ld	c, 8 (ix)
   06A4 DD 46 09      [19]  869 	ld	b, 9 (ix)
   06A7 AF            [ 4]  870 	xor	a, a
   06A8 02            [ 7]  871 	ld	(bc), a
                            872 ;src\CFG8266.c:206: do
   06A9                     873 00114$:
                            874 ;src\CFG8266.c:208: res = value - base * (t = value / base);
   06A9 DD 6E F3      [19]  875 	ld	l, -13 (ix)
   06AC DD 66 F4      [19]  876 	ld	h, -12 (ix)
   06AF E5            [11]  877 	push	hl
   06B0 DD 6E F1      [19]  878 	ld	l, -15 (ix)
   06B3 DD 66 F2      [19]  879 	ld	h, -14 (ix)
   06B6 E5            [11]  880 	push	hl
   06B7 DD 6E 06      [19]  881 	ld	l, 6 (ix)
   06BA DD 66 07      [19]  882 	ld	h, 7 (ix)
   06BD E5            [11]  883 	push	hl
   06BE DD 6E 04      [19]  884 	ld	l, 4 (ix)
   06C1 DD 66 05      [19]  885 	ld	h, 5 (ix)
   06C4 E5            [11]  886 	push	hl
   06C5 CDr00r00      [17]  887 	call	__divulong
   06C8 F1            [10]  888 	pop	af
   06C9 F1            [10]  889 	pop	af
   06CA F1            [10]  890 	pop	af
   06CB F1            [10]  891 	pop	af
   06CC DD 75 F5      [19]  892 	ld	-11 (ix), l
   06CF DD 74 F6      [19]  893 	ld	-10 (ix), h
   06D2 DD 73 F7      [19]  894 	ld	-9 (ix), e
   06D5 DD 72 F8      [19]  895 	ld	-8 (ix), d
   06D8 D5            [11]  896 	push	de
   06D9 E5            [11]  897 	push	hl
   06DA DD 6E F3      [19]  898 	ld	l, -13 (ix)
   06DD DD 66 F4      [19]  899 	ld	h, -12 (ix)
   06E0 E5            [11]  900 	push	hl
   06E1 DD 6E F1      [19]  901 	ld	l, -15 (ix)
   06E4 DD 66 F2      [19]  902 	ld	h, -14 (ix)
   06E7 E5            [11]  903 	push	hl
   06E8 CDr00r00      [17]  904 	call	__mullong
   06EB F1            [10]  905 	pop	af
   06EC F1            [10]  906 	pop	af
   06ED F1            [10]  907 	pop	af
   06EE F1            [10]  908 	pop	af
   06EF DD 75 FC      [19]  909 	ld	-4 (ix), l
   06F2 DD 74 FD      [19]  910 	ld	-3 (ix), h
   06F5 DD 73 FE      [19]  911 	ld	-2 (ix), e
   06F8 DD 72 FF      [19]  912 	ld	-1 (ix), d
   06FB DD 7E 04      [19]  913 	ld	a, 4 (ix)
   06FE DD 96 FC      [19]  914 	sub	a, -4 (ix)
   0701 4F            [ 4]  915 	ld	c, a
   0702 DD 7E 05      [19]  916 	ld	a, 5 (ix)
   0705 DD 9E FD      [19]  917 	sbc	a, -3 (ix)
   0708 47            [ 4]  918 	ld	b, a
   0709 DD 7E 06      [19]  919 	ld	a, 6 (ix)
   070C DD 9E FE      [19]  920 	sbc	a, -2 (ix)
   070F 5F            [ 4]  921 	ld	e, a
   0710 DD 7E 07      [19]  922 	ld	a, 7 (ix)
   0713 DD 9E FF      [19]  923 	sbc	a, -1 (ix)
   0716 57            [ 4]  924 	ld	d, a
   0717 DD 71 F9      [19]  925 	ld	-7 (ix), c
   071A DD 70 FA      [19]  926 	ld	-6 (ix), b
   071D DD 73 FB      [19]  927 	ld	-5 (ix), e
   0720 DD 72 FC      [19]  928 	ld	-4 (ix), d
                            929 ;src\CFG8266.c:209: if (res < 10)
   0723 DD 7E F9      [19]  930 	ld	a, -7 (ix)
   0726 D6 0A         [ 7]  931 	sub	a, #0x0a
   0728 DD 7E FA      [19]  932 	ld	a, -6 (ix)
   072B DE 00         [ 7]  933 	sbc	a, #0x00
   072D DD 7E FB      [19]  934 	ld	a, -5 (ix)
   0730 DE 00         [ 7]  935 	sbc	a, #0x00
   0732 DD 7E FC      [19]  936 	ld	a, -4 (ix)
   0735 DE 00         [ 7]  937 	sbc	a, #0x00
   0737 3E 00         [ 7]  938 	ld	a, #0x00
   0739 17            [ 4]  939 	rla
   073A DD 77 FD      [19]  940 	ld	-3 (ix), a
                            941 ;src\CFG8266.c:211: * -- ptr = '0' + res;
   073D DD 7E 08      [19]  942 	ld	a, 8 (ix)
   0740 C6 FF         [ 7]  943 	add	a, #0xff
   0742 DD 77 FE      [19]  944 	ld	-2 (ix), a
   0745 DD 7E 09      [19]  945 	ld	a, 9 (ix)
   0748 CE FF         [ 7]  946 	adc	a, #0xff
   074A DD 77 FF      [19]  947 	ld	-1 (ix), a
   074D DD 4E F9      [19]  948 	ld	c, -7 (ix)
                            949 ;src\CFG8266.c:209: if (res < 10)
   0750 DD 7E FD      [19]  950 	ld	a, -3 (ix)
   0753 B7            [ 4]  951 	or	a, a
   0754 28 18         [12]  952 	jr	Z,00112$
                            953 ;src\CFG8266.c:211: * -- ptr = '0' + res;
   0756 DD 7E FE      [19]  954 	ld	a, -2 (ix)
   0759 DD 77 08      [19]  955 	ld	8 (ix), a
   075C DD 7E FF      [19]  956 	ld	a, -1 (ix)
   075F DD 77 09      [19]  957 	ld	9 (ix), a
   0762 DD 5E 08      [19]  958 	ld	e, 8 (ix)
   0765 DD 56 09      [19]  959 	ld	d, 9 (ix)
   0768 79            [ 4]  960 	ld	a, c
   0769 C6 30         [ 7]  961 	add	a, #0x30
   076B 12            [ 7]  962 	ld	(de), a
   076C 18 32         [12]  963 	jr	00115$
   076E                     964 00112$:
                            965 ;src\CFG8266.c:213: else if ((res >= 10) && (res < 16))
   076E DD CB FD 46   [20]  966 	bit	0,-3 (ix)
   0772 20 2C         [12]  967 	jr	NZ,00115$
   0774 DD 7E F9      [19]  968 	ld	a, -7 (ix)
   0777 D6 10         [ 7]  969 	sub	a, #0x10
   0779 DD 7E FA      [19]  970 	ld	a, -6 (ix)
   077C DE 00         [ 7]  971 	sbc	a, #0x00
   077E DD 7E FB      [19]  972 	ld	a, -5 (ix)
   0781 DE 00         [ 7]  973 	sbc	a, #0x00
   0783 DD 7E FC      [19]  974 	ld	a, -4 (ix)
   0786 DE 00         [ 7]  975 	sbc	a, #0x00
   0788 30 16         [12]  976 	jr	NC,00115$
                            977 ;src\CFG8266.c:215: * --ptr = 'A' - 10 + res;
   078A DD 7E FE      [19]  978 	ld	a, -2 (ix)
   078D DD 77 08      [19]  979 	ld	8 (ix), a
   0790 DD 7E FF      [19]  980 	ld	a, -1 (ix)
   0793 DD 77 09      [19]  981 	ld	9 (ix), a
   0796 DD 5E 08      [19]  982 	ld	e, 8 (ix)
   0799 DD 56 09      [19]  983 	ld	d, 9 (ix)
   079C 79            [ 4]  984 	ld	a, c
   079D C6 37         [ 7]  985 	add	a, #0x37
   079F 12            [ 7]  986 	ld	(de), a
   07A0                     987 00115$:
                            988 ;src\CFG8266.c:217: } while ((value = t) != 0);
   07A0 21 13 00      [10]  989 	ld	hl, #19
   07A3 39            [11]  990 	add	hl, sp
   07A4 EB            [ 4]  991 	ex	de, hl
   07A5 21 04 00      [10]  992 	ld	hl, #4
   07A8 39            [11]  993 	add	hl, sp
   07A9 01 04 00      [10]  994 	ld	bc, #4
   07AC ED B0         [21]  995 	ldir
   07AE DD 7E F8      [19]  996 	ld	a, -8 (ix)
   07B1 DD B6 F7      [19]  997 	or	a, -9 (ix)
   07B4 DD B6 F6      [19]  998 	or	a, -10 (ix)
   07B7 DD B6 F5      [19]  999 	or	a, -11 (ix)
   07BA C2rA9r06      [10] 1000 	jp	NZ, 00114$
                           1001 ;src\CFG8266.c:219: return(ptr);
   07BD DD 6E 08      [19] 1002 	ld	l, 8 (ix)
   07C0 DD 66 09      [19] 1003 	ld	h, 9 (ix)
   07C3                    1004 00117$:
                           1005 ;src\CFG8266.c:220: }
   07C3 DD F9         [10] 1006 	ld	sp, ix
   07C5 DD E1         [14] 1007 	pop	ix
   07C7 C9            [10] 1008 	ret
                           1009 ;src\CFG8266.c:222: bool WaitForRXData(unsigned char *uchData, unsigned int uiDataSize, unsigned int Timeout, bool bVerbose, bool bShowReceivedData)
                           1010 ;	---------------------------------
                           1011 ; Function WaitForRXData
                           1012 ; ---------------------------------
   07C8                    1013 _WaitForRXData::
   07C8 CDr00r00      [17] 1014 	call	___sdcc_enter_ix
   07CB 21 EF FF      [10] 1015 	ld	hl, #-17
   07CE 39            [11] 1016 	add	hl, sp
   07CF F9            [ 6] 1017 	ld	sp, hl
                           1018 ;src\CFG8266.c:224: bool bReturn = false;
   07D0 0E 00         [ 7] 1019 	ld	c, #0x00
                           1020 ;src\CFG8266.c:228: unsigned char advance[4] = {'-','\\','|','/'};
   07D2 21 00 00      [10] 1021 	ld	hl, #0
   07D5 39            [11] 1022 	add	hl, sp
   07D6 DD 75 F3      [19] 1023 	ld	-13 (ix), l
   07D9 DD 74 F4      [19] 1024 	ld	-12 (ix), h
   07DC 36 2D         [10] 1025 	ld	(hl), #0x2d
   07DE DD 6E F3      [19] 1026 	ld	l, -13 (ix)
   07E1 DD 66 F4      [19] 1027 	ld	h, -12 (ix)
   07E4 23            [ 6] 1028 	inc	hl
   07E5 36 5C         [10] 1029 	ld	(hl), #0x5c
   07E7 DD 6E F3      [19] 1030 	ld	l, -13 (ix)
   07EA DD 66 F4      [19] 1031 	ld	h, -12 (ix)
   07ED 23            [ 6] 1032 	inc	hl
   07EE 23            [ 6] 1033 	inc	hl
   07EF 36 7C         [10] 1034 	ld	(hl), #0x7c
   07F1 DD 6E F3      [19] 1035 	ld	l, -13 (ix)
   07F4 DD 66 F4      [19] 1036 	ld	h, -12 (ix)
   07F7 23            [ 6] 1037 	inc	hl
   07F8 23            [ 6] 1038 	inc	hl
   07F9 23            [ 6] 1039 	inc	hl
   07FA 36 2F         [10] 1040 	ld	(hl), #0x2f
                           1041 ;src\CFG8266.c:229: unsigned int i = 0;
   07FC AF            [ 4] 1042 	xor	a, a
   07FD DD 77 FE      [19] 1043 	ld	-2 (ix), a
   0800 DD 77 FF      [19] 1044 	ld	-1 (ix), a
                           1045 ;src\CFG8266.c:231: if (bShowReceivedData)
   0803 DD 7E 0B      [19] 1046 	ld	a, 11 (ix)
   0806 B7            [ 4] 1047 	or	a, a
   0807 28 75         [12] 1048 	jr	Z,00104$
                           1049 ;src\CFG8266.c:233: printf ("Waiting for: ");
   0809 C5            [11] 1050 	push	bc
   080A 21rF7r09      [10] 1051 	ld	hl, #___str_2
   080D E5            [11] 1052 	push	hl
   080E CDr00r00      [17] 1053 	call	_printf
   0811 F1            [10] 1054 	pop	af
   0812 C1            [10] 1055 	pop	bc
                           1056 ;src\CFG8266.c:234: for (i=0;i<uiDataSize;++i)
   0813 11 00 00      [10] 1057 	ld	de, #0x0000
   0816                    1058 00132$:
   0816 7B            [ 4] 1059 	ld	a, e
   0817 DD 96 06      [19] 1060 	sub	a, 6 (ix)
   081A 7A            [ 4] 1061 	ld	a, d
   081B DD 9E 07      [19] 1062 	sbc	a, 7 (ix)
   081E 30 1B         [12] 1063 	jr	NC,00101$
                           1064 ;src\CFG8266.c:235: printf("%c",uchData[i]);
   0820 DD 6E 04      [19] 1065 	ld	l, 4 (ix)
   0823 DD 66 05      [19] 1066 	ld	h, 5 (ix)
   0826 19            [11] 1067 	add	hl, de
   0827 6E            [ 7] 1068 	ld	l, (hl)
   0828 26 00         [ 7] 1069 	ld	h, #0x00
   082A C5            [11] 1070 	push	bc
   082B D5            [11] 1071 	push	de
   082C E5            [11] 1072 	push	hl
   082D 21r05r0A      [10] 1073 	ld	hl, #___str_3
   0830 E5            [11] 1074 	push	hl
   0831 CDr00r00      [17] 1075 	call	_printf
   0834 F1            [10] 1076 	pop	af
   0835 F1            [10] 1077 	pop	af
   0836 D1            [10] 1078 	pop	de
   0837 C1            [10] 1079 	pop	bc
                           1080 ;src\CFG8266.c:234: for (i=0;i<uiDataSize;++i)
   0838 13            [ 6] 1081 	inc	de
   0839 18 DB         [12] 1082 	jr	00132$
   083B                    1083 00101$:
                           1084 ;src\CFG8266.c:236: printf (" / ");
   083B C5            [11] 1085 	push	bc
   083C 21r08r0A      [10] 1086 	ld	hl, #___str_4
   083F E5            [11] 1087 	push	hl
   0840 CDr00r00      [17] 1088 	call	_printf
   0843 F1            [10] 1089 	pop	af
   0844 C1            [10] 1090 	pop	bc
                           1091 ;src\CFG8266.c:237: for (i=0;i<uiDataSize;++i)
   0845 11 00 00      [10] 1092 	ld	de, #0x0000
   0848                    1093 00135$:
   0848 7B            [ 4] 1094 	ld	a, e
   0849 DD 96 06      [19] 1095 	sub	a, 6 (ix)
   084C 7A            [ 4] 1096 	ld	a, d
   084D DD 9E 07      [19] 1097 	sbc	a, 7 (ix)
   0850 30 1B         [12] 1098 	jr	NC,00102$
                           1099 ;src\CFG8266.c:238: printf("{%x}",uchData[i]);
   0852 DD 6E 04      [19] 1100 	ld	l, 4 (ix)
   0855 DD 66 05      [19] 1101 	ld	h, 5 (ix)
   0858 19            [11] 1102 	add	hl, de
   0859 6E            [ 7] 1103 	ld	l, (hl)
   085A 26 00         [ 7] 1104 	ld	h, #0x00
   085C C5            [11] 1105 	push	bc
   085D D5            [11] 1106 	push	de
   085E E5            [11] 1107 	push	hl
   085F 21r0Cr0A      [10] 1108 	ld	hl, #___str_5
   0862 E5            [11] 1109 	push	hl
   0863 CDr00r00      [17] 1110 	call	_printf
   0866 F1            [10] 1111 	pop	af
   0867 F1            [10] 1112 	pop	af
   0868 D1            [10] 1113 	pop	de
   0869 C1            [10] 1114 	pop	bc
                           1115 ;src\CFG8266.c:237: for (i=0;i<uiDataSize;++i)
   086A 13            [ 6] 1116 	inc	de
   086B 18 DB         [12] 1117 	jr	00135$
   086D                    1118 00102$:
                           1119 ;src\CFG8266.c:239: printf ("\r\n");
   086D C5            [11] 1120 	push	bc
   086E 21r11r0A      [10] 1121 	ld	hl, #___str_7
   0871 E5            [11] 1122 	push	hl
   0872 CDr00r00      [17] 1123 	call	_puts
   0875 F1            [10] 1124 	pop	af
   0876 C1            [10] 1125 	pop	bc
                           1126 ;src\CFG8266.c:240: i = 0;
   0877 AF            [ 4] 1127 	xor	a, a
   0878 DD 77 FE      [19] 1128 	ld	-2 (ix), a
   087B DD 77 FF      [19] 1129 	ld	-1 (ix), a
   087E                    1130 00104$:
                           1131 ;src\CFG8266.c:243: TickCount = 0;
   087E 21 00 00      [10] 1132 	ld	hl, #0x0000
   0881 22 9E FC      [16] 1133 	ld	(_TickCount), hl
                           1134 ;src\CFG8266.c:244: Timeout1 = TickCount + 5;
   0884 FD 21 9E FC   [14] 1135 	ld	iy, #_TickCount
   0888 FD 7E 00      [19] 1136 	ld	a, 0 (iy)
   088B C6 05         [ 7] 1137 	add	a, #0x05
   088D DD 77 F5      [19] 1138 	ld	-11 (ix), a
   0890 FD 7E 01      [19] 1139 	ld	a, 1 (iy)
   0893 CE 00         [ 7] 1140 	adc	a, #0x00
   0895 DD 77 F6      [19] 1141 	ld	-10 (ix), a
                           1142 ;src\CFG8266.c:245: Timeout2 = TickCount + Timeout; //Wait up to 5 minutes
   0898 FD 7E 00      [19] 1143 	ld	a, 0 (iy)
   089B DD 86 08      [19] 1144 	add	a, 8 (ix)
   089E 5F            [ 4] 1145 	ld	e, a
   089F FD 7E 01      [19] 1146 	ld	a, 1 (iy)
   08A2 DD 8E 09      [19] 1147 	adc	a, 9 (ix)
   08A5 57            [ 4] 1148 	ld	d, a
                           1149 ;src\CFG8266.c:247: ResponseSt=0;
   08A6 AF            [ 4] 1150 	xor	a, a
   08A7 DD 77 FC      [19] 1151 	ld	-4 (ix), a
   08AA DD 77 FD      [19] 1152 	ld	-3 (ix), a
                           1153 ;src\CFG8266.c:249: do
   08AD DD 7E 06      [19] 1154 	ld	a, 6 (ix)
   08B0 D6 02         [ 7] 1155 	sub	a, #0x02
   08B2 DD B6 07      [19] 1156 	or	a, 7 (ix)
   08B5 3E 01         [ 7] 1157 	ld	a, #0x01
   08B7 28 01         [12] 1158 	jr	Z,00227$
   08B9 AF            [ 4] 1159 	xor	a, a
   08BA                    1160 00227$:
   08BA DD 77 F7      [19] 1161 	ld	-9 (ix), a
   08BD 3E 84         [ 7] 1162 	ld	a, #0x84
   08BF DD BE 08      [19] 1163 	cp	a, 8 (ix)
   08C2 3E 03         [ 7] 1164 	ld	a, #0x03
   08C4 DD 9E 09      [19] 1165 	sbc	a, 9 (ix)
   08C7 3E 00         [ 7] 1166 	ld	a, #0x00
   08C9 17            [ 4] 1167 	rla
   08CA DD 77 F8      [19] 1168 	ld	-8 (ix), a
   08CD                    1169 00128$:
                           1170 ;src\CFG8266.c:251: if (Timeout>900)
   08CD DD 7E F8      [19] 1171 	ld	a, -8 (ix)
   08D0 B7            [ 4] 1172 	or	a, a
   08D1 28 4D         [12] 1173 	jr	Z,00108$
                           1174 ;src\CFG8266.c:253: if (TickCount>Timeout1)
   08D3 DD 7E F5      [19] 1175 	ld	a, -11 (ix)
   08D6 FD 21 9E FC   [14] 1176 	ld	iy, #_TickCount
   08DA FD 96 00      [19] 1177 	sub	a, 0 (iy)
   08DD DD 7E F6      [19] 1178 	ld	a, -10 (ix)
   08E0 FD 9E 01      [19] 1179 	sbc	a, 1 (iy)
   08E3 30 3B         [12] 1180 	jr	NC,00108$
                           1181 ;src\CFG8266.c:255: Timeout1 = TickCount + 5;
   08E5 FD 7E 00      [19] 1182 	ld	a, 0 (iy)
   08E8 C6 05         [ 7] 1183 	add	a, #0x05
   08EA DD 77 F5      [19] 1184 	ld	-11 (ix), a
   08ED FD 7E 01      [19] 1185 	ld	a, 1 (iy)
   08F0 CE 00         [ 7] 1186 	adc	a, #0x00
   08F2 DD 77 F6      [19] 1187 	ld	-10 (ix), a
                           1188 ;src\CFG8266.c:256: PrintChar(advance[i%4]); // next char
   08F5 DD 7E FE      [19] 1189 	ld	a, -2 (ix)
   08F8 E6 03         [ 7] 1190 	and	a, #0x03
   08FA 06 00         [ 7] 1191 	ld	b, #0x00
   08FC DD 86 F3      [19] 1192 	add	a, -13 (ix)
   08FF 6F            [ 4] 1193 	ld	l, a
   0900 78            [ 4] 1194 	ld	a, b
   0901 DD 8E F4      [19] 1195 	adc	a, -12 (ix)
   0904 67            [ 4] 1196 	ld	h, a
   0905 7E            [ 7] 1197 	ld	a, (hl)
   0906 C5            [11] 1198 	push	bc
   0907 D5            [11] 1199 	push	de
   0908 F5            [11] 1200 	push	af
   0909 33            [ 6] 1201 	inc	sp
   090A CDr00r00      [17] 1202 	call	_PrintChar
   090D 33            [ 6] 1203 	inc	sp
   090E 3E 1D         [ 7] 1204 	ld	a, #0x1d
   0910 F5            [11] 1205 	push	af
   0911 33            [ 6] 1206 	inc	sp
   0912 CDr00r00      [17] 1207 	call	_PrintChar
   0915 33            [ 6] 1208 	inc	sp
   0916 D1            [10] 1209 	pop	de
   0917 C1            [10] 1210 	pop	bc
                           1211 ;src\CFG8266.c:258: ++i;
   0918 DD 34 FE      [23] 1212 	inc	-2 (ix)
   091B 20 03         [12] 1213 	jr	NZ,00228$
   091D DD 34 FF      [23] 1214 	inc	-1 (ix)
   0920                    1215 00228$:
   0920                    1216 00108$:
                           1217 ;src\CFG8266.c:261: if(UartRXData())
   0920 DB 07         [11] 1218 	in	a, (_myPort7)
   0922 0F            [ 4] 1219 	rrca
   0923 D2rE2r09      [10] 1220 	jp	NC,00125$
                           1221 ;src\CFG8266.c:263: rx_data = GetUARTData();
   0926 DB 06         [11] 1222 	in	a, (_myPort6)
   0928 47            [ 4] 1223 	ld	b, a
                           1224 ;src\CFG8266.c:265: if (rx_data == uchData[ResponseSt])
   0929 DD 7E 04      [19] 1225 	ld	a, 4 (ix)
   092C DD 86 FC      [19] 1226 	add	a, -4 (ix)
   092F 6F            [ 4] 1227 	ld	l, a
   0930 DD 7E 05      [19] 1228 	ld	a, 5 (ix)
   0933 DD 8E FD      [19] 1229 	adc	a, -3 (ix)
   0936 67            [ 4] 1230 	ld	h, a
   0937 7E            [ 7] 1231 	ld	a, (hl)
   0938 DD 77 F9      [19] 1232 	ld	-7 (ix), a
                           1233 ;src\CFG8266.c:268: printf ("{%x}",rx_data);
   093B DD 70 FA      [19] 1234 	ld	-6 (ix), b
   093E AF            [ 4] 1235 	xor	a, a
   093F DD 77 FB      [19] 1236 	ld	-5 (ix), a
                           1237 ;src\CFG8266.c:265: if (rx_data == uchData[ResponseSt])
   0942 DD 7E F9      [19] 1238 	ld	a, -7 (ix)
   0945 90            [ 4] 1239 	sub	a, b
   0946 20 36         [12] 1240 	jr	NZ,00122$
                           1241 ;src\CFG8266.c:267: if (bShowReceivedData)
   0948 DD 7E 0B      [19] 1242 	ld	a, 11 (ix)
   094B B7            [ 4] 1243 	or	a, a
   094C 28 14         [12] 1244 	jr	Z,00110$
                           1245 ;src\CFG8266.c:268: printf ("{%x}",rx_data);
   094E C5            [11] 1246 	push	bc
   094F D5            [11] 1247 	push	de
   0950 DD 6E FA      [19] 1248 	ld	l, -6 (ix)
   0953 DD 66 FB      [19] 1249 	ld	h, -5 (ix)
   0956 E5            [11] 1250 	push	hl
   0957 21r0Cr0A      [10] 1251 	ld	hl, #___str_5
   095A E5            [11] 1252 	push	hl
   095B CDr00r00      [17] 1253 	call	_printf
   095E F1            [10] 1254 	pop	af
   095F F1            [10] 1255 	pop	af
   0960 D1            [10] 1256 	pop	de
   0961 C1            [10] 1257 	pop	bc
   0962                    1258 00110$:
                           1259 ;src\CFG8266.c:269: ++ResponseSt;
   0962 DD 34 FC      [23] 1260 	inc	-4 (ix)
   0965 20 03         [12] 1261 	jr	NZ,00232$
   0967 DD 34 FD      [23] 1262 	inc	-3 (ix)
   096A                    1263 00232$:
                           1264 ;src\CFG8266.c:270: if (ResponseSt == uiDataSize)
   096A DD 7E FC      [19] 1265 	ld	a, -4 (ix)
   096D DD 96 06      [19] 1266 	sub	a, 6 (ix)
   0970 20 70         [12] 1267 	jr	NZ,00125$
   0972 DD 7E FD      [19] 1268 	ld	a, -3 (ix)
   0975 DD 96 07      [19] 1269 	sub	a, 7 (ix)
   0978 20 68         [12] 1270 	jr	NZ,00125$
                           1271 ;src\CFG8266.c:272: bReturn = true;
   097A 0E 01         [ 7] 1272 	ld	c, #0x01
                           1273 ;src\CFG8266.c:273: break;
   097C 18 73         [12] 1274 	jr	00130$
   097E                    1275 00122$:
                           1276 ;src\CFG8266.c:278: if ((ResponseSt)&&(bShowReceivedData))
   097E DD 7E FD      [19] 1277 	ld	a, -3 (ix)
   0981 DD B6 FC      [19] 1278 	or	a, -4 (ix)
   0984 28 21         [12] 1279 	jr	Z,00114$
   0986 DD 7E 0B      [19] 1280 	ld	a, 11 (ix)
   0989 B7            [ 4] 1281 	or	a, a
   098A 28 1B         [12] 1282 	jr	Z,00114$
                           1283 ;src\CFG8266.c:279: printf ("{%x} != [%x]",rx_data,uchData[ResponseSt]);
   098C DD 6E F9      [19] 1284 	ld	l, -7 (ix)
   098F 26 00         [ 7] 1285 	ld	h, #0x00
   0991 C5            [11] 1286 	push	bc
   0992 D5            [11] 1287 	push	de
   0993 E5            [11] 1288 	push	hl
   0994 DD 6E FA      [19] 1289 	ld	l, -6 (ix)
   0997 DD 66 FB      [19] 1290 	ld	h, -5 (ix)
   099A E5            [11] 1291 	push	hl
   099B 21r13r0A      [10] 1292 	ld	hl, #___str_8
   099E E5            [11] 1293 	push	hl
   099F CDr00r00      [17] 1294 	call	_printf
   09A2 F1            [10] 1295 	pop	af
   09A3 F1            [10] 1296 	pop	af
   09A4 F1            [10] 1297 	pop	af
   09A5 D1            [10] 1298 	pop	de
   09A6 C1            [10] 1299 	pop	bc
   09A7                    1300 00114$:
                           1301 ;src\CFG8266.c:280: if ((uiDataSize==2)&&(ResponseSt==1))
   09A7 DD 7E F7      [19] 1302 	ld	a, -9 (ix)
   09AA B7            [ 4] 1303 	or	a, a
   09AB 28 2E         [12] 1304 	jr	Z,00119$
   09AD DD 7E FC      [19] 1305 	ld	a, -4 (ix)
   09B0 3D            [ 4] 1306 	dec	a
   09B1 DD B6 FD      [19] 1307 	or	a, -3 (ix)
   09B4 20 25         [12] 1308 	jr	NZ,00119$
                           1309 ;src\CFG8266.c:282: if (bVerbose)
   09B6 DD 7E 0A      [19] 1310 	ld	a, 10 (ix)
   09B9 B7            [ 4] 1311 	or	a, a
   09BA 28 1B         [12] 1312 	jr	Z,00117$
                           1313 ;src\CFG8266.c:283: printf ("Error %u on command %c...\r\n",rx_data,uchData[0]);
   09BC DD 6E 04      [19] 1314 	ld	l, 4 (ix)
   09BF DD 66 05      [19] 1315 	ld	h, 5 (ix)
   09C2 4E            [ 7] 1316 	ld	c, (hl)
   09C3 06 00         [ 7] 1317 	ld	b, #0x00
   09C5 C5            [11] 1318 	push	bc
   09C6 DD 6E FA      [19] 1319 	ld	l, -6 (ix)
   09C9 DD 66 FB      [19] 1320 	ld	h, -5 (ix)
   09CC E5            [11] 1321 	push	hl
   09CD 21r20r0A      [10] 1322 	ld	hl, #___str_9
   09D0 E5            [11] 1323 	push	hl
   09D1 CDr00r00      [17] 1324 	call	_printf
   09D4 F1            [10] 1325 	pop	af
   09D5 F1            [10] 1326 	pop	af
   09D6 F1            [10] 1327 	pop	af
   09D7                    1328 00117$:
                           1329 ;src\CFG8266.c:284: return false;
   09D7 2E 00         [ 7] 1330 	ld	l, #0x00
   09D9 18 17         [12] 1331 	jr	00137$
   09DB                    1332 00119$:
                           1333 ;src\CFG8266.c:286: ResponseSt = 0;
   09DB AF            [ 4] 1334 	xor	a, a
   09DC DD 77 FC      [19] 1335 	ld	-4 (ix), a
   09DF DD 77 FD      [19] 1336 	ld	-3 (ix), a
   09E2                    1337 00125$:
                           1338 ;src\CFG8266.c:290: if (TickCount>Timeout2)
   09E2 7B            [ 4] 1339 	ld	a, e
   09E3 FD 21 9E FC   [14] 1340 	ld	iy, #_TickCount
   09E7 FD 96 00      [19] 1341 	sub	a, 0 (iy)
   09EA 7A            [ 4] 1342 	ld	a, d
   09EB FD 9E 01      [19] 1343 	sbc	a, 1 (iy)
   09EE D2rCDr08      [10] 1344 	jp	NC, 00128$
                           1345 ;src\CFG8266.c:293: while (1);
   09F1                    1346 00130$:
                           1347 ;src\CFG8266.c:295: return bReturn;
   09F1 69            [ 4] 1348 	ld	l, c
   09F2                    1349 00137$:
                           1350 ;src\CFG8266.c:296: }
   09F2 DD F9         [10] 1351 	ld	sp, ix
   09F4 DD E1         [14] 1352 	pop	ix
   09F6 C9            [10] 1353 	ret
   09F7                    1354 ___str_2:
   09F7 57 61 69 74 69 6E  1355 	.ascii "Waiting for: "
        67 20 66 6F 72 3A
        20
   0A04 00                 1356 	.db 0x00
   0A05                    1357 ___str_3:
   0A05 25 63              1358 	.ascii "%c"
   0A07 00                 1359 	.db 0x00
   0A08                    1360 ___str_4:
   0A08 20 2F 20           1361 	.ascii " / "
   0A0B 00                 1362 	.db 0x00
   0A0C                    1363 ___str_5:
   0A0C 7B 25 78 7D        1364 	.ascii "{%x}"
   0A10 00                 1365 	.db 0x00
   0A11                    1366 ___str_7:
   0A11 0D                 1367 	.db 0x0d
   0A12 00                 1368 	.db 0x00
   0A13                    1369 ___str_8:
   0A13 7B 25 78 7D 20 21  1370 	.ascii "{%x} != [%x]"
        3D 20 5B 25 78 5D
   0A1F 00                 1371 	.db 0x00
   0A20                    1372 ___str_9:
   0A20 45 72 72 6F 72 20  1373 	.ascii "Error %u on command %c..."
        25 75 20 6F 6E 20
        63 6F 6D 6D 61 6E
        64 20 25 63 2E 2E
        2E
   0A39 0D                 1374 	.db 0x0d
   0A3A 0A                 1375 	.db 0x0a
   0A3B 00                 1376 	.db 0x00
                           1377 ;src\CFG8266.c:298: void FinishUpdate (bool bSendReset)
                           1378 ;	---------------------------------
                           1379 ; Function FinishUpdate
                           1380 ; ---------------------------------
   0A3C                    1381 _FinishUpdate::
   0A3C CDr00r00      [17] 1382 	call	___sdcc_enter_ix
   0A3F F5            [11] 1383 	push	af
   0A40 F5            [11] 1384 	push	af
                           1385 ;src\CFG8266.c:300: unsigned int iRetries = 3;
   0A41 21 03 00      [10] 1386 	ld	hl, #0x0003
   0A44 E3            [19] 1387 	ex	(sp), hl
                           1388 ;src\CFG8266.c:304: bool bReset = bSendReset;
   0A45 DD 7E 04      [19] 1389 	ld	a, 4 (ix)
   0A48 DD 77 FE      [19] 1390 	ld	-2 (ix), a
                           1391 ;src\CFG8266.c:306: printf("\rFinishing flash, this will take some time, WAIT!\r\n");
   0A4B 21r90r0B      [10] 1392 	ld	hl, #___str_11
   0A4E E5            [11] 1393 	push	hl
   0A4F CDr00r00      [17] 1394 	call	_puts
   0A52 F1            [10] 1395 	pop	af
                           1396 ;src\CFG8266.c:308: do
   0A53 DD 36 FF 02   [19] 1397 	ld	-1 (ix), #0x02
   0A57                    1398 00135$:
                           1399 ;src\CFG8266.c:310: bRet = true;
   0A57 2E 01         [ 7] 1400 	ld	l, #0x01
                           1401 ;src\CFG8266.c:311: --ucRetries;
   0A59 DD 35 FF      [23] 1402 	dec	-1 (ix)
                           1403 ;src\CFG8266.c:312: if (bReset)
   0A5C DD 7E FE      [19] 1404 	ld	a, -2 (ix)
   0A5F B7            [ 4] 1405 	or	a, a
   0A60 28 0C         [12] 1406 	jr	Z,00154$
                           1407 ;src\CFG8266.c:313: TxByte('R'); //Request Reset
   0A62 E5            [11] 1408 	push	hl
   0A63 3E 52         [ 7] 1409 	ld	a, #0x52
   0A65 F5            [11] 1410 	push	af
   0A66 33            [ 6] 1411 	inc	sp
   0A67 CDr0Dr06      [17] 1412 	call	_TxByte
   0A6A 33            [ 6] 1413 	inc	sp
   0A6B E1            [10] 1414 	pop	hl
   0A6C 18 3E         [12] 1415 	jr	00110$
                           1416 ;src\CFG8266.c:316: do
   0A6E                    1417 00154$:
   0A6E D1            [10] 1418 	pop	de
   0A6F D5            [11] 1419 	push	de
                           1420 ;src\CFG8266.c:318: for (uchHalt=60;uchHalt>0;--uchHalt)
   0A70                    1421 00152$:
   0A70 3E 3C         [ 7] 1422 	ld	a, #0x3c
   0A72                    1423 00140$:
                           1424 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0A72 76            [ 4] 1425 	halt
                           1426 ;src\CFG8266.c:318: for (uchHalt=60;uchHalt>0;--uchHalt)
   0A73 3D            [ 4] 1427 	dec	a
   0A74 20 FC         [12] 1428 	jr	NZ,00140$
                           1429 ;src\CFG8266.c:320: TxByte('E'); //End Update
   0A76 D5            [11] 1430 	push	de
   0A77 3E 45         [ 7] 1431 	ld	a, #0x45
   0A79 F5            [11] 1432 	push	af
   0A7A 33            [ 6] 1433 	inc	sp
   0A7B CDr0Dr06      [17] 1434 	call	_TxByte
   0A7E 33            [ 6] 1435 	inc	sp
   0A7F AF            [ 4] 1436 	xor	a, a
   0A80 57            [ 4] 1437 	ld	d,a
   0A81 1E 01         [ 7] 1438 	ld	e,#0x01
   0A83 D5            [11] 1439 	push	de
   0A84 21 08 07      [10] 1440 	ld	hl, #0x0708
   0A87 E5            [11] 1441 	push	hl
   0A88 21 02 00      [10] 1442 	ld	hl, #0x0002
   0A8B E5            [11] 1443 	push	hl
   0A8C 21r95r00      [10] 1444 	ld	hl, #_endUpdate
   0A8F E5            [11] 1445 	push	hl
   0A90 CDrC8r07      [17] 1446 	call	_WaitForRXData
   0A93 F1            [10] 1447 	pop	af
   0A94 F1            [10] 1448 	pop	af
   0A95 F1            [10] 1449 	pop	af
   0A96 F1            [10] 1450 	pop	af
   0A97 D1            [10] 1451 	pop	de
                           1452 ;src\CFG8266.c:322: iRetries--;
   0A98 1B            [ 6] 1453 	dec	de
                           1454 ;src\CFG8266.c:324: while ((!bRet)&&(iRetries));
   0A99 7D            [ 4] 1455 	ld	a, l
   0A9A B7            [ 4] 1456 	or	a, a
   0A9B 20 04         [12] 1457 	jr	NZ,00170$
   0A9D 7A            [ 4] 1458 	ld	a, d
   0A9E B3            [ 4] 1459 	or	a, e
   0A9F 20 CF         [12] 1460 	jr	NZ,00152$
   0AA1                    1461 00170$:
   0AA1 33            [ 6] 1462 	inc	sp
   0AA2 33            [ 6] 1463 	inc	sp
   0AA3 D5            [11] 1464 	push	de
                           1465 ;src\CFG8266.c:325: if (bRet)
   0AA4 7D            [ 4] 1466 	ld	a, l
   0AA5 B7            [ 4] 1467 	or	a, a
   0AA6 28 04         [12] 1468 	jr	Z,00110$
                           1469 ;src\CFG8266.c:327: bReset=true;
   0AA8 DD 36 FE 01   [19] 1470 	ld	-2 (ix), #0x01
   0AAC                    1471 00110$:
                           1472 ;src\CFG8266.c:331: if (!bRet)
   0AAC 7D            [ 4] 1473 	ld	a, l
   0AAD B7            [ 4] 1474 	or	a, a
   0AAE 20 0B         [12] 1475 	jr	NZ,00133$
                           1476 ;src\CFG8266.c:332: printf("\rTimeout waiting to end update...\r\n");
   0AB0 21rC3r0B      [10] 1477 	ld	hl, #___str_13
   0AB3 E5            [11] 1478 	push	hl
   0AB4 CDr00r00      [17] 1479 	call	_puts
   0AB7 F1            [10] 1480 	pop	af
   0AB8 C3r84r0B      [10] 1481 	jp	00136$
   0ABB                    1482 00133$:
                           1483 ;src\CFG8266.c:335: if (ucRetries)
   0ABB DD 7E FF      [19] 1484 	ld	a, -1 (ix)
   0ABE B7            [ 4] 1485 	or	a, a
   0ABF 28 18         [12] 1486 	jr	Z,00115$
                           1487 ;src\CFG8266.c:337: if (ucIsFw)
   0AC1 3Ar0Er02      [13] 1488 	ld	a,(#_ucIsFw + 0)
   0AC4 B7            [ 4] 1489 	or	a, a
   0AC5 28 0A         [12] 1490 	jr	Z,00112$
                           1491 ;src\CFG8266.c:338: printf("\rFirmware Update done, ESP is restarting, WAIT...\r\n");
   0AC7 21rE6r0B      [10] 1492 	ld	hl, #___str_15
   0ACA E5            [11] 1493 	push	hl
   0ACB CDr00r00      [17] 1494 	call	_puts
   0ACE F1            [10] 1495 	pop	af
   0ACF 18 08         [12] 1496 	jr	00115$
   0AD1                    1497 00112$:
                           1498 ;src\CFG8266.c:340: printf("\rCertificates Update done, ESP is restarting, WAIT...\r\n");
   0AD1 21r19r0C      [10] 1499 	ld	hl, #___str_17
   0AD4 E5            [11] 1500 	push	hl
   0AD5 CDr00r00      [17] 1501 	call	_puts
   0AD8 F1            [10] 1502 	pop	af
   0AD9                    1503 00115$:
                           1504 ;src\CFG8266.c:343: if (WaitForRXData(responseReady2,7,2700,false,false)) //Wait up to 45 seconds
   0AD9 AF            [ 4] 1505 	xor	a, a
   0ADA F5            [11] 1506 	push	af
   0ADB 33            [ 6] 1507 	inc	sp
   0ADC AF            [ 4] 1508 	xor	a, a
   0ADD F5            [11] 1509 	push	af
   0ADE 33            [ 6] 1510 	inc	sp
   0ADF 21 8C 0A      [10] 1511 	ld	hl, #0x0a8c
   0AE2 E5            [11] 1512 	push	hl
   0AE3 21 07 00      [10] 1513 	ld	hl, #0x0007
   0AE6 E5            [11] 1514 	push	hl
   0AE7 21rB3r00      [10] 1515 	ld	hl, #_responseReady2
   0AEA E5            [11] 1516 	push	hl
   0AEB CDrC8r07      [17] 1517 	call	_WaitForRXData
   0AEE F1            [10] 1518 	pop	af
   0AEF F1            [10] 1519 	pop	af
   0AF0 F1            [10] 1520 	pop	af
   0AF1 F1            [10] 1521 	pop	af
   0AF2 7D            [ 4] 1522 	ld	a, l
   0AF3 B7            [ 4] 1523 	or	a, a
   0AF4 CAr76r0B      [10] 1524 	jp	Z, 00130$
                           1525 ;src\CFG8266.c:345: if (!ucIsFw)
   0AF7 3Ar0Er02      [13] 1526 	ld	a,(#_ucIsFw + 0)
   0AFA B7            [ 4] 1527 	or	a, a
   0AFB 20 6F         [12] 1528 	jr	NZ,00125$
                           1529 ;src\CFG8266.c:347: printf("\rESP Reset Ok, now let's request creation of index file...\r\n");
   0AFD 21r50r0C      [10] 1530 	ld	hl, #___str_19
   0B00 E5            [11] 1531 	push	hl
   0B01 CDr00r00      [17] 1532 	call	_puts
   0B04 F1            [10] 1533 	pop	af
                           1534 ;src\CFG8266.c:349: do
   0B05 DD 36 FE 0A   [19] 1535 	ld	-2 (ix), #0x0a
   0B09 AF            [ 4] 1536 	xor	a, a
   0B0A DD 77 FF      [19] 1537 	ld	-1 (ix), a
                           1538 ;src\CFG8266.c:351: for (uchHalt=60;uchHalt>0;--uchHalt)
   0B0D                    1539 00162$:
   0B0D 3E 3C         [ 7] 1540 	ld	a, #0x3c
   0B0F                    1541 00142$:
                           1542 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0B0F 76            [ 4] 1543 	halt
                           1544 ;src\CFG8266.c:351: for (uchHalt=60;uchHalt>0;--uchHalt)
   0B10 3D            [ 4] 1545 	dec	a
   0B11 20 FC         [12] 1546 	jr	NZ,00142$
                           1547 ;src\CFG8266.c:353: TxByte('I'); //End Update
   0B13 3E 49         [ 7] 1548 	ld	a, #0x49
   0B15 F5            [11] 1549 	push	af
   0B16 33            [ 6] 1550 	inc	sp
   0B17 CDr0Dr06      [17] 1551 	call	_TxByte
   0B1A 33            [ 6] 1552 	inc	sp
                           1553 ;src\CFG8266.c:354: bRet = WaitForRXData(certificateDone,2,3600,false,false); //Wait up to 1 minute, certificate index creation takes time
   0B1B AF            [ 4] 1554 	xor	a, a
   0B1C F5            [11] 1555 	push	af
   0B1D 33            [ 6] 1556 	inc	sp
   0B1E AF            [ 4] 1557 	xor	a, a
   0B1F F5            [11] 1558 	push	af
   0B20 33            [ 6] 1559 	inc	sp
   0B21 21 10 0E      [10] 1560 	ld	hl, #0x0e10
   0B24 E5            [11] 1561 	push	hl
   0B25 21 02 00      [10] 1562 	ld	hl, #0x0002
   0B28 E5            [11] 1563 	push	hl
   0B29 21r97r00      [10] 1564 	ld	hl, #_certificateDone
   0B2C E5            [11] 1565 	push	hl
   0B2D CDrC8r07      [17] 1566 	call	_WaitForRXData
   0B30 F1            [10] 1567 	pop	af
   0B31 F1            [10] 1568 	pop	af
   0B32 F1            [10] 1569 	pop	af
   0B33 F1            [10] 1570 	pop	af
   0B34 DD 75 FD      [19] 1571 	ld	-3 (ix), l
                           1572 ;src\CFG8266.c:355: iRetries--;
   0B37 DD 6E FE      [19] 1573 	ld	l, -2 (ix)
   0B3A DD 66 FF      [19] 1574 	ld	h, -1 (ix)
   0B3D 2B            [ 6] 1575 	dec	hl
   0B3E DD 75 FE      [19] 1576 	ld	-2 (ix), l
   0B41 DD 74 FF      [19] 1577 	ld	-1 (ix), h
                           1578 ;src\CFG8266.c:357: while ((!bRet)&&(iRetries));
   0B44 DD 7E FD      [19] 1579 	ld	a, -3 (ix)
   0B47 B7            [ 4] 1580 	or	a, a
   0B48 20 08         [12] 1581 	jr	NZ,00120$
   0B4A DD 7E FF      [19] 1582 	ld	a, -1 (ix)
   0B4D DD B6 FE      [19] 1583 	or	a, -2 (ix)
   0B50 20 BB         [12] 1584 	jr	NZ,00162$
   0B52                    1585 00120$:
                           1586 ;src\CFG8266.c:358: if (bRet)
   0B52 DD 7E FD      [19] 1587 	ld	a, -3 (ix)
   0B55 B7            [ 4] 1588 	or	a, a
   0B56 28 0A         [12] 1589 	jr	Z,00122$
                           1590 ;src\CFG8266.c:359: printf("\rDone!                                \r\n");
   0B58 21r8Cr0C      [10] 1591 	ld	hl, #___str_21
   0B5B E5            [11] 1592 	push	hl
   0B5C CDr00r00      [17] 1593 	call	_puts
   0B5F F1            [10] 1594 	pop	af
   0B60 18 29         [12] 1595 	jr	00137$
   0B62                    1596 00122$:
                           1597 ;src\CFG8266.c:361: printf("\rDone, but time-out on creating certificates index file!\r\n");
   0B62 21rB4r0C      [10] 1598 	ld	hl, #___str_23
   0B65 E5            [11] 1599 	push	hl
   0B66 CDr00r00      [17] 1600 	call	_puts
   0B69 F1            [10] 1601 	pop	af
   0B6A 18 1F         [12] 1602 	jr	00137$
   0B6C                    1603 00125$:
                           1604 ;src\CFG8266.c:364: printf("\rDone!                              \r\n");
   0B6C 21rEEr0C      [10] 1605 	ld	hl, #___str_25
   0B6F E5            [11] 1606 	push	hl
   0B70 CDr00r00      [17] 1607 	call	_puts
   0B73 F1            [10] 1608 	pop	af
                           1609 ;src\CFG8266.c:365: break;
   0B74 18 15         [12] 1610 	jr	00137$
   0B76                    1611 00130$:
                           1612 ;src\CFG8266.c:368: if (!ucRetries)
   0B76 DD 7E FF      [19] 1613 	ld	a, -1 (ix)
   0B79 B7            [ 4] 1614 	or	a, a
   0B7A 20 08         [12] 1615 	jr	NZ,00136$
                           1616 ;src\CFG8266.c:369: printf("\rTimeout error\r\n");
   0B7C 21r14r0D      [10] 1617 	ld	hl, #___str_27
   0B7F E5            [11] 1618 	push	hl
   0B80 CDr00r00      [17] 1619 	call	_puts
   0B83 F1            [10] 1620 	pop	af
   0B84                    1621 00136$:
                           1622 ;src\CFG8266.c:372: while (ucRetries);
   0B84 DD 7E FF      [19] 1623 	ld	a, -1 (ix)
   0B87 B7            [ 4] 1624 	or	a, a
   0B88 C2r57r0A      [10] 1625 	jp	NZ, 00135$
   0B8B                    1626 00137$:
                           1627 ;src\CFG8266.c:374: return;
                           1628 ;src\CFG8266.c:375: }
   0B8B DD F9         [10] 1629 	ld	sp, ix
   0B8D DD E1         [14] 1630 	pop	ix
   0B8F C9            [10] 1631 	ret
   0B90                    1632 ___str_11:
   0B90 0D                 1633 	.db 0x0d
   0B91 46 69 6E 69 73 68  1634 	.ascii "Finishing flash, this will take some time, WAIT!"
        69 6E 67 20 66 6C
        61 73 68 2C 20 74
        68 69 73 20 77 69
        6C 6C 20 74 61 6B
        65 20 73 6F 6D 65
        20 74 69 6D 65 2C
        20 57 41 49 54 21
   0BC1 0D                 1635 	.db 0x0d
   0BC2 00                 1636 	.db 0x00
   0BC3                    1637 ___str_13:
   0BC3 0D                 1638 	.db 0x0d
   0BC4 54 69 6D 65 6F 75  1639 	.ascii "Timeout waiting to end update..."
        74 20 77 61 69 74
        69 6E 67 20 74 6F
        20 65 6E 64 20 75
        70 64 61 74 65 2E
        2E 2E
   0BE4 0D                 1640 	.db 0x0d
   0BE5 00                 1641 	.db 0x00
   0BE6                    1642 ___str_15:
   0BE6 0D                 1643 	.db 0x0d
   0BE7 46 69 72 6D 77 61  1644 	.ascii "Firmware Update done, ESP is restarting, WAIT..."
        72 65 20 55 70 64
        61 74 65 20 64 6F
        6E 65 2C 20 45 53
        50 20 69 73 20 72
        65 73 74 61 72 74
        69 6E 67 2C 20 57
        41 49 54 2E 2E 2E
   0C17 0D                 1645 	.db 0x0d
   0C18 00                 1646 	.db 0x00
   0C19                    1647 ___str_17:
   0C19 0D                 1648 	.db 0x0d
   0C1A 43 65 72 74 69 66  1649 	.ascii "Certificates Update done, ESP is restarting, WAIT..."
        69 63 61 74 65 73
        20 55 70 64 61 74
        65 20 64 6F 6E 65
        2C 20 45 53 50 20
        69 73 20 72 65 73
        74 61 72 74 69 6E
        67 2C 20 57 41 49
        54 2E 2E 2E
   0C4E 0D                 1650 	.db 0x0d
   0C4F 00                 1651 	.db 0x00
   0C50                    1652 ___str_19:
   0C50 0D                 1653 	.db 0x0d
   0C51 45 53 50 20 52 65  1654 	.ascii "ESP Reset Ok, now let's request creation of index file..."
        73 65 74 20 4F 6B
        2C 20 6E 6F 77 20
        6C 65 74 27 73 20
        72 65 71 75 65 73
        74 20 63 72 65 61
        74 69 6F 6E 20 6F
        66 20 69 6E 64 65
        78 20 66 69 6C 65
        2E 2E 2E
   0C8A 0D                 1655 	.db 0x0d
   0C8B 00                 1656 	.db 0x00
   0C8C                    1657 ___str_21:
   0C8C 0D                 1658 	.db 0x0d
   0C8D 44 6F 6E 65 21 20  1659 	.ascii "Done!                                "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20
   0CB2 0D                 1660 	.db 0x0d
   0CB3 00                 1661 	.db 0x00
   0CB4                    1662 ___str_23:
   0CB4 0D                 1663 	.db 0x0d
   0CB5 44 6F 6E 65 2C 20  1664 	.ascii "Done, but time-out on creating certificates index file!"
        62 75 74 20 74 69
        6D 65 2D 6F 75 74
        20 6F 6E 20 63 72
        65 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 69 6E 64 65
        78 20 66 69 6C 65
        21
   0CEC 0D                 1665 	.db 0x0d
   0CED 00                 1666 	.db 0x00
   0CEE                    1667 ___str_25:
   0CEE 0D                 1668 	.db 0x0d
   0CEF 44 6F 6E 65 21 20  1669 	.ascii "Done!                              "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20
   0D12 0D                 1670 	.db 0x0d
   0D13 00                 1671 	.db 0x00
   0D14                    1672 ___str_27:
   0D14 0D                 1673 	.db 0x0d
   0D15 54 69 6D 65 6F 75  1674 	.ascii "Timeout error"
        74 20 65 72 72 6F
        72
   0D22 0D                 1675 	.db 0x0d
   0D23 00                 1676 	.db 0x00
                           1677 ;src\CFG8266.c:377: int main(char** argv, int argc)
                           1678 ;	---------------------------------
                           1679 ; Function main
                           1680 ; ---------------------------------
   0D24                    1681 _main::
   0D24 CDr00r00      [17] 1682 	call	___sdcc_enter_ix
   0D27 21 1B FE      [10] 1683 	ld	hl, #-485
   0D2A 39            [11] 1684 	add	hl, sp
   0D2B F9            [ 6] 1685 	ld	sp, hl
                           1686 ;src\CFG8266.c:389: unsigned char advance[4] = {'-','\\','|','/'};
   0D2C 21 A5 01      [10] 1687 	ld	hl, #421
   0D2F 39            [11] 1688 	add	hl, sp
   0D30 DD 75 EE      [19] 1689 	ld	-18 (ix), l
   0D33 DD 74 EF      [19] 1690 	ld	-17 (ix), h
   0D36 36 2D         [10] 1691 	ld	(hl), #0x2d
   0D38 DD 6E EE      [19] 1692 	ld	l, -18 (ix)
   0D3B DD 66 EF      [19] 1693 	ld	h, -17 (ix)
   0D3E 23            [ 6] 1694 	inc	hl
   0D3F 36 5C         [10] 1695 	ld	(hl), #0x5c
   0D41 DD 6E EE      [19] 1696 	ld	l, -18 (ix)
   0D44 DD 66 EF      [19] 1697 	ld	h, -17 (ix)
   0D47 23            [ 6] 1698 	inc	hl
   0D48 23            [ 6] 1699 	inc	hl
   0D49 36 7C         [10] 1700 	ld	(hl), #0x7c
   0D4B DD 6E EE      [19] 1701 	ld	l, -18 (ix)
   0D4E DD 66 EF      [19] 1702 	ld	h, -17 (ix)
   0D51 23            [ 6] 1703 	inc	hl
   0D52 23            [ 6] 1704 	inc	hl
   0D53 23            [ 6] 1705 	inc	hl
   0D54 36 2F         [10] 1706 	ld	(hl), #0x2f
                           1707 ;src\CFG8266.c:397: unsigned char ucFirstBlock = 1;
   0D56 DD 36 F0 01   [19] 1708 	ld	-16 (ix), #0x01
                           1709 ;src\CFG8266.c:404: ucLocalUpdate = 0;
   0D5A 21r0Dr02      [10] 1710 	ld	hl,#_ucLocalUpdate + 0
   0D5D 36 00         [10] 1711 	ld	(hl), #0x00
                           1712 ;src\CFG8266.c:405: ucNagleOff = 0;
   0D5F 21r0Fr02      [10] 1713 	ld	hl,#_ucNagleOff + 0
   0D62 36 00         [10] 1714 	ld	(hl), #0x00
                           1715 ;src\CFG8266.c:406: ucNagleOn = 0;
   0D64 21r10r02      [10] 1716 	ld	hl,#_ucNagleOn + 0
   0D67 36 00         [10] 1717 	ld	(hl), #0x00
                           1718 ;src\CFG8266.c:407: ucRadioOff = 0;
   0D69 21r11r02      [10] 1719 	ld	hl,#_ucRadioOff + 0
   0D6C 36 00         [10] 1720 	ld	(hl), #0x00
                           1721 ;src\CFG8266.c:408: ucSetTimeout = 0;
   0D6E 21r12r02      [10] 1722 	ld	hl,#_ucSetTimeout + 0
   0D71 36 00         [10] 1723 	ld	(hl), #0x00
                           1724 ;src\CFG8266.c:410: printf("> SM-X ESP8266 WIFI Module Configuration v1.20 <\r\n(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com\r\n\n");
   0D73 21r05r1A      [10] 1725 	ld	hl, #___str_29
   0D76 E5            [11] 1726 	push	hl
   0D77 CDr00r00      [17] 1727 	call	_puts
   0D7A F1            [10] 1728 	pop	af
                           1729 ;src\CFG8266.c:412: if (IsValidInput(argv, argc))
   0D7B DD 6E 06      [19] 1730 	ld	l, 6 (ix)
   0D7E DD 66 07      [19] 1731 	ld	h, 7 (ix)
   0D81 E5            [11] 1732 	push	hl
   0D82 DD 6E 04      [19] 1733 	ld	l, 4 (ix)
   0D85 DD 66 05      [19] 1734 	ld	h, 5 (ix)
   0D88 E5            [11] 1735 	push	hl
   0D89 CDr4Ar03      [17] 1736 	call	_IsValidInput
   0D8C F1            [10] 1737 	pop	af
   0D8D F1            [10] 1738 	pop	af
   0D8E DD 75 FE      [19] 1739 	ld	-2 (ix), l
   0D91 DD 74 FF      [19] 1740 	ld	-1 (ix), h
   0D94 7C            [ 4] 1741 	ld	a, h
   0D95 DD B6 FE      [19] 1742 	or	a, -2 (ix)
   0D98 CArF5r19      [10] 1743 	jp	Z, 00293$
                           1744 ;src\CFG8266.c:414: do
   0D9B AF            [ 4] 1745 	xor	a, a
   0D9C DD 77 FF      [19] 1746 	ld	-1 (ix), a
   0D9F                    1747 00103$:
                           1748 ;src\CFG8266.c:417: myPort6 = speed;
   0D9F DD 7E FF      [19] 1749 	ld	a, -1 (ix)
   0DA2 D3 06         [11] 1750 	out	(_myPort6), a
                           1751 ;src\CFG8266.c:418: ClearUartData();
   0DA4 3E 14         [ 7] 1752 	ld	a, #0x14
   0DA6 D3 06         [11] 1753 	out	(_myPort6), a
                           1754 ;src\CFG8266.c:419: TxByte('?');
   0DA8 3E 3F         [ 7] 1755 	ld	a, #0x3f
   0DAA F5            [11] 1756 	push	af
   0DAB 33            [ 6] 1757 	inc	sp
   0DAC CDr0Dr06      [17] 1758 	call	_TxByte
   0DAF 33            [ 6] 1759 	inc	sp
                           1760 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0DB0 76            [ 4] 1761 	halt
                           1762 ;src\CFG8266.c:422: bResponse = WaitForRXData(responseOK,2,60,false,false);
   0DB1 AF            [ 4] 1763 	xor	a, a
   0DB2 F5            [11] 1764 	push	af
   0DB3 33            [ 6] 1765 	inc	sp
   0DB4 AF            [ 4] 1766 	xor	a, a
   0DB5 F5            [11] 1767 	push	af
   0DB6 33            [ 6] 1768 	inc	sp
   0DB7 21 3C 00      [10] 1769 	ld	hl, #0x003c
   0DBA E5            [11] 1770 	push	hl
   0DBB 2E 02         [ 7] 1771 	ld	l, #0x02
   0DBD E5            [11] 1772 	push	hl
   0DBE 21r99r00      [10] 1773 	ld	hl, #_responseOK
   0DC1 E5            [11] 1774 	push	hl
   0DC2 CDrC8r07      [17] 1775 	call	_WaitForRXData
   0DC5 F1            [10] 1776 	pop	af
   0DC6 F1            [10] 1777 	pop	af
   0DC7 F1            [10] 1778 	pop	af
   0DC8 F1            [10] 1779 	pop	af
                           1780 ;src\CFG8266.c:424: if (bResponse)
   0DC9 DD 75 FD      [19] 1781 	ld	-3 (ix), l
   0DCC 7D            [ 4] 1782 	ld	a, l
   0DCD B7            [ 4] 1783 	or	a, a
   0DCE 20 0A         [12] 1784 	jr	NZ,00105$
                           1785 ;src\CFG8266.c:426: ++speed;
   0DD0 DD 34 FF      [23] 1786 	inc	-1 (ix)
                           1787 ;src\CFG8266.c:428: while (speed<10);
   0DD3 DD 7E FF      [19] 1788 	ld	a, -1 (ix)
   0DD6 D6 0A         [ 7] 1789 	sub	a, #0x0a
   0DD8 38 C5         [12] 1790 	jr	C,00103$
   0DDA                    1791 00105$:
                           1792 ;src\CFG8266.c:430: if (speed<10)
   0DDA DD 7E FF      [19] 1793 	ld	a, -1 (ix)
   0DDD D6 0A         [ 7] 1794 	sub	a, #0x0a
   0DDF D2rEBr19      [10] 1795 	jp	NC, 00290$
                           1796 ;src\CFG8266.c:432: printf ("Using Baud Rate #%u\r\n",speed);
   0DE2 DD 7E FF      [19] 1797 	ld	a, -1 (ix)
   0DE5 DD 77 FE      [19] 1798 	ld	-2 (ix), a
   0DE8 AF            [ 4] 1799 	xor	a, a
   0DE9 DD 77 FF      [19] 1800 	ld	-1 (ix), a
   0DEC DD 6E FE      [19] 1801 	ld	l, -2 (ix)
   0DEF DD 66 FF      [19] 1802 	ld	h, -1 (ix)
   0DF2 E5            [11] 1803 	push	hl
   0DF3 21r6Br1A      [10] 1804 	ld	hl, #___str_30
   0DF6 E5            [11] 1805 	push	hl
   0DF7 CDr00r00      [17] 1806 	call	_printf
   0DFA F1            [10] 1807 	pop	af
   0DFB F1            [10] 1808 	pop	af
                           1809 ;src\CFG8266.c:433: if ((ucScan)||(ucNagleOff)||(ucNagleOn)||(ucRadioOff)||(ucSetTimeout))
   0DFC 3Ar00r00      [13] 1810 	ld	a,(#_ucScan + 0)
   0DFF B7            [ 4] 1811 	or	a, a
   0E00 20 19         [12] 1812 	jr	NZ,00282$
   0E02 3Ar0Fr02      [13] 1813 	ld	a,(#_ucNagleOff + 0)
   0E05 B7            [ 4] 1814 	or	a, a
   0E06 20 13         [12] 1815 	jr	NZ,00282$
   0E08 3Ar10r02      [13] 1816 	ld	a,(#_ucNagleOn + 0)
   0E0B B7            [ 4] 1817 	or	a, a
   0E0C 20 0D         [12] 1818 	jr	NZ,00282$
   0E0E 3Ar11r02      [13] 1819 	ld	a,(#_ucRadioOff + 0)
   0E11 B7            [ 4] 1820 	or	a, a
   0E12 20 07         [12] 1821 	jr	NZ,00282$
   0E14 3Ar12r02      [13] 1822 	ld	a,(#_ucSetTimeout + 0)
   0E17 B7            [ 4] 1823 	or	a, a
   0E18 CArE9r12      [10] 1824 	jp	Z, 00283$
   0E1B                    1825 00282$:
                           1826 ;src\CFG8266.c:436: if (ucScan)
   0E1B 3Ar00r00      [13] 1827 	ld	a,(#_ucScan + 0)
   0E1E B7            [ 4] 1828 	or	a, a
   0E1F 28 0B         [12] 1829 	jr	Z,00121$
                           1830 ;src\CFG8266.c:437: TxByte('S'); //Request SCAN
   0E21 3E 53         [ 7] 1831 	ld	a, #0x53
   0E23 F5            [11] 1832 	push	af
   0E24 33            [ 6] 1833 	inc	sp
   0E25 CDr0Dr06      [17] 1834 	call	_TxByte
   0E28 33            [ 6] 1835 	inc	sp
   0E29 C3rBBr0E      [10] 1836 	jp	00122$
   0E2C                    1837 00121$:
                           1838 ;src\CFG8266.c:438: else if (ucNagleOff)
   0E2C 3Ar0Fr02      [13] 1839 	ld	a,(#_ucNagleOff + 0)
   0E2F B7            [ 4] 1840 	or	a, a
   0E30 28 0B         [12] 1841 	jr	Z,00118$
                           1842 ;src\CFG8266.c:439: TxByte('N'); //Request nagle off for future connections
   0E32 3E 4E         [ 7] 1843 	ld	a, #0x4e
   0E34 F5            [11] 1844 	push	af
   0E35 33            [ 6] 1845 	inc	sp
   0E36 CDr0Dr06      [17] 1846 	call	_TxByte
   0E39 33            [ 6] 1847 	inc	sp
   0E3A C3rBBr0E      [10] 1848 	jp	00122$
   0E3D                    1849 00118$:
                           1850 ;src\CFG8266.c:440: else if (ucNagleOn)
   0E3D 3Ar10r02      [13] 1851 	ld	a,(#_ucNagleOn + 0)
   0E40 B7            [ 4] 1852 	or	a, a
   0E41 28 0A         [12] 1853 	jr	Z,00115$
                           1854 ;src\CFG8266.c:441: TxByte('D'); //Request nagle on for future connections
   0E43 3E 44         [ 7] 1855 	ld	a, #0x44
   0E45 F5            [11] 1856 	push	af
   0E46 33            [ 6] 1857 	inc	sp
   0E47 CDr0Dr06      [17] 1858 	call	_TxByte
   0E4A 33            [ 6] 1859 	inc	sp
   0E4B 18 6E         [12] 1860 	jr	00122$
   0E4D                    1861 00115$:
                           1862 ;src\CFG8266.c:442: else if (ucRadioOff)
   0E4D 3Ar11r02      [13] 1863 	ld	a,(#_ucRadioOff + 0)
   0E50 B7            [ 4] 1864 	or	a, a
   0E51 28 0A         [12] 1865 	jr	Z,00112$
                           1866 ;src\CFG8266.c:443: TxByte('O'); //Request to turn off wifi radio immediately
   0E53 3E 4F         [ 7] 1867 	ld	a, #0x4f
   0E55 F5            [11] 1868 	push	af
   0E56 33            [ 6] 1869 	inc	sp
   0E57 CDr0Dr06      [17] 1870 	call	_TxByte
   0E5A 33            [ 6] 1871 	inc	sp
   0E5B 18 5E         [12] 1872 	jr	00122$
   0E5D                    1873 00112$:
                           1874 ;src\CFG8266.c:444: else if (ucSetTimeout)
   0E5D 3Ar12r02      [13] 1875 	ld	a,(#_ucSetTimeout + 0)
   0E60 B7            [ 4] 1876 	or	a, a
   0E61 28 58         [12] 1877 	jr	Z,00122$
                           1878 ;src\CFG8266.c:446: ucTimeOutMSB = ((unsigned char)((uiTimeout&0xff00)>>8));
   0E63 FD 21r13r02   [14] 1879 	ld	iy, #_uiTimeout
   0E67 FD 4E 01      [19] 1880 	ld	c, 1 (iy)
   0E6A DD 71 FE      [19] 1881 	ld	-2 (ix), c
                           1882 ;src\CFG8266.c:447: ucTimeOutLSB = ((unsigned char)(uiTimeout&0xff));
   0E6D FD 7E 00      [19] 1883 	ld	a, 0 (iy)
   0E70 DD 77 FF      [19] 1884 	ld	-1 (ix), a
                           1885 ;src\CFG8266.c:448: if (uiTimeout)
   0E73 FD 7E 01      [19] 1886 	ld	a, 1 (iy)
   0E76 FD B6 00      [19] 1887 	or	a, 0 (iy)
   0E79 28 0F         [12] 1888 	jr	Z,00107$
                           1889 ;src\CFG8266.c:449: printf("\r\nSetting WiFi idle timeout to %u...\r\n",uiTimeout);
   0E7B 2Ar13r02      [16] 1890 	ld	hl, (_uiTimeout)
   0E7E E5            [11] 1891 	push	hl
   0E7F 21r81r1A      [10] 1892 	ld	hl, #___str_31
   0E82 E5            [11] 1893 	push	hl
   0E83 CDr00r00      [17] 1894 	call	_printf
   0E86 F1            [10] 1895 	pop	af
   0E87 F1            [10] 1896 	pop	af
   0E88 18 08         [12] 1897 	jr	00108$
   0E8A                    1898 00107$:
                           1899 ;src\CFG8266.c:451: printf("\r\nSetting WiFi to always on!\r\n");
   0E8A 21rA8r1A      [10] 1900 	ld	hl, #___str_33
   0E8D E5            [11] 1901 	push	hl
   0E8E CDr00r00      [17] 1902 	call	_puts
   0E91 F1            [10] 1903 	pop	af
   0E92                    1904 00108$:
                           1905 ;src\CFG8266.c:452: TxByte('T'); //Request to set time-out
   0E92 3E 54         [ 7] 1906 	ld	a, #0x54
   0E94 F5            [11] 1907 	push	af
   0E95 33            [ 6] 1908 	inc	sp
   0E96 CDr0Dr06      [17] 1909 	call	_TxByte
   0E99 33            [ 6] 1910 	inc	sp
                           1911 ;src\CFG8266.c:453: TxByte(0);
   0E9A AF            [ 4] 1912 	xor	a, a
   0E9B F5            [11] 1913 	push	af
   0E9C 33            [ 6] 1914 	inc	sp
   0E9D CDr0Dr06      [17] 1915 	call	_TxByte
   0EA0 33            [ 6] 1916 	inc	sp
                           1917 ;src\CFG8266.c:454: TxByte(2);
   0EA1 3E 02         [ 7] 1918 	ld	a, #0x02
   0EA3 F5            [11] 1919 	push	af
   0EA4 33            [ 6] 1920 	inc	sp
   0EA5 CDr0Dr06      [17] 1921 	call	_TxByte
   0EA8 33            [ 6] 1922 	inc	sp
                           1923 ;src\CFG8266.c:455: TxByte(ucTimeOutMSB);
   0EA9 DD 7E FE      [19] 1924 	ld	a, -2 (ix)
   0EAC F5            [11] 1925 	push	af
   0EAD 33            [ 6] 1926 	inc	sp
   0EAE CDr0Dr06      [17] 1927 	call	_TxByte
   0EB1 33            [ 6] 1928 	inc	sp
                           1929 ;src\CFG8266.c:456: TxByte(ucTimeOutLSB);
   0EB2 DD 7E FF      [19] 1930 	ld	a, -1 (ix)
   0EB5 F5            [11] 1931 	push	af
   0EB6 33            [ 6] 1932 	inc	sp
   0EB7 CDr0Dr06      [17] 1933 	call	_TxByte
   0EBA 33            [ 6] 1934 	inc	sp
   0EBB                    1935 00122$:
                           1936 ;src\CFG8266.c:459: if (ucScan)
   0EBB 3Ar00r00      [13] 1937 	ld	a,(#_ucScan + 0)
   0EBE B7            [ 4] 1938 	or	a, a
   0EBF 28 1D         [12] 1939 	jr	Z,00135$
                           1940 ;src\CFG8266.c:460: bResponse = WaitForRXData(scanResponse,2,60,true,false);
   0EC1 AF            [ 4] 1941 	xor	a, a
   0EC2 57            [ 4] 1942 	ld	d,a
   0EC3 1E 01         [ 7] 1943 	ld	e,#0x01
   0EC5 D5            [11] 1944 	push	de
   0EC6 21 3C 00      [10] 1945 	ld	hl, #0x003c
   0EC9 E5            [11] 1946 	push	hl
   0ECA 2E 02         [ 7] 1947 	ld	l, #0x02
   0ECC E5            [11] 1948 	push	hl
   0ECD 21r9Br00      [10] 1949 	ld	hl, #_scanResponse
   0ED0 E5            [11] 1950 	push	hl
   0ED1 CDrC8r07      [17] 1951 	call	_WaitForRXData
   0ED4 F1            [10] 1952 	pop	af
   0ED5 F1            [10] 1953 	pop	af
   0ED6 F1            [10] 1954 	pop	af
   0ED7 F1            [10] 1955 	pop	af
   0ED8 DD 75 FD      [19] 1956 	ld	-3 (ix), l
   0EDB C3r64r0F      [10] 1957 	jp	00136$
   0EDE                    1958 00135$:
                           1959 ;src\CFG8266.c:461: else if (ucNagleOff)
   0EDE 3Ar0Fr02      [13] 1960 	ld	a,(#_ucNagleOff + 0)
   0EE1 B7            [ 4] 1961 	or	a, a
   0EE2 28 1C         [12] 1962 	jr	Z,00132$
                           1963 ;src\CFG8266.c:462: bResponse = WaitForRXData(nagleoffResponse,2,60,true,false);
   0EE4 AF            [ 4] 1964 	xor	a, a
   0EE5 57            [ 4] 1965 	ld	d,a
   0EE6 1E 01         [ 7] 1966 	ld	e,#0x01
   0EE8 D5            [11] 1967 	push	de
   0EE9 21 3C 00      [10] 1968 	ld	hl, #0x003c
   0EEC E5            [11] 1969 	push	hl
   0EED 2E 02         [ 7] 1970 	ld	l, #0x02
   0EEF E5            [11] 1971 	push	hl
   0EF0 21r9Fr00      [10] 1972 	ld	hl, #_nagleoffResponse
   0EF3 E5            [11] 1973 	push	hl
   0EF4 CDrC8r07      [17] 1974 	call	_WaitForRXData
   0EF7 F1            [10] 1975 	pop	af
   0EF8 F1            [10] 1976 	pop	af
   0EF9 F1            [10] 1977 	pop	af
   0EFA F1            [10] 1978 	pop	af
   0EFB DD 75 FD      [19] 1979 	ld	-3 (ix), l
   0EFE 18 64         [12] 1980 	jr	00136$
   0F00                    1981 00132$:
                           1982 ;src\CFG8266.c:463: else if (ucNagleOn)
   0F00 3Ar10r02      [13] 1983 	ld	a,(#_ucNagleOn + 0)
   0F03 B7            [ 4] 1984 	or	a, a
   0F04 28 1C         [12] 1985 	jr	Z,00129$
                           1986 ;src\CFG8266.c:464: bResponse = WaitForRXData(nagleonResponse,2,60,true,false);
   0F06 AF            [ 4] 1987 	xor	a, a
   0F07 57            [ 4] 1988 	ld	d,a
   0F08 1E 01         [ 7] 1989 	ld	e,#0x01
   0F0A D5            [11] 1990 	push	de
   0F0B 21 3C 00      [10] 1991 	ld	hl, #0x003c
   0F0E E5            [11] 1992 	push	hl
   0F0F 2E 02         [ 7] 1993 	ld	l, #0x02
   0F11 E5            [11] 1994 	push	hl
   0F12 21r9Dr00      [10] 1995 	ld	hl, #_nagleonResponse
   0F15 E5            [11] 1996 	push	hl
   0F16 CDrC8r07      [17] 1997 	call	_WaitForRXData
   0F19 F1            [10] 1998 	pop	af
   0F1A F1            [10] 1999 	pop	af
   0F1B F1            [10] 2000 	pop	af
   0F1C F1            [10] 2001 	pop	af
   0F1D DD 75 FD      [19] 2002 	ld	-3 (ix), l
   0F20 18 42         [12] 2003 	jr	00136$
   0F22                    2004 00129$:
                           2005 ;src\CFG8266.c:465: else if (ucRadioOff)
   0F22 3Ar11r02      [13] 2006 	ld	a,(#_ucRadioOff + 0)
   0F25 B7            [ 4] 2007 	or	a, a
   0F26 28 1C         [12] 2008 	jr	Z,00126$
                           2009 ;src\CFG8266.c:466: bResponse = WaitForRXData(radioOffResponse,2,60,true,false);
   0F28 AF            [ 4] 2010 	xor	a, a
   0F29 57            [ 4] 2011 	ld	d,a
   0F2A 1E 01         [ 7] 2012 	ld	e,#0x01
   0F2C D5            [11] 2013 	push	de
   0F2D 21 3C 00      [10] 2014 	ld	hl, #0x003c
   0F30 E5            [11] 2015 	push	hl
   0F31 2E 02         [ 7] 2016 	ld	l, #0x02
   0F33 E5            [11] 2017 	push	hl
   0F34 21rB1r00      [10] 2018 	ld	hl, #_radioOffResponse
   0F37 E5            [11] 2019 	push	hl
   0F38 CDrC8r07      [17] 2020 	call	_WaitForRXData
   0F3B F1            [10] 2021 	pop	af
   0F3C F1            [10] 2022 	pop	af
   0F3D F1            [10] 2023 	pop	af
   0F3E F1            [10] 2024 	pop	af
   0F3F DD 75 FD      [19] 2025 	ld	-3 (ix), l
   0F42 18 20         [12] 2026 	jr	00136$
   0F44                    2027 00126$:
                           2028 ;src\CFG8266.c:467: else if (ucSetTimeout)
   0F44 3Ar12r02      [13] 2029 	ld	a,(#_ucSetTimeout + 0)
   0F47 B7            [ 4] 2030 	or	a, a
   0F48 28 1A         [12] 2031 	jr	Z,00136$
                           2032 ;src\CFG8266.c:468: bResponse = WaitForRXData(responseRadioOnTimeout,2,60,true,false);
   0F4A AF            [ 4] 2033 	xor	a, a
   0F4B 57            [ 4] 2034 	ld	d,a
   0F4C 1E 01         [ 7] 2035 	ld	e,#0x01
   0F4E D5            [11] 2036 	push	de
   0F4F 21 3C 00      [10] 2037 	ld	hl, #0x003c
   0F52 E5            [11] 2038 	push	hl
   0F53 2E 02         [ 7] 2039 	ld	l, #0x02
   0F55 E5            [11] 2040 	push	hl
   0F56 21rAFr00      [10] 2041 	ld	hl, #_responseRadioOnTimeout
   0F59 E5            [11] 2042 	push	hl
   0F5A CDrC8r07      [17] 2043 	call	_WaitForRXData
   0F5D F1            [10] 2044 	pop	af
   0F5E F1            [10] 2045 	pop	af
   0F5F F1            [10] 2046 	pop	af
   0F60 F1            [10] 2047 	pop	af
   0F61 DD 75 FD      [19] 2048 	ld	-3 (ix), l
   0F64                    2049 00136$:
                           2050 ;src\CFG8266.c:471: if ((bResponse)&&(ucScan))
   0F64 DD 7E FD      [19] 2051 	ld	a, -3 (ix)
   0F67 B7            [ 4] 2052 	or	a, a
   0F68 CAr55r12      [10] 2053 	jp	Z, 00215$
   0F6B FD 21r00r00   [14] 2054 	ld	iy, #_ucScan
   0F6F FD 7E 00      [19] 2055 	ld	a, 0 (iy)
   0F72 B7            [ 4] 2056 	or	a, a
   0F73 CAr55r12      [10] 2057 	jp	Z, 00215$
                           2058 ;src\CFG8266.c:474: do
   0F76 0E 0A         [ 7] 2059 	ld	c, #0x0a
   0F78                    2060 00139$:
                           2061 ;src\CFG8266.c:476: --ucRetries;
   0F78 0D            [ 4] 2062 	dec	c
                           2063 ;src\CFG8266.c:477: for (ucHalt = 60;ucHalt>0;--ucHalt)
   0F79 06 3C         [ 7] 2064 	ld	b, #0x3c
   0F7B                    2065 00297$:
                           2066 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0F7B 76            [ 4] 2067 	halt
                           2068 ;src\CFG8266.c:477: for (ucHalt = 60;ucHalt>0;--ucHalt)
   0F7C 78            [ 4] 2069 	ld	a, b
   0F7D 3D            [ 4] 2070 	dec	a
   0F7E 47            [ 4] 2071 	ld	b, a
   0F7F B7            [ 4] 2072 	or	a, a
   0F80 20 F9         [12] 2073 	jr	NZ,00297$
                           2074 ;src\CFG8266.c:479: TxByte('s'); //Request SCAN result
   0F82 C5            [11] 2075 	push	bc
   0F83 3E 73         [ 7] 2076 	ld	a, #0x73
   0F85 F5            [11] 2077 	push	af
   0F86 33            [ 6] 2078 	inc	sp
   0F87 CDr0Dr06      [17] 2079 	call	_TxByte
   0F8A 33            [ 6] 2080 	inc	sp
   0F8B AF            [ 4] 2081 	xor	a, a
   0F8C F5            [11] 2082 	push	af
   0F8D 33            [ 6] 2083 	inc	sp
   0F8E AF            [ 4] 2084 	xor	a, a
   0F8F F5            [11] 2085 	push	af
   0F90 33            [ 6] 2086 	inc	sp
   0F91 21 3C 00      [10] 2087 	ld	hl, #0x003c
   0F94 E5            [11] 2088 	push	hl
   0F95 2E 02         [ 7] 2089 	ld	l, #0x02
   0F97 E5            [11] 2090 	push	hl
   0F98 21rA1r00      [10] 2091 	ld	hl, #_scanresResponse
   0F9B E5            [11] 2092 	push	hl
   0F9C CDrC8r07      [17] 2093 	call	_WaitForRXData
   0F9F F1            [10] 2094 	pop	af
   0FA0 F1            [10] 2095 	pop	af
   0FA1 F1            [10] 2096 	pop	af
   0FA2 F1            [10] 2097 	pop	af
   0FA3 C1            [10] 2098 	pop	bc
                           2099 ;src\CFG8266.c:482: while ((ucRetries)&&(!bResponse));
   0FA4 79            [ 4] 2100 	ld	a, c
   0FA5 B7            [ 4] 2101 	or	a, a
   0FA6 28 04         [12] 2102 	jr	Z,00141$
   0FA8 7D            [ 4] 2103 	ld	a, l
   0FA9 B7            [ 4] 2104 	or	a, a
   0FAA 28 CC         [12] 2105 	jr	Z,00139$
   0FAC                    2106 00141$:
                           2107 ;src\CFG8266.c:484: if (bResponse)
   0FAC 7D            [ 4] 2108 	ld	a, l
   0FAD B7            [ 4] 2109 	or	a, a
   0FAE CAr4Ar12      [10] 2110 	jp	Z, 00189$
                           2111 ;src\CFG8266.c:487: while(!UartRXData());
   0FB1                    2112 00142$:
   0FB1 DB 07         [11] 2113 	in	a, (_myPort7)
   0FB3 D6 01         [ 7] 2114 	sub	a,#0x01
   0FB5 3E 00         [ 7] 2115 	ld	a, #0x00
   0FB7 17            [ 4] 2116 	rla
   0FB8 CB 47         [ 8] 2117 	bit	0, a
   0FBA 20 F5         [12] 2118 	jr	NZ,00142$
                           2119 ;src\CFG8266.c:488: ucAPs = GetUARTData();
   0FBC DB 06         [11] 2120 	in	a, (_myPort6)
   0FBE DD 77 F8      [19] 2121 	ld	-8 (ix), a
                           2122 ;src\CFG8266.c:489: if (ucAPs>10)
   0FC1 3E 0A         [ 7] 2123 	ld	a, #0x0a
   0FC3 DD 96 F8      [19] 2124 	sub	a, -8 (ix)
   0FC6 30 04         [12] 2125 	jr	NC,00146$
                           2126 ;src\CFG8266.c:490: ucAPs=10;
   0FC8 DD 36 F8 0A   [19] 2127 	ld	-8 (ix), #0x0a
   0FCC                    2128 00146$:
                           2129 ;src\CFG8266.c:492: printf ("\r\n");
   0FCC 21rC6r1A      [10] 2130 	ld	hl, #___str_35
   0FCF E5            [11] 2131 	push	hl
   0FD0 CDr00r00      [17] 2132 	call	_puts
   0FD3 F1            [10] 2133 	pop	af
                           2134 ;src\CFG8266.c:493: do
   0FD4 21 51 00      [10] 2135 	ld	hl, #81
   0FD7 39            [11] 2136 	add	hl, sp
   0FD8 DD 75 F9      [19] 2137 	ld	-7 (ix), l
   0FDB DD 74 FA      [19] 2138 	ld	-6 (ix), h
   0FDE AF            [ 4] 2139 	xor	a, a
   0FDF DD 77 FF      [19] 2140 	ld	-1 (ix), a
                           2141 ;src\CFG8266.c:498: while(!UartRXData());
   0FE2                    2142 00337$:
   0FE2 DD 4E FF      [19] 2143 	ld	c, -1 (ix)
   0FE5 06 00         [ 7] 2144 	ld	b, #0x00
   0FE7 69            [ 4] 2145 	ld	l, c
   0FE8 60            [ 4] 2146 	ld	h, b
   0FE9 29            [11] 2147 	add	hl, hl
   0FEA 29            [11] 2148 	add	hl, hl
   0FEB 29            [11] 2149 	add	hl, hl
   0FEC 29            [11] 2150 	add	hl, hl
   0FED 09            [11] 2151 	add	hl, bc
   0FEE 29            [11] 2152 	add	hl, hl
   0FEF EB            [ 4] 2153 	ex	de, hl
   0FF0 7B            [ 4] 2154 	ld	a, e
   0FF1 DD 86 F9      [19] 2155 	add	a, -7 (ix)
   0FF4 4F            [ 4] 2156 	ld	c, a
   0FF5 7A            [ 4] 2157 	ld	a, d
   0FF6 DD 8E FA      [19] 2158 	adc	a, -6 (ix)
   0FF9 47            [ 4] 2159 	ld	b, a
   0FFA 1E 00         [ 7] 2160 	ld	e, #0x00
   0FFC                    2161 00147$:
   0FFC DB 07         [11] 2162 	in	a, (_myPort7)
   0FFE D6 01         [ 7] 2163 	sub	a,#0x01
   1000 3E 00         [ 7] 2164 	ld	a, #0x00
   1002 17            [ 4] 2165 	rla
   1003 CB 47         [ 8] 2166 	bit	0, a
   1005 20 F5         [12] 2167 	jr	NZ,00147$
                           2168 ;src\CFG8266.c:499: rx_data=GetUARTData();
   1007 DB 06         [11] 2169 	in	a, (_myPort6)
   1009 DD 77 FE      [19] 2170 	ld	-2 (ix), a
                           2171 ;src\CFG8266.c:500: stAP[tx_data].APName[ucIndex++]=rx_data;
   100C 7B            [ 4] 2172 	ld	a, e
   100D 1C            [ 4] 2173 	inc	e
   100E 6F            [ 4] 2174 	ld	l, a
   100F 26 00         [ 7] 2175 	ld	h, #0x00
   1011 09            [11] 2176 	add	hl, bc
   1012 DD 7E FE      [19] 2177 	ld	a, -2 (ix)
   1015 77            [ 7] 2178 	ld	(hl), a
                           2179 ;src\CFG8266.c:502: while(rx_data!=0);
   1016 DD 7E FE      [19] 2180 	ld	a, -2 (ix)
   1019 B7            [ 4] 2181 	or	a, a
   101A 20 E0         [12] 2182 	jr	NZ,00147$
                           2183 ;src\CFG8266.c:503: while(!UartRXData());
   101C                    2184 00153$:
   101C DB 07         [11] 2185 	in	a, (_myPort7)
   101E D6 01         [ 7] 2186 	sub	a,#0x01
   1020 3E 00         [ 7] 2187 	ld	a, #0x00
   1022 17            [ 4] 2188 	rla
   1023 CB 47         [ 8] 2189 	bit	0, a
   1025 20 F5         [12] 2190 	jr	NZ,00153$
                           2191 ;src\CFG8266.c:504: rx_data=GetUARTData();
   1027 DB 06         [11] 2192 	in	a, (_myPort6)
   1029 4F            [ 4] 2193 	ld	c, a
                           2194 ;src\CFG8266.c:505: stAP[tx_data].isEncrypted = (rx_data == 'E') ? 1 : 0;
   102A DD 5E FF      [19] 2195 	ld	e, -1 (ix)
   102D 16 00         [ 7] 2196 	ld	d, #0x00
   102F 6B            [ 4] 2197 	ld	l, e
   1030 62            [ 4] 2198 	ld	h, d
   1031 29            [11] 2199 	add	hl, hl
   1032 29            [11] 2200 	add	hl, hl
   1033 29            [11] 2201 	add	hl, hl
   1034 29            [11] 2202 	add	hl, hl
   1035 19            [11] 2203 	add	hl, de
   1036 29            [11] 2204 	add	hl, hl
   1037 EB            [ 4] 2205 	ex	de, hl
   1038 DD 7E F9      [19] 2206 	ld	a, -7 (ix)
   103B 83            [ 4] 2207 	add	a, e
   103C 5F            [ 4] 2208 	ld	e, a
   103D DD 7E FA      [19] 2209 	ld	a, -6 (ix)
   1040 8A            [ 4] 2210 	adc	a, d
   1041 57            [ 4] 2211 	ld	d, a
   1042 21 21 00      [10] 2212 	ld	hl, #0x0021
   1045 19            [11] 2213 	add	hl, de
   1046 DD 75 FB      [19] 2214 	ld	-5 (ix), l
   1049 DD 74 FC      [19] 2215 	ld	-4 (ix), h
   104C 79            [ 4] 2216 	ld	a, c
   104D D6 45         [ 7] 2217 	sub	a, #0x45
   104F 20 0A         [12] 2218 	jr	NZ,00308$
   1051 DD 36 FD 01   [19] 2219 	ld	-3 (ix), #0x01
   1055 AF            [ 4] 2220 	xor	a, a
   1056 DD 77 FE      [19] 2221 	ld	-2 (ix), a
   1059 18 07         [12] 2222 	jr	00309$
   105B                    2223 00308$:
   105B AF            [ 4] 2224 	xor	a, a
   105C DD 77 FD      [19] 2225 	ld	-3 (ix), a
   105F DD 77 FE      [19] 2226 	ld	-2 (ix), a
   1062                    2227 00309$:
   1062 DD 7E FD      [19] 2228 	ld	a, -3 (ix)
   1065 DD 6E FB      [19] 2229 	ld	l, -5 (ix)
   1068 DD 66 FC      [19] 2230 	ld	h, -4 (ix)
   106B 77            [ 7] 2231 	ld	(hl), a
                           2232 ;src\CFG8266.c:506: ++tx_data;
   106C DD 34 FF      [23] 2233 	inc	-1 (ix)
                           2234 ;src\CFG8266.c:508: while (tx_data!=ucAPs);
   106F DD 7E FF      [19] 2235 	ld	a, -1 (ix)
   1072 DD 96 F8      [19] 2236 	sub	a, -8 (ix)
   1075 C2rE2r0F      [10] 2237 	jp	NZ,00337$
                           2238 ;src\CFG8266.c:509: ClearUartData();
   1078 3E 14         [ 7] 2239 	ld	a, #0x14
   107A D3 06         [11] 2240 	out	(_myPort6), a
                           2241 ;src\CFG8266.c:510: printf("Choose AP:\r\n\n");
   107C 21rC8r1A      [10] 2242 	ld	hl, #___str_37
   107F E5            [11] 2243 	push	hl
   1080 CDr00r00      [17] 2244 	call	_puts
   1083 F1            [10] 2245 	pop	af
                           2246 ;src\CFG8266.c:511: for (ucIndex=0;ucIndex<ucAPs;ucIndex++)
   1084 AF            [ 4] 2247 	xor	a, a
   1085 DD 77 FF      [19] 2248 	ld	-1 (ix), a
   1088                    2249 00300$:
   1088 DD 7E FF      [19] 2250 	ld	a, -1 (ix)
   108B DD 96 F8      [19] 2251 	sub	a, -8 (ix)
   108E 30 49         [12] 2252 	jr	NC,00162$
                           2253 ;src\CFG8266.c:513: printf("%u - %s",ucIndex,stAP[ucIndex].APName);
   1090 DD 4E FF      [19] 2254 	ld	c, -1 (ix)
   1093 06 00         [ 7] 2255 	ld	b, #0x00
   1095 69            [ 4] 2256 	ld	l, c
   1096 60            [ 4] 2257 	ld	h, b
   1097 29            [11] 2258 	add	hl, hl
   1098 29            [11] 2259 	add	hl, hl
   1099 29            [11] 2260 	add	hl, hl
   109A 29            [11] 2261 	add	hl, hl
   109B 09            [11] 2262 	add	hl, bc
   109C 29            [11] 2263 	add	hl, hl
   109D EB            [ 4] 2264 	ex	de, hl
   109E DD 6E F9      [19] 2265 	ld	l, -7 (ix)
   10A1 DD 66 FA      [19] 2266 	ld	h, -6 (ix)
   10A4 19            [11] 2267 	add	hl, de
   10A5 5D            [ 4] 2268 	ld	e, l
   10A6 54            [ 4] 2269 	ld	d, h
   10A7 DD 4E FF      [19] 2270 	ld	c, -1 (ix)
   10AA 06 00         [ 7] 2271 	ld	b, #0x00
   10AC E5            [11] 2272 	push	hl
   10AD D5            [11] 2273 	push	de
   10AE C5            [11] 2274 	push	bc
   10AF 01rD5r1A      [10] 2275 	ld	bc, #___str_38
   10B2 C5            [11] 2276 	push	bc
   10B3 CDr00r00      [17] 2277 	call	_printf
   10B6 F1            [10] 2278 	pop	af
   10B7 F1            [10] 2279 	pop	af
   10B8 F1            [10] 2280 	pop	af
   10B9 E1            [10] 2281 	pop	hl
                           2282 ;src\CFG8266.c:514: if (stAP[ucIndex].isEncrypted)
   10BA 11 21 00      [10] 2283 	ld	de, #0x0021
   10BD 19            [11] 2284 	add	hl, de
   10BE 7E            [ 7] 2285 	ld	a, (hl)
   10BF B7            [ 4] 2286 	or	a, a
   10C0 28 0A         [12] 2287 	jr	Z,00160$
                           2288 ;src\CFG8266.c:515: printf(" (PWD)\r\n");
   10C2 21rDDr1A      [10] 2289 	ld	hl, #___str_40
   10C5 E5            [11] 2290 	push	hl
   10C6 CDr00r00      [17] 2291 	call	_puts
   10C9 F1            [10] 2292 	pop	af
   10CA 18 08         [12] 2293 	jr	00301$
   10CC                    2294 00160$:
                           2295 ;src\CFG8266.c:517: printf(" (OPEN)\r\n");
   10CC 21rE5r1A      [10] 2296 	ld	hl, #___str_42
   10CF E5            [11] 2297 	push	hl
   10D0 CDr00r00      [17] 2298 	call	_puts
   10D3 F1            [10] 2299 	pop	af
   10D4                    2300 00301$:
                           2301 ;src\CFG8266.c:511: for (ucIndex=0;ucIndex<ucAPs;ucIndex++)
   10D4 DD 34 FF      [23] 2302 	inc	-1 (ix)
   10D7 18 AF         [12] 2303 	jr	00300$
   10D9                    2304 00162$:
                           2305 ;src\CFG8266.c:519: printf("\r\nWhich one to connect? (ESC exit)");
   10D9 21rEEr1A      [10] 2306 	ld	hl, #___str_43
   10DC E5            [11] 2307 	push	hl
   10DD CDr00r00      [17] 2308 	call	_printf
   10E0 F1            [10] 2309 	pop	af
                           2310 ;src\CFG8266.c:521: do
   10E1                    2311 00166$:
                           2312 ;src\CFG8266.c:523: tx_data = Inkey ();
   10E1 CDr00r00      [17] 2313 	call	_Inkey
                           2314 ;src\CFG8266.c:524: if (tx_data==0x1b)
   10E4 7D            [ 4] 2315 	ld	a, l
   10E5 D6 1B         [ 7] 2316 	sub	a, #0x1b
   10E7 3E 01         [ 7] 2317 	ld	a, #0x01
   10E9 28 01         [12] 2318 	jr	Z,00734$
   10EB AF            [ 4] 2319 	xor	a, a
   10EC                    2320 00734$:
   10EC 4F            [ 4] 2321 	ld	c, a
   10ED B7            [ 4] 2322 	or	a, a
   10EE 20 0A         [12] 2323 	jr	NZ,00168$
                           2324 ;src\CFG8266.c:527: while ((tx_data<'0')||(tx_data>'9'));
   10F0 7D            [ 4] 2325 	ld	a, l
   10F1 D6 30         [ 7] 2326 	sub	a, #0x30
   10F3 38 EC         [12] 2327 	jr	C,00166$
   10F5 3E 39         [ 7] 2328 	ld	a, #0x39
   10F7 95            [ 4] 2329 	sub	a, l
   10F8 38 E7         [12] 2330 	jr	C,00166$
   10FA                    2331 00168$:
                           2332 ;src\CFG8266.c:528: if (tx_data!=0x1b)
   10FA CB 41         [ 8] 2333 	bit	0, c
   10FC C2r3Fr12      [10] 2334 	jp	NZ, 00186$
                           2335 ;src\CFG8266.c:530: printf(" %c\r\n",tx_data);
   10FF 5D            [ 4] 2336 	ld	e, l
   1100 16 00         [ 7] 2337 	ld	d, #0x00
   1102 01r11r1B      [10] 2338 	ld	bc, #___str_44+0
   1105 E5            [11] 2339 	push	hl
   1106 D5            [11] 2340 	push	de
   1107 C5            [11] 2341 	push	bc
   1108 CDr00r00      [17] 2342 	call	_printf
   110B F1            [10] 2343 	pop	af
   110C F1            [10] 2344 	pop	af
   110D E1            [10] 2345 	pop	hl
                           2346 ;src\CFG8266.c:531: ucIndex = tx_data-'0';
   110E 7D            [ 4] 2347 	ld	a, l
   110F C6 D0         [ 7] 2348 	add	a, #0xd0
                           2349 ;src\CFG8266.c:532: if (stAP[ucIndex].isEncrypted)
   1111 4F            [ 4] 2350 	ld	c, a
   1112 06 00         [ 7] 2351 	ld	b, #0x00
   1114 69            [ 4] 2352 	ld	l, c
   1115 60            [ 4] 2353 	ld	h, b
   1116 29            [11] 2354 	add	hl, hl
   1117 29            [11] 2355 	add	hl, hl
   1118 29            [11] 2356 	add	hl, hl
   1119 29            [11] 2357 	add	hl, hl
   111A 09            [11] 2358 	add	hl, bc
   111B 29            [11] 2359 	add	hl, hl
   111C DD 75 FB      [19] 2360 	ld	-5 (ix), l
   111F DD 74 FC      [19] 2361 	ld	-4 (ix), h
   1122 DD 7E F9      [19] 2362 	ld	a, -7 (ix)
   1125 DD 86 FB      [19] 2363 	add	a, -5 (ix)
   1128 4F            [ 4] 2364 	ld	c, a
   1129 DD 7E FA      [19] 2365 	ld	a, -6 (ix)
   112C DD 8E FC      [19] 2366 	adc	a, -4 (ix)
   112F 47            [ 4] 2367 	ld	b, a
   1130 21 21 00      [10] 2368 	ld	hl, #0x0021
   1133 09            [11] 2369 	add	hl, bc
   1134 EB            [ 4] 2370 	ex	de, hl
   1135 1A            [ 7] 2371 	ld	a, (de)
   1136 B7            [ 4] 2372 	or	a, a
   1137 28 31         [12] 2373 	jr	Z,00170$
                           2374 ;src\CFG8266.c:535: printf("Password? ");
   1139 C5            [11] 2375 	push	bc
   113A D5            [11] 2376 	push	de
   113B 21r17r1B      [10] 2377 	ld	hl, #___str_45
   113E E5            [11] 2378 	push	hl
   113F CDr00r00      [17] 2379 	call	_printf
   1142 F1            [10] 2380 	pop	af
   1143 D1            [10] 2381 	pop	de
   1144 C1            [10] 2382 	pop	bc
                           2383 ;src\CFG8266.c:536: InputString(ucPWD,64);
   1145 21 10 00      [10] 2384 	ld	hl, #16
   1148 39            [11] 2385 	add	hl, sp
   1149 DD 75 FE      [19] 2386 	ld	-2 (ix), l
   114C DD 74 FF      [19] 2387 	ld	-1 (ix), h
   114F C5            [11] 2388 	push	bc
   1150 D5            [11] 2389 	push	de
   1151 21 40 00      [10] 2390 	ld	hl, #0x0040
   1154 E5            [11] 2391 	push	hl
   1155 DD 6E FE      [19] 2392 	ld	l, -2 (ix)
   1158 DD 66 FF      [19] 2393 	ld	h, -1 (ix)
   115B E5            [11] 2394 	push	hl
   115C CDr00r00      [17] 2395 	call	_InputString
   115F F1            [10] 2396 	pop	af
   1160 21rC6r1A      [10] 2397 	ld	hl, #___str_35
   1163 E3            [19] 2398 	ex	(sp),hl
   1164 CDr00r00      [17] 2399 	call	_puts
   1167 F1            [10] 2400 	pop	af
   1168 D1            [10] 2401 	pop	de
   1169 C1            [10] 2402 	pop	bc
   116A                    2403 00170$:
                           2404 ;src\CFG8266.c:539: uiCMDLen = strlen(stAP[ucIndex].APName) + 1;
   116A C5            [11] 2405 	push	bc
   116B CDr00r00      [17] 2406 	call	_strlen
   116E F1            [10] 2407 	pop	af
   116F 23            [ 6] 2408 	inc	hl
   1170 4D            [ 4] 2409 	ld	c,l
   1171 44            [ 4] 2410 	ld	b,h
                           2411 ;src\CFG8266.c:540: if (stAP[ucIndex].isEncrypted)
   1172 1A            [ 7] 2412 	ld	a, (de)
   1173 B7            [ 4] 2413 	or	a, a
   1174 28 0E         [12] 2414 	jr	Z,00172$
                           2415 ;src\CFG8266.c:541: uiCMDLen += strlen(ucPWD);
   1176 21 10 00      [10] 2416 	ld	hl, #16
   1179 39            [11] 2417 	add	hl, sp
   117A C5            [11] 2418 	push	bc
   117B E5            [11] 2419 	push	hl
   117C CDr00r00      [17] 2420 	call	_strlen
   117F F1            [10] 2421 	pop	af
   1180 C1            [10] 2422 	pop	bc
   1181 09            [11] 2423 	add	hl, bc
   1182 4D            [ 4] 2424 	ld	c, l
   1183 44            [ 4] 2425 	ld	b, h
   1184                    2426 00172$:
                           2427 ;src\CFG8266.c:542: TxByte('A'); //Request connect AP
   1184 C5            [11] 2428 	push	bc
   1185 3E 41         [ 7] 2429 	ld	a, #0x41
   1187 F5            [11] 2430 	push	af
   1188 33            [ 6] 2431 	inc	sp
   1189 CDr0Dr06      [17] 2432 	call	_TxByte
   118C 33            [ 6] 2433 	inc	sp
   118D C1            [10] 2434 	pop	bc
                           2435 ;src\CFG8266.c:543: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   118E 50            [ 4] 2436 	ld	d, b
   118F 1E 00         [ 7] 2437 	ld	e, #0x00
   1191 C5            [11] 2438 	push	bc
   1192 D5            [11] 2439 	push	de
   1193 33            [ 6] 2440 	inc	sp
   1194 CDr0Dr06      [17] 2441 	call	_TxByte
   1197 33            [ 6] 2442 	inc	sp
   1198 C1            [10] 2443 	pop	bc
                           2444 ;src\CFG8266.c:544: TxByte((unsigned char)(uiCMDLen&0xff));
   1199 79            [ 4] 2445 	ld	a, c
   119A C5            [11] 2446 	push	bc
   119B F5            [11] 2447 	push	af
   119C 33            [ 6] 2448 	inc	sp
   119D CDr0Dr06      [17] 2449 	call	_TxByte
   11A0 33            [ 6] 2450 	inc	sp
   11A1 C1            [10] 2451 	pop	bc
                           2452 ;src\CFG8266.c:546: do
   11A2 DD 7E F9      [19] 2453 	ld	a, -7 (ix)
   11A5 DD 86 FB      [19] 2454 	add	a, -5 (ix)
   11A8 DD 77 FD      [19] 2455 	ld	-3 (ix), a
   11AB DD 7E FA      [19] 2456 	ld	a, -6 (ix)
   11AE DD 8E FC      [19] 2457 	adc	a, -4 (ix)
   11B1 DD 77 FE      [19] 2458 	ld	-2 (ix), a
   11B4 AF            [ 4] 2459 	xor	a, a
   11B5 DD 77 FF      [19] 2460 	ld	-1 (ix), a
   11B8                    2461 00174$:
                           2462 ;src\CFG8266.c:548: tx_data = stAP[ucIndex].APName[rx_data];
   11B8 DD 7E FD      [19] 2463 	ld	a, -3 (ix)
   11BB DD 86 FF      [19] 2464 	add	a, -1 (ix)
   11BE 5F            [ 4] 2465 	ld	e, a
   11BF DD 7E FE      [19] 2466 	ld	a, -2 (ix)
   11C2 CE 00         [ 7] 2467 	adc	a, #0x00
   11C4 6B            [ 4] 2468 	ld	l, e
   11C5 67            [ 4] 2469 	ld	h, a
   11C6 56            [ 7] 2470 	ld	d, (hl)
                           2471 ;src\CFG8266.c:549: TxByte(tx_data);
   11C7 C5            [11] 2472 	push	bc
   11C8 D5            [11] 2473 	push	de
   11C9 D5            [11] 2474 	push	de
   11CA 33            [ 6] 2475 	inc	sp
   11CB CDr0Dr06      [17] 2476 	call	_TxByte
   11CE 33            [ 6] 2477 	inc	sp
   11CF D1            [10] 2478 	pop	de
   11D0 C1            [10] 2479 	pop	bc
                           2480 ;src\CFG8266.c:550: --uiCMDLen;
   11D1 0B            [ 6] 2481 	dec	bc
                           2482 ;src\CFG8266.c:551: ++rx_data;
   11D2 DD 34 FF      [23] 2483 	inc	-1 (ix)
                           2484 ;src\CFG8266.c:553: while((uiCMDLen)&&(tx_data!=0));
   11D5 78            [ 4] 2485 	ld	a, b
   11D6 B1            [ 4] 2486 	or	a, c
   11D7 28 04         [12] 2487 	jr	Z,00176$
   11D9 7A            [ 4] 2488 	ld	a, d
   11DA B7            [ 4] 2489 	or	a, a
   11DB 20 DB         [12] 2490 	jr	NZ,00174$
   11DD                    2491 00176$:
                           2492 ;src\CFG8266.c:554: if(uiCMDLen)
   11DD 78            [ 4] 2493 	ld	a, b
   11DE B1            [ 4] 2494 	or	a, c
   11DF 28 2C         [12] 2495 	jr	Z,00181$
                           2496 ;src\CFG8266.c:557: do
   11E1 21 10 00      [10] 2497 	ld	hl, #16
   11E4 39            [11] 2498 	add	hl, sp
   11E5 DD 75 FD      [19] 2499 	ld	-3 (ix), l
   11E8 DD 74 FE      [19] 2500 	ld	-2 (ix), h
   11EB AF            [ 4] 2501 	xor	a, a
   11EC DD 77 FF      [19] 2502 	ld	-1 (ix), a
   11EF                    2503 00177$:
                           2504 ;src\CFG8266.c:559: tx_data = ucPWD[rx_data];
   11EF DD 7E FD      [19] 2505 	ld	a, -3 (ix)
   11F2 DD 86 FF      [19] 2506 	add	a, -1 (ix)
   11F5 5F            [ 4] 2507 	ld	e, a
   11F6 DD 7E FE      [19] 2508 	ld	a, -2 (ix)
   11F9 CE 00         [ 7] 2509 	adc	a, #0x00
   11FB 57            [ 4] 2510 	ld	d, a
   11FC 1A            [ 7] 2511 	ld	a, (de)
                           2512 ;src\CFG8266.c:560: TxByte(tx_data);
   11FD C5            [11] 2513 	push	bc
   11FE F5            [11] 2514 	push	af
   11FF 33            [ 6] 2515 	inc	sp
   1200 CDr0Dr06      [17] 2516 	call	_TxByte
   1203 33            [ 6] 2517 	inc	sp
   1204 C1            [10] 2518 	pop	bc
                           2519 ;src\CFG8266.c:561: --uiCMDLen;
   1205 0B            [ 6] 2520 	dec	bc
                           2521 ;src\CFG8266.c:562: ++rx_data;
   1206 DD 34 FF      [23] 2522 	inc	-1 (ix)
                           2523 ;src\CFG8266.c:564: while(uiCMDLen);
   1209 78            [ 4] 2524 	ld	a, b
   120A B1            [ 4] 2525 	or	a, c
   120B 20 E2         [12] 2526 	jr	NZ,00177$
   120D                    2527 00181$:
                           2528 ;src\CFG8266.c:568: bResponse = WaitForRXData(apconfigurationResponse,2,300,true,false); //Wait up to 5s
   120D AF            [ 4] 2529 	xor	a, a
   120E 57            [ 4] 2530 	ld	d,a
   120F 1E 01         [ 7] 2531 	ld	e,#0x01
   1211 D5            [11] 2532 	push	de
   1212 21 2C 01      [10] 2533 	ld	hl, #0x012c
   1215 E5            [11] 2534 	push	hl
   1216 21 02 00      [10] 2535 	ld	hl, #0x0002
   1219 E5            [11] 2536 	push	hl
   121A 21rA3r00      [10] 2537 	ld	hl, #_apconfigurationResponse
   121D E5            [11] 2538 	push	hl
   121E CDrC8r07      [17] 2539 	call	_WaitForRXData
   1221 F1            [10] 2540 	pop	af
   1222 F1            [10] 2541 	pop	af
   1223 F1            [10] 2542 	pop	af
   1224 F1            [10] 2543 	pop	af
   1225 7D            [ 4] 2544 	ld	a, l
                           2545 ;src\CFG8266.c:569: if (bResponse)
   1226 B7            [ 4] 2546 	or	a, a
   1227 28 0B         [12] 2547 	jr	Z,00183$
                           2548 ;src\CFG8266.c:570: printf("Success, AP configured to be used.\r\n");
   1229 21r22r1B      [10] 2549 	ld	hl, #___str_48
   122C E5            [11] 2550 	push	hl
   122D CDr00r00      [17] 2551 	call	_puts
   1230 F1            [10] 2552 	pop	af
   1231 C3rFDr19      [10] 2553 	jp	00294$
   1234                    2554 00183$:
                           2555 ;src\CFG8266.c:572: printf("Error, AP not configured!\r\n");
   1234 21r46r1B      [10] 2556 	ld	hl, #___str_50
   1237 E5            [11] 2557 	push	hl
   1238 CDr00r00      [17] 2558 	call	_puts
   123B F1            [10] 2559 	pop	af
   123C C3rFDr19      [10] 2560 	jp	00294$
   123F                    2561 00186$:
                           2562 ;src\CFG8266.c:575: printf("\r\nUser canceled by ESC key...\r\n");
   123F 21r61r1B      [10] 2563 	ld	hl, #___str_52
   1242 E5            [11] 2564 	push	hl
   1243 CDr00r00      [17] 2565 	call	_puts
   1246 F1            [10] 2566 	pop	af
   1247 C3rFDr19      [10] 2567 	jp	00294$
   124A                    2568 00189$:
                           2569 ;src\CFG8266.c:578: printf("\r\nScan results: no answer...\r\n");
   124A 21r80r1B      [10] 2570 	ld	hl, #___str_54
   124D E5            [11] 2571 	push	hl
   124E CDr00r00      [17] 2572 	call	_puts
   1251 F1            [10] 2573 	pop	af
   1252 C3rFDr19      [10] 2574 	jp	00294$
   1255                    2575 00215$:
                           2576 ;src\CFG8266.c:582: if (ucScan)
   1255 3Ar00r00      [13] 2577 	ld	a,(#_ucScan + 0)
   1258 B7            [ 4] 2578 	or	a, a
   1259 28 0B         [12] 2579 	jr	Z,00212$
                           2580 ;src\CFG8266.c:583: printf ("\rScan request: no answer...\n");
   125B 21r9Er1B      [10] 2581 	ld	hl, #___str_56
   125E E5            [11] 2582 	push	hl
   125F CDr00r00      [17] 2583 	call	_puts
   1262 F1            [10] 2584 	pop	af
   1263 C3rFDr19      [10] 2585 	jp	00294$
   1266                    2586 00212$:
                           2587 ;src\CFG8266.c:584: else if (((ucNagleOff)||(ucNagleOn))&&(bResponse))
   1266 3Ar0Fr02      [13] 2588 	ld	a,(#_ucNagleOff + 0)
   1269 B7            [ 4] 2589 	or	a, a
   126A 20 06         [12] 2590 	jr	NZ,00210$
   126C 3Ar10r02      [13] 2591 	ld	a,(#_ucNagleOn + 0)
   126F B7            [ 4] 2592 	or	a, a
   1270 28 14         [12] 2593 	jr	Z,00207$
   1272                    2594 00210$:
   1272 DD 7E FD      [19] 2595 	ld	a, -3 (ix)
   1275 B7            [ 4] 2596 	or	a, a
   1276 28 0E         [12] 2597 	jr	Z,00207$
                           2598 ;src\CFG8266.c:586: printf("\rNagle set as requested...\n");
   1278 21rBAr1B      [10] 2599 	ld	hl, #___str_58
   127B E5            [11] 2600 	push	hl
   127C CDr00r00      [17] 2601 	call	_puts
   127F F1            [10] 2602 	pop	af
                           2603 ;src\CFG8266.c:587: return 0;
   1280 21 00 00      [10] 2604 	ld	hl, #0x0000
   1283 C3r00r1A      [10] 2605 	jp	00304$
   1286                    2606 00207$:
                           2607 ;src\CFG8266.c:589: else if ((ucNagleOff)||(ucNagleOn))
   1286 3Ar0Fr02      [13] 2608 	ld	a,(#_ucNagleOff + 0)
   1289 B7            [ 4] 2609 	or	a, a
   128A 20 06         [12] 2610 	jr	NZ,00202$
   128C 3Ar10r02      [13] 2611 	ld	a,(#_ucNagleOn + 0)
   128F B7            [ 4] 2612 	or	a, a
   1290 28 0E         [12] 2613 	jr	Z,00203$
   1292                    2614 00202$:
                           2615 ;src\CFG8266.c:591: printf("\rNagle not set as requested, error!\n");
   1292 21rD5r1B      [10] 2616 	ld	hl, #___str_60
   1295 E5            [11] 2617 	push	hl
   1296 CDr00r00      [17] 2618 	call	_puts
   1299 F1            [10] 2619 	pop	af
                           2620 ;src\CFG8266.c:592: return 0;
   129A 21 00 00      [10] 2621 	ld	hl, #0x0000
   129D C3r00r1A      [10] 2622 	jp	00304$
   12A0                    2623 00203$:
                           2624 ;src\CFG8266.c:594: else if (ucRadioOff)
   12A0 3Ar11r02      [13] 2625 	ld	a,(#_ucRadioOff + 0)
   12A3 B7            [ 4] 2626 	or	a, a
   12A4 28 1E         [12] 2627 	jr	Z,00200$
                           2628 ;src\CFG8266.c:596: if (bResponse)
   12A6 DD 7E FD      [19] 2629 	ld	a, -3 (ix)
   12A9 B7            [ 4] 2630 	or	a, a
   12AA 28 0A         [12] 2631 	jr	Z,00192$
                           2632 ;src\CFG8266.c:597: printf("\rRequested to turn off WiFi Radio...\n");
   12AC 21rF9r1B      [10] 2633 	ld	hl, #___str_62
   12AF E5            [11] 2634 	push	hl
   12B0 CDr00r00      [17] 2635 	call	_puts
   12B3 F1            [10] 2636 	pop	af
   12B4 18 08         [12] 2637 	jr	00193$
   12B6                    2638 00192$:
                           2639 ;src\CFG8266.c:599: printf("\rRequest to turnoff WiFi Radio error!\n");
   12B6 21r1Er1C      [10] 2640 	ld	hl, #___str_64
   12B9 E5            [11] 2641 	push	hl
   12BA CDr00r00      [17] 2642 	call	_puts
   12BD F1            [10] 2643 	pop	af
   12BE                    2644 00193$:
                           2645 ;src\CFG8266.c:600: return 0;
   12BE 21 00 00      [10] 2646 	ld	hl, #0x0000
   12C1 C3r00r1A      [10] 2647 	jp	00304$
   12C4                    2648 00200$:
                           2649 ;src\CFG8266.c:602: else if (ucSetTimeout)
   12C4 3Ar12r02      [13] 2650 	ld	a,(#_ucSetTimeout + 0)
   12C7 B7            [ 4] 2651 	or	a, a
   12C8 CArFDr19      [10] 2652 	jp	Z, 00294$
                           2653 ;src\CFG8266.c:604: if (bResponse)
   12CB DD 7E FD      [19] 2654 	ld	a, -3 (ix)
   12CE B7            [ 4] 2655 	or	a, a
   12CF 28 0A         [12] 2656 	jr	Z,00195$
                           2657 ;src\CFG8266.c:605: printf("\rWiFi radio on Time-out set successfully...\n");
   12D1 21r44r1C      [10] 2658 	ld	hl, #___str_66
   12D4 E5            [11] 2659 	push	hl
   12D5 CDr00r00      [17] 2660 	call	_puts
   12D8 F1            [10] 2661 	pop	af
   12D9 18 08         [12] 2662 	jr	00196$
   12DB                    2663 00195$:
                           2664 ;src\CFG8266.c:607: printf("\rError setting WiFi radio on Time-out!\n");
   12DB 21r70r1C      [10] 2665 	ld	hl, #___str_68
   12DE E5            [11] 2666 	push	hl
   12DF CDr00r00      [17] 2667 	call	_puts
   12E2 F1            [10] 2668 	pop	af
   12E3                    2669 00196$:
                           2670 ;src\CFG8266.c:608: return 0;
   12E3 21 00 00      [10] 2671 	ld	hl, #0x0000
   12E6 C3r00r1A      [10] 2672 	jp	00304$
   12E9                    2673 00283$:
                           2674 ;src\CFG8266.c:612: else if (ucLocalUpdate)
   12E9 3Ar0Dr02      [13] 2675 	ld	a,(#_ucLocalUpdate + 0)
   12EC B7            [ 4] 2676 	or	a, a
   12ED CArABr18      [10] 2677 	jp	Z, 00280$
                           2678 ;src\CFG8266.c:615: iFile = Open (ucFile,O_RDONLY);
   12F0 21 00 00      [10] 2679 	ld	hl, #0x0000
   12F3 E5            [11] 2680 	push	hl
   12F4 21r01r01      [10] 2681 	ld	hl, #_ucFile
   12F7 E5            [11] 2682 	push	hl
   12F8 CDr00r00      [17] 2683 	call	_Open
   12FB F1            [10] 2684 	pop	af
   12FC F1            [10] 2685 	pop	af
   12FD DD 75 FE      [19] 2686 	ld	-2 (ix), l
   1300 DD 74 FF      [19] 2687 	ld	-1 (ix), h
                           2688 ;src\CFG8266.c:617: if (iFile!=-1)
   1303 DD 7E FE      [19] 2689 	ld	a, -2 (ix)
   1306 DD A6 FF      [19] 2690 	and	a, -1 (ix)
   1309 3C            [ 4] 2691 	inc	a
   130A CAr98r18      [10] 2692 	jp	Z,00253$
                           2693 ;src\CFG8266.c:624: regs.Words.HL = 0; //set pointer as 0
   130D 21 A9 01      [10] 2694 	ld	hl, #425
   1310 39            [11] 2695 	add	hl, sp
   1311 EB            [ 4] 2696 	ex	de, hl
   1312 21 06 00      [10] 2697 	ld	hl, #0x0006
   1315 19            [11] 2698 	add	hl, de
   1316 AF            [ 4] 2699 	xor	a, a
   1317 77            [ 7] 2700 	ld	(hl), a
   1318 23            [ 6] 2701 	inc	hl
   1319 77            [ 7] 2702 	ld	(hl), a
                           2703 ;src\CFG8266.c:625: regs.Words.DE = 0; //so it will return the position
   131A 13            [ 6] 2704 	inc	de
   131B 13            [ 6] 2705 	inc	de
   131C 13            [ 6] 2706 	inc	de
   131D 13            [ 6] 2707 	inc	de
   131E AF            [ 4] 2708 	xor	a, a
   131F 12            [ 7] 2709 	ld	(de), a
   1320 13            [ 6] 2710 	inc	de
   1321 12            [ 7] 2711 	ld	(de), a
                           2712 ;src\CFG8266.c:626: regs.Bytes.A = 2; //relative to the end of file, i.e.:file size
   1322 21 A9 01      [10] 2713 	ld	hl, #425
   1325 39            [11] 2714 	add	hl, sp
   1326 EB            [ 4] 2715 	ex	de, hl
   1327 6B            [ 4] 2716 	ld	l, e
   1328 62            [ 4] 2717 	ld	h, d
   1329 23            [ 6] 2718 	inc	hl
   132A 36 02         [10] 2719 	ld	(hl), #0x02
                           2720 ;src\CFG8266.c:627: regs.Bytes.B = (unsigned char)(iFile&0xff);
   132C 13            [ 6] 2721 	inc	de
   132D 13            [ 6] 2722 	inc	de
   132E 13            [ 6] 2723 	inc	de
   132F 7A            [ 4] 2724 	ld	a, d
   1330 DD 4E FE      [19] 2725 	ld	c, -2 (ix)
   1333 6B            [ 4] 2726 	ld	l, e
   1334 67            [ 4] 2727 	ld	h, a
   1335 71            [ 7] 2728 	ld	(hl), c
                           2729 ;src\CFG8266.c:628: DosCall(0x4A, &regs, REGS_ALL, REGS_ALL); // MOVE FILE HANDLER
   1336 21 A9 01      [10] 2730 	ld	hl, #425
   1339 39            [11] 2731 	add	hl, sp
   133A DD 75 FC      [19] 2732 	ld	-4 (ix), l
   133D DD 74 FD      [19] 2733 	ld	-3 (ix), h
   1340 4D            [ 4] 2734 	ld	c, l
   1341 44            [ 4] 2735 	ld	b, h
   1342 11 03 03      [10] 2736 	ld	de, #0x0303
   1345 D5            [11] 2737 	push	de
   1346 C5            [11] 2738 	push	bc
   1347 3E 4A         [ 7] 2739 	ld	a, #0x4a
   1349 F5            [11] 2740 	push	af
   134A 33            [ 6] 2741 	inc	sp
   134B CDr00r00      [17] 2742 	call	_DosCall
   134E F1            [10] 2743 	pop	af
   134F F1            [10] 2744 	pop	af
   1350 33            [ 6] 2745 	inc	sp
                           2746 ;src\CFG8266.c:629: if (regs.Bytes.A == 0) //moved, now get the file handler position, i.e.: size
   1351 DD 6E FC      [19] 2747 	ld	l, -4 (ix)
   1354 DD 66 FD      [19] 2748 	ld	h, -3 (ix)
   1357 23            [ 6] 2749 	inc	hl
   1358 7E            [ 7] 2750 	ld	a, (hl)
   1359 DD 77 FB      [19] 2751 	ld	-5 (ix), a
   135C B7            [ 4] 2752 	or	a, a
   135D C2r29r14      [10] 2753 	jp	NZ, 00219$
                           2754 ;src\CFG8266.c:630: SentFileSize = (unsigned long)(regs.Words.HL)&0xffff | ((unsigned long)(regs.Words.DE)<<16)&0xffff0000;
   1360 DD 7E FC      [19] 2755 	ld	a, -4 (ix)
   1363 DD 77 FA      [19] 2756 	ld	-6 (ix), a
   1366 DD 7E FD      [19] 2757 	ld	a, -3 (ix)
   1369 DD 77 FB      [19] 2758 	ld	-5 (ix), a
   136C DD 6E FA      [19] 2759 	ld	l, -6 (ix)
   136F DD 66 FB      [19] 2760 	ld	h, -5 (ix)
   1372 11 06 00      [10] 2761 	ld	de, #0x0006
   1375 19            [11] 2762 	add	hl, de
   1376 7E            [ 7] 2763 	ld	a, (hl)
   1377 DD 77 FA      [19] 2764 	ld	-6 (ix), a
   137A 23            [ 6] 2765 	inc	hl
   137B 7E            [ 7] 2766 	ld	a, (hl)
   137C DD 77 FB      [19] 2767 	ld	-5 (ix), a
   137F DD 7E FA      [19] 2768 	ld	a, -6 (ix)
   1382 DD 77 F8      [19] 2769 	ld	-8 (ix), a
   1385 DD 7E FB      [19] 2770 	ld	a, -5 (ix)
   1388 DD 77 F9      [19] 2771 	ld	-7 (ix), a
   138B 17            [ 4] 2772 	rla
   138C 9F            [ 4] 2773 	sbc	a, a
   138D DD 77 FA      [19] 2774 	ld	-6 (ix), a
   1390 DD 77 FB      [19] 2775 	ld	-5 (ix), a
   1393 DD 7E F8      [19] 2776 	ld	a, -8 (ix)
   1396 DD 77 F1      [19] 2777 	ld	-15 (ix), a
   1399 DD 7E F9      [19] 2778 	ld	a, -7 (ix)
   139C DD 77 F2      [19] 2779 	ld	-14 (ix), a
   139F DD 36 F3 00   [19] 2780 	ld	-13 (ix), #0x00
   13A3 DD 36 F4 00   [19] 2781 	ld	-12 (ix), #0x00
   13A7 DD 6E FC      [19] 2782 	ld	l, -4 (ix)
   13AA DD 66 FD      [19] 2783 	ld	h, -3 (ix)
   13AD 11 04 00      [10] 2784 	ld	de, #0x0004
   13B0 19            [11] 2785 	add	hl, de
   13B1 7E            [ 7] 2786 	ld	a, (hl)
   13B2 DD 77 FC      [19] 2787 	ld	-4 (ix), a
   13B5 23            [ 6] 2788 	inc	hl
   13B6 7E            [ 7] 2789 	ld	a, (hl)
   13B7 DD 77 FD      [19] 2790 	ld	-3 (ix), a
   13BA DD 7E FC      [19] 2791 	ld	a, -4 (ix)
   13BD DD 77 FA      [19] 2792 	ld	-6 (ix), a
   13C0 DD 7E FD      [19] 2793 	ld	a, -3 (ix)
   13C3 DD 77 FB      [19] 2794 	ld	-5 (ix), a
   13C6 17            [ 4] 2795 	rla
   13C7 9F            [ 4] 2796 	sbc	a, a
   13C8 DD 77 FC      [19] 2797 	ld	-4 (ix), a
   13CB DD 77 FD      [19] 2798 	ld	-3 (ix), a
   13CE DD 7E FA      [19] 2799 	ld	a, -6 (ix)
   13D1 DD 77 F8      [19] 2800 	ld	-8 (ix), a
   13D4 DD 7E FB      [19] 2801 	ld	a, -5 (ix)
   13D7 DD 77 F9      [19] 2802 	ld	-7 (ix), a
   13DA AF            [ 4] 2803 	xor	a, a
   13DB DD 77 F6      [19] 2804 	ld	-10 (ix), a
   13DE DD 77 F7      [19] 2805 	ld	-9 (ix), a
   13E1 DD 36 FA 00   [19] 2806 	ld	-6 (ix), #0x00
   13E5 DD 36 FB 00   [19] 2807 	ld	-5 (ix), #0x00
   13E9 DD 7E F8      [19] 2808 	ld	a, -8 (ix)
   13EC DD 77 FC      [19] 2809 	ld	-4 (ix), a
   13EF DD 7E F9      [19] 2810 	ld	a, -7 (ix)
   13F2 DD 77 FD      [19] 2811 	ld	-3 (ix), a
   13F5 DD 7E F1      [19] 2812 	ld	a, -15 (ix)
   13F8 DD B6 FA      [19] 2813 	or	a, -6 (ix)
   13FB DD 77 F5      [19] 2814 	ld	-11 (ix), a
   13FE DD 7E F2      [19] 2815 	ld	a, -14 (ix)
   1401 DD B6 FB      [19] 2816 	or	a, -5 (ix)
   1404 DD 77 F6      [19] 2817 	ld	-10 (ix), a
   1407 DD 7E F3      [19] 2818 	ld	a, -13 (ix)
   140A DD B6 FC      [19] 2819 	or	a, -4 (ix)
   140D DD 77 F7      [19] 2820 	ld	-9 (ix), a
   1410 DD 7E F4      [19] 2821 	ld	a, -12 (ix)
   1413 DD B6 FD      [19] 2822 	or	a, -3 (ix)
   1416 DD 77 F8      [19] 2823 	ld	-8 (ix), a
   1419 21 DF 01      [10] 2824 	ld	hl, #479
   141C 39            [11] 2825 	add	hl, sp
   141D EB            [ 4] 2826 	ex	de, hl
   141E 21 DA 01      [10] 2827 	ld	hl, #474
   1421 39            [11] 2828 	add	hl, sp
   1422 01 04 00      [10] 2829 	ld	bc, #4
   1425 ED B0         [21] 2830 	ldir
   1427 18 0D         [12] 2831 	jr	00220$
   1429                    2832 00219$:
                           2833 ;src\CFG8266.c:632: SentFileSize = 0;
   1429 AF            [ 4] 2834 	xor	a, a
   142A DD 77 FA      [19] 2835 	ld	-6 (ix), a
   142D DD 77 FB      [19] 2836 	ld	-5 (ix), a
   1430 DD 77 FC      [19] 2837 	ld	-4 (ix), a
   1433 DD 77 FD      [19] 2838 	ld	-3 (ix), a
   1436                    2839 00220$:
                           2840 ;src\CFG8266.c:634: ultostr(SentFileSize,chFileSize,10);
   1436 21 B5 01      [10] 2841 	ld	hl, #437
   1439 39            [11] 2842 	add	hl, sp
   143A 4D            [ 4] 2843 	ld	c, l
   143B 44            [ 4] 2844 	ld	b, h
   143C E5            [11] 2845 	push	hl
   143D 11 0A 00      [10] 2846 	ld	de, #0x000a
   1440 D5            [11] 2847 	push	de
   1441 C5            [11] 2848 	push	bc
   1442 DD 6E FC      [19] 2849 	ld	l, -4 (ix)
   1445 DD 66 FD      [19] 2850 	ld	h, -3 (ix)
   1448 E5            [11] 2851 	push	hl
   1449 DD 6E FA      [19] 2852 	ld	l, -6 (ix)
   144C DD 66 FB      [19] 2853 	ld	h, -5 (ix)
   144F E5            [11] 2854 	push	hl
   1450 CDr1Br06      [17] 2855 	call	_ultostr
   1453 F1            [10] 2856 	pop	af
   1454 F1            [10] 2857 	pop	af
   1455 F1            [10] 2858 	pop	af
   1456 F1            [10] 2859 	pop	af
   1457 DD 4E FE      [19] 2860 	ld	c, -2 (ix)
   145A DD 46 FF      [19] 2861 	ld	b, -1 (ix)
   145D C5            [11] 2862 	push	bc
   145E CDr00r00      [17] 2863 	call	_Close
   1461 F1            [10] 2864 	pop	af
   1462 E1            [10] 2865 	pop	hl
                           2866 ;src\CFG8266.c:636: printf ("File: %s Size: %s \r\n",ucFile,chFileSize);
   1463 11r01r01      [10] 2867 	ld	de, #_ucFile
   1466 01r97r1C      [10] 2868 	ld	bc, #___str_69+0
   1469 E5            [11] 2869 	push	hl
   146A D5            [11] 2870 	push	de
   146B C5            [11] 2871 	push	bc
   146C CDr00r00      [17] 2872 	call	_printf
   146F F1            [10] 2873 	pop	af
   1470 F1            [10] 2874 	pop	af
   1471 F1            [10] 2875 	pop	af
                           2876 ;src\CFG8266.c:637: if (SentFileSize)
   1472 DD 7E FD      [19] 2877 	ld	a, -3 (ix)
   1475 DD B6 FC      [19] 2878 	or	a, -4 (ix)
   1478 DD B6 FB      [19] 2879 	or	a, -5 (ix)
   147B DD B6 FA      [19] 2880 	or	a, -6 (ix)
   147E CAr85r18      [10] 2881 	jp	Z, 00250$
                           2882 ;src\CFG8266.c:639: iFile = Open (ucFile,O_RDONLY);
   1481 21 00 00      [10] 2883 	ld	hl, #0x0000
   1484 E5            [11] 2884 	push	hl
   1485 21r01r01      [10] 2885 	ld	hl, #_ucFile
   1488 E5            [11] 2886 	push	hl
   1489 CDr00r00      [17] 2887 	call	_Open
   148C F1            [10] 2888 	pop	af
   148D F1            [10] 2889 	pop	af
   148E DD 75 F1      [19] 2890 	ld	-15 (ix), l
   1491 DD 74 F2      [19] 2891 	ld	-14 (ix), h
                           2892 ;src\CFG8266.c:640: if (iFile!=-1)
   1494 DD 7E F1      [19] 2893 	ld	a, -15 (ix)
   1497 DD A6 F2      [19] 2894 	and	a, -14 (ix)
   149A 3C            [ 4] 2895 	inc	a
   149B CAr72r18      [10] 2896 	jp	Z,00247$
                           2897 ;src\CFG8266.c:642: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   149E 21 00 01      [10] 2898 	ld	hl, #0x0100
   14A1 E5            [11] 2899 	push	hl
   14A2 21r01r00      [10] 2900 	ld	hl, #_ucServer
   14A5 E5            [11] 2901 	push	hl
   14A6 DD 6E F1      [19] 2902 	ld	l, -15 (ix)
   14A9 DD 66 F2      [19] 2903 	ld	h, -14 (ix)
   14AC E5            [11] 2904 	push	hl
   14AD CDr00r00      [17] 2905 	call	_MyRead
   14B0 F1            [10] 2906 	pop	af
   14B1 F1            [10] 2907 	pop	af
   14B2 F1            [10] 2908 	pop	af
   14B3 DD 75 F3      [19] 2909 	ld	-13 (ix), l
   14B6 DD 74 F4      [19] 2910 	ld	-12 (ix), h
                           2911 ;src\CFG8266.c:643: if (FileRead == 256)
   14B9 DD 7E F3      [19] 2912 	ld	a, -13 (ix)
   14BC B7            [ 4] 2913 	or	a, a
   14BD C2r5Cr18      [10] 2914 	jp	NZ,00244$
   14C0 DD 7E F4      [19] 2915 	ld	a, -12 (ix)
   14C3 3D            [ 4] 2916 	dec	a
   14C4 C2r5Cr18      [10] 2917 	jp	NZ,00244$
                           2918 ;src\CFG8266.c:646: if (ucIsFw)
   14C7 3Ar0Er02      [13] 2919 	ld	a,(#_ucIsFw + 0)
   14CA B7            [ 4] 2920 	or	a, a
   14CB 28 0A         [12] 2921 	jr	Z,00222$
                           2922 ;src\CFG8266.c:647: TxByte('Z'); //Request start of RS232 update
   14CD 3E 5A         [ 7] 2923 	ld	a, #0x5a
   14CF F5            [11] 2924 	push	af
   14D0 33            [ 6] 2925 	inc	sp
   14D1 CDr0Dr06      [17] 2926 	call	_TxByte
   14D4 33            [ 6] 2927 	inc	sp
   14D5 18 08         [12] 2928 	jr	00223$
   14D7                    2929 00222$:
                           2930 ;src\CFG8266.c:649: TxByte('Y'); //Request start of RS232 cert update
   14D7 3E 59         [ 7] 2931 	ld	a, #0x59
   14D9 F5            [11] 2932 	push	af
   14DA 33            [ 6] 2933 	inc	sp
   14DB CDr0Dr06      [17] 2934 	call	_TxByte
   14DE 33            [ 6] 2935 	inc	sp
   14DF                    2936 00223$:
                           2937 ;src\CFG8266.c:650: TxByte(0);
   14DF AF            [ 4] 2938 	xor	a, a
   14E0 F5            [11] 2939 	push	af
   14E1 33            [ 6] 2940 	inc	sp
   14E2 CDr0Dr06      [17] 2941 	call	_TxByte
   14E5 33            [ 6] 2942 	inc	sp
                           2943 ;src\CFG8266.c:651: TxByte(12);
   14E6 3E 0C         [ 7] 2944 	ld	a, #0x0c
   14E8 F5            [11] 2945 	push	af
   14E9 33            [ 6] 2946 	inc	sp
   14EA CDr0Dr06      [17] 2947 	call	_TxByte
   14ED 33            [ 6] 2948 	inc	sp
                           2949 ;src\CFG8266.c:652: TxByte((unsigned char)(SentFileSize&0xff));
   14EE DD 7E FA      [19] 2950 	ld	a, -6 (ix)
   14F1 F5            [11] 2951 	push	af
   14F2 33            [ 6] 2952 	inc	sp
   14F3 CDr0Dr06      [17] 2953 	call	_TxByte
   14F6 33            [ 6] 2954 	inc	sp
                           2955 ;src\CFG8266.c:653: TxByte((unsigned char)((SentFileSize&0xff00)>>8));
   14F7 DD 46 FB      [19] 2956 	ld	b, -5 (ix)
   14FA 0E 00         [ 7] 2957 	ld	c, #0x00
   14FC C5            [11] 2958 	push	bc
   14FD 33            [ 6] 2959 	inc	sp
   14FE CDr0Dr06      [17] 2960 	call	_TxByte
   1501 33            [ 6] 2961 	inc	sp
                           2962 ;src\CFG8266.c:654: TxByte((unsigned char)((SentFileSize&0xff0000)>>16));
   1502 DD 7E FC      [19] 2963 	ld	a, -4 (ix)
   1505 F5            [11] 2964 	push	af
   1506 33            [ 6] 2965 	inc	sp
   1507 CDr0Dr06      [17] 2966 	call	_TxByte
   150A 33            [ 6] 2967 	inc	sp
                           2968 ;src\CFG8266.c:655: TxByte((unsigned char)((SentFileSize&0xff000000)>>24));
   150B DD 7E FD      [19] 2969 	ld	a, -3 (ix)
   150E F5            [11] 2970 	push	af
   150F 33            [ 6] 2971 	inc	sp
   1510 CDr0Dr06      [17] 2972 	call	_TxByte
   1513 33            [ 6] 2973 	inc	sp
                           2974 ;src\CFG8266.c:656: TxByte((unsigned char)((SentFileSize&0xff00000000)>>32));
   1514 DD 7E FA      [19] 2975 	ld	a, -6 (ix)
   1517 FD 21 00 00   [14] 2976 	ld	iy, #0
   151B FD 39         [15] 2977 	add	iy, sp
   151D FD 77 00      [19] 2978 	ld	0 (iy), a
   1520 DD 7E FB      [19] 2979 	ld	a, -5 (ix)
   1523 FD 77 01      [19] 2980 	ld	1 (iy), a
   1526 DD 7E FC      [19] 2981 	ld	a, -4 (ix)
   1529 FD 77 02      [19] 2982 	ld	2 (iy), a
   152C DD 7E FD      [19] 2983 	ld	a, -3 (ix)
   152F FD 77 03      [19] 2984 	ld	3 (iy), a
   1532 AF            [ 4] 2985 	xor	a, a
   1533 FD 77 04      [19] 2986 	ld	4 (iy), a
   1536 FD 77 05      [19] 2987 	ld	5 (iy), a
   1539 FD 77 06      [19] 2988 	ld	6 (iy), a
   153C FD 77 07      [19] 2989 	ld	7 (iy), a
   153F FD 21 08 00   [14] 2990 	ld	iy, #8
   1543 FD 39         [15] 2991 	add	iy, sp
   1545 FD 36 00 00   [19] 2992 	ld	0 (iy), #0x00
   1549 FD 36 01 00   [19] 2993 	ld	1 (iy), #0x00
   154D FD 36 02 00   [19] 2994 	ld	2 (iy), #0x00
   1551 FD 36 03 00   [19] 2995 	ld	3 (iy), #0x00
   1555 21 04 00      [10] 2996 	ld	hl, #0+4
   1558 39            [11] 2997 	add	hl, sp
   1559 7E            [ 7] 2998 	ld	a, (hl)
   155A FD 21 08 00   [14] 2999 	ld	iy, #8
   155E FD 39         [15] 3000 	add	iy, sp
   1560 FD 77 04      [19] 3001 	ld	4 (iy), a
   1563 FD 36 05 00   [19] 3002 	ld	5 (iy), #0x00
   1567 FD 36 06 00   [19] 3003 	ld	6 (iy), #0x00
   156B FD 36 07 00   [19] 3004 	ld	7 (iy), #0x00
   156F 06 20         [ 7] 3005 	ld	b, #0x20
   1571                    3006 00745$:
   1571 FD CB 07 2E   [23] 3007 	sra	7 (iy)
   1575 FD CB 06 1E   [23] 3008 	rr	6 (iy)
   1579 FD CB 05 1E   [23] 3009 	rr	5 (iy)
   157D FD CB 04 1E   [23] 3010 	rr	4 (iy)
   1581 FD CB 03 1E   [23] 3011 	rr	3 (iy)
   1585 FD CB 02 1E   [23] 3012 	rr	2 (iy)
   1589 FD CB 01 1E   [23] 3013 	rr	1 (iy)
   158D FD CB 00 1E   [23] 3014 	rr	0 (iy)
   1591 10 DE         [13] 3015 	djnz	00745$
   1593 FD 7E 00      [19] 3016 	ld	a, 0 (iy)
   1596 F5            [11] 3017 	push	af
   1597 33            [ 6] 3018 	inc	sp
   1598 CDr0Dr06      [17] 3019 	call	_TxByte
   159B 33            [ 6] 3020 	inc	sp
                           3021 ;src\CFG8266.c:657: TxByte((unsigned char)((SentFileSize&0xff0000000000)>>40));
   159C FD 21 08 00   [14] 3022 	ld	iy, #8
   15A0 FD 39         [15] 3023 	add	iy, sp
   15A2 FD 36 00 00   [19] 3024 	ld	0 (iy), #0x00
   15A6 FD 36 01 00   [19] 3025 	ld	1 (iy), #0x00
   15AA FD 36 02 00   [19] 3026 	ld	2 (iy), #0x00
   15AE FD 36 03 00   [19] 3027 	ld	3 (iy), #0x00
   15B2 FD 36 04 00   [19] 3028 	ld	4 (iy), #0x00
   15B6 21 05 00      [10] 3029 	ld	hl, #0+5
   15B9 39            [11] 3030 	add	hl, sp
   15BA 7E            [ 7] 3031 	ld	a, (hl)
   15BB FD 21 08 00   [14] 3032 	ld	iy, #8
   15BF FD 39         [15] 3033 	add	iy, sp
   15C1 FD 77 05      [19] 3034 	ld	5 (iy), a
   15C4 FD 36 06 00   [19] 3035 	ld	6 (iy), #0x00
   15C8 FD 36 07 00   [19] 3036 	ld	7 (iy), #0x00
   15CC 06 28         [ 7] 3037 	ld	b, #0x28
   15CE                    3038 00747$:
   15CE FD CB 07 2E   [23] 3039 	sra	7 (iy)
   15D2 FD CB 06 1E   [23] 3040 	rr	6 (iy)
   15D6 FD CB 05 1E   [23] 3041 	rr	5 (iy)
   15DA FD CB 04 1E   [23] 3042 	rr	4 (iy)
   15DE FD CB 03 1E   [23] 3043 	rr	3 (iy)
   15E2 FD CB 02 1E   [23] 3044 	rr	2 (iy)
   15E6 FD CB 01 1E   [23] 3045 	rr	1 (iy)
   15EA FD CB 00 1E   [23] 3046 	rr	0 (iy)
   15EE 10 DE         [13] 3047 	djnz	00747$
   15F0 FD 7E 00      [19] 3048 	ld	a, 0 (iy)
   15F3 F5            [11] 3049 	push	af
   15F4 33            [ 6] 3050 	inc	sp
   15F5 CDr0Dr06      [17] 3051 	call	_TxByte
   15F8 33            [ 6] 3052 	inc	sp
                           3053 ;src\CFG8266.c:658: TxByte((unsigned char)((SentFileSize&0xff000000000000)>>48));
   15F9 FD 21 08 00   [14] 3054 	ld	iy, #8
   15FD FD 39         [15] 3055 	add	iy, sp
   15FF FD 36 00 00   [19] 3056 	ld	0 (iy), #0x00
   1603 FD 36 01 00   [19] 3057 	ld	1 (iy), #0x00
   1607 FD 36 02 00   [19] 3058 	ld	2 (iy), #0x00
   160B FD 36 03 00   [19] 3059 	ld	3 (iy), #0x00
   160F FD 36 04 00   [19] 3060 	ld	4 (iy), #0x00
   1613 FD 36 05 00   [19] 3061 	ld	5 (iy), #0x00
   1617 21 06 00      [10] 3062 	ld	hl, #0+6
   161A 39            [11] 3063 	add	hl, sp
   161B 7E            [ 7] 3064 	ld	a, (hl)
   161C FD 21 08 00   [14] 3065 	ld	iy, #8
   1620 FD 39         [15] 3066 	add	iy, sp
   1622 FD 77 06      [19] 3067 	ld	6 (iy), a
   1625 FD 36 07 00   [19] 3068 	ld	7 (iy), #0x00
   1629 06 30         [ 7] 3069 	ld	b, #0x30
   162B                    3070 00749$:
   162B FD CB 07 2E   [23] 3071 	sra	7 (iy)
   162F FD CB 06 1E   [23] 3072 	rr	6 (iy)
   1633 FD CB 05 1E   [23] 3073 	rr	5 (iy)
   1637 FD CB 04 1E   [23] 3074 	rr	4 (iy)
   163B FD CB 03 1E   [23] 3075 	rr	3 (iy)
   163F FD CB 02 1E   [23] 3076 	rr	2 (iy)
   1643 FD CB 01 1E   [23] 3077 	rr	1 (iy)
   1647 FD CB 00 1E   [23] 3078 	rr	0 (iy)
   164B 10 DE         [13] 3079 	djnz	00749$
   164D FD 7E 00      [19] 3080 	ld	a, 0 (iy)
   1650 F5            [11] 3081 	push	af
   1651 33            [ 6] 3082 	inc	sp
   1652 CDr0Dr06      [17] 3083 	call	_TxByte
   1655 33            [ 6] 3084 	inc	sp
                           3085 ;src\CFG8266.c:659: TxByte((unsigned char)((SentFileSize&0xff00000000000000)>>56));
   1656 DD 7E FA      [19] 3086 	ld	a, -6 (ix)
   1659 FD 21 08 00   [14] 3087 	ld	iy, #8
   165D FD 39         [15] 3088 	add	iy, sp
   165F FD 77 00      [19] 3089 	ld	0 (iy), a
   1662 DD 7E FB      [19] 3090 	ld	a, -5 (ix)
   1665 FD 77 01      [19] 3091 	ld	1 (iy), a
   1668 DD 7E FC      [19] 3092 	ld	a, -4 (ix)
   166B FD 77 02      [19] 3093 	ld	2 (iy), a
   166E DD 7E FD      [19] 3094 	ld	a, -3 (ix)
   1671 FD 77 03      [19] 3095 	ld	3 (iy), a
   1674 AF            [ 4] 3096 	xor	a, a
   1675 FD 77 04      [19] 3097 	ld	4 (iy), a
   1678 FD 77 05      [19] 3098 	ld	5 (iy), a
   167B FD 77 06      [19] 3099 	ld	6 (iy), a
   167E FD 77 07      [19] 3100 	ld	7 (iy), a
   1681 FD 36 00 00   [19] 3101 	ld	0 (iy), #0x00
   1685 FD 36 01 00   [19] 3102 	ld	1 (iy), #0x00
   1689 FD 36 02 00   [19] 3103 	ld	2 (iy), #0x00
   168D FD 36 03 00   [19] 3104 	ld	3 (iy), #0x00
   1691 FD 36 04 00   [19] 3105 	ld	4 (iy), #0x00
   1695 FD 36 05 00   [19] 3106 	ld	5 (iy), #0x00
   1699 FD 36 06 00   [19] 3107 	ld	6 (iy), #0x00
   169D FD 7E 07      [19] 3108 	ld	a, 7 (iy)
   16A0 FD 77 07      [19] 3109 	ld	7 (iy), a
   16A3 06 38         [ 7] 3110 	ld	b, #0x38
   16A5                    3111 00751$:
   16A5 FD CB 07 3E   [23] 3112 	srl	7 (iy)
   16A9 FD CB 06 1E   [23] 3113 	rr	6 (iy)
   16AD FD CB 05 1E   [23] 3114 	rr	5 (iy)
   16B1 FD CB 04 1E   [23] 3115 	rr	4 (iy)
   16B5 FD CB 03 1E   [23] 3116 	rr	3 (iy)
   16B9 FD CB 02 1E   [23] 3117 	rr	2 (iy)
   16BD FD CB 01 1E   [23] 3118 	rr	1 (iy)
   16C1 FD CB 00 1E   [23] 3119 	rr	0 (iy)
   16C5 10 DE         [13] 3120 	djnz	00751$
   16C7 FD 7E 00      [19] 3121 	ld	a, 0 (iy)
   16CA F5            [11] 3122 	push	af
   16CB 33            [ 6] 3123 	inc	sp
   16CC CDr0Dr06      [17] 3124 	call	_TxByte
   16CF 33            [ 6] 3125 	inc	sp
                           3126 ;src\CFG8266.c:660: TxByte(ucServer[0]);
   16D0 3Ar01r00      [13] 3127 	ld	a, (#_ucServer + 0)
   16D3 F5            [11] 3128 	push	af
   16D4 33            [ 6] 3129 	inc	sp
   16D5 CDr0Dr06      [17] 3130 	call	_TxByte
   16D8 33            [ 6] 3131 	inc	sp
                           3132 ;src\CFG8266.c:661: TxByte(ucServer[1]);
   16D9 3Ar02r00      [13] 3133 	ld	a, (#_ucServer + 1)
   16DC F5            [11] 3134 	push	af
   16DD 33            [ 6] 3135 	inc	sp
   16DE CDr0Dr06      [17] 3136 	call	_TxByte
   16E1 33            [ 6] 3137 	inc	sp
                           3138 ;src\CFG8266.c:662: TxByte(ucServer[2]);
   16E2 3Ar03r00      [13] 3139 	ld	a, (#_ucServer + 2)
   16E5 F5            [11] 3140 	push	af
   16E6 33            [ 6] 3141 	inc	sp
   16E7 CDr0Dr06      [17] 3142 	call	_TxByte
   16EA 33            [ 6] 3143 	inc	sp
                           3144 ;src\CFG8266.c:663: TxByte(ucServer[3]);
   16EB 3Ar04r00      [13] 3145 	ld	a, (#_ucServer + 3)
   16EE F5            [11] 3146 	push	af
   16EF 33            [ 6] 3147 	inc	sp
   16F0 CDr0Dr06      [17] 3148 	call	_TxByte
   16F3 33            [ 6] 3149 	inc	sp
                           3150 ;src\CFG8266.c:665: if (ucIsFw)
   16F4 3Ar0Er02      [13] 3151 	ld	a,(#_ucIsFw + 0)
   16F7 B7            [ 4] 3152 	or	a, a
   16F8 28 1C         [12] 3153 	jr	Z,00225$
                           3154 ;src\CFG8266.c:666: bResponse = WaitForRXData(responseRSFWUpdate,2,60,true,false);
   16FA AF            [ 4] 3155 	xor	a, a
   16FB 57            [ 4] 3156 	ld	d,a
   16FC 1E 01         [ 7] 3157 	ld	e,#0x01
   16FE D5            [11] 3158 	push	de
   16FF 21 3C 00      [10] 3159 	ld	hl, #0x003c
   1702 E5            [11] 3160 	push	hl
   1703 2E 02         [ 7] 3161 	ld	l, #0x02
   1705 E5            [11] 3162 	push	hl
   1706 21rA5r00      [10] 3163 	ld	hl, #_responseRSFWUpdate
   1709 E5            [11] 3164 	push	hl
   170A CDrC8r07      [17] 3165 	call	_WaitForRXData
   170D F1            [10] 3166 	pop	af
   170E F1            [10] 3167 	pop	af
   170F F1            [10] 3168 	pop	af
   1710 F1            [10] 3169 	pop	af
   1711 DD 75 F5      [19] 3170 	ld	-11 (ix), l
   1714 18 1A         [12] 3171 	jr	00226$
   1716                    3172 00225$:
                           3173 ;src\CFG8266.c:668: bResponse = WaitForRXData(responseRSCERTUpdate,2,60,true,false);
   1716 AF            [ 4] 3174 	xor	a, a
   1717 57            [ 4] 3175 	ld	d,a
   1718 1E 01         [ 7] 3176 	ld	e,#0x01
   171A D5            [11] 3177 	push	de
   171B 21 3C 00      [10] 3178 	ld	hl, #0x003c
   171E E5            [11] 3179 	push	hl
   171F 2E 02         [ 7] 3180 	ld	l, #0x02
   1721 E5            [11] 3181 	push	hl
   1722 21rA7r00      [10] 3182 	ld	hl, #_responseRSCERTUpdate
   1725 E5            [11] 3183 	push	hl
   1726 CDrC8r07      [17] 3184 	call	_WaitForRXData
   1729 F1            [10] 3185 	pop	af
   172A F1            [10] 3186 	pop	af
   172B F1            [10] 3187 	pop	af
   172C F1            [10] 3188 	pop	af
   172D DD 75 F5      [19] 3189 	ld	-11 (ix), l
   1730                    3190 00226$:
                           3191 ;src\CFG8266.c:670: if (!bResponse)
   1730 DD 7E F5      [19] 3192 	ld	a, -11 (ix)
   1733 B7            [ 4] 3193 	or	a, a
   1734 20 0B         [12] 3194 	jr	NZ,00241$
                           3195 ;src\CFG8266.c:671: printf("Error requesting to start firmware update.\r\n");
   1736 21rACr1C      [10] 3196 	ld	hl, #___str_71
   1739 E5            [11] 3197 	push	hl
   173A CDr00r00      [17] 3198 	call	_puts
   173D F1            [10] 3199 	pop	af
   173E C3r64r18      [10] 3200 	jp	00245$
   1741                    3201 00241$:
                           3202 ;src\CFG8266.c:674: PrintChar('U');
   1741 3E 55         [ 7] 3203 	ld	a, #0x55
   1743 F5            [11] 3204 	push	af
   1744 33            [ 6] 3205 	inc	sp
   1745 CDr00r00      [17] 3206 	call	_PrintChar
   1748 33            [ 6] 3207 	inc	sp
                           3208 ;src\CFG8266.c:675: do
   1749 AF            [ 4] 3209 	xor	a, a
   174A DD 77 FE      [19] 3210 	ld	-2 (ix), a
   174D DD 77 FF      [19] 3211 	ld	-1 (ix), a
   1750                    3212 00235$:
                           3213 ;src\CFG8266.c:678: PrintChar(8); //backspace
   1750 3E 08         [ 7] 3214 	ld	a, #0x08
   1752 F5            [11] 3215 	push	af
   1753 33            [ 6] 3216 	inc	sp
   1754 CDr00r00      [17] 3217 	call	_PrintChar
   1757 33            [ 6] 3218 	inc	sp
                           3219 ;src\CFG8266.c:679: PrintChar(advance[i%4]); // next char
   1758 DD 7E FE      [19] 3220 	ld	a, -2 (ix)
   175B E6 03         [ 7] 3221 	and	a, #0x03
   175D DD 77 F6      [19] 3222 	ld	-10 (ix), a
   1760 DD 36 F7 00   [19] 3223 	ld	-9 (ix), #0x00
   1764 DD 7E F6      [19] 3224 	ld	a, -10 (ix)
   1767 DD 86 EE      [19] 3225 	add	a, -18 (ix)
   176A DD 77 F8      [19] 3226 	ld	-8 (ix), a
   176D DD 7E F7      [19] 3227 	ld	a, -9 (ix)
   1770 DD 8E EF      [19] 3228 	adc	a, -17 (ix)
   1773 DD 77 F9      [19] 3229 	ld	-7 (ix), a
   1776 DD 6E F8      [19] 3230 	ld	l, -8 (ix)
   1779 DD 66 F9      [19] 3231 	ld	h, -7 (ix)
   177C 7E            [ 7] 3232 	ld	a, (hl)
   177D F5            [11] 3233 	push	af
   177E 33            [ 6] 3234 	inc	sp
   177F CDr00r00      [17] 3235 	call	_PrintChar
   1782 33            [ 6] 3236 	inc	sp
                           3237 ;src\CFG8266.c:680: ++i;
   1783 DD 34 FE      [23] 3238 	inc	-2 (ix)
   1786 20 03         [12] 3239 	jr	NZ,00753$
   1788 DD 34 FF      [23] 3240 	inc	-1 (ix)
   178B                    3241 00753$:
                           3242 ;src\CFG8266.c:681: if (!ucFirstBlock)
   178B DD 7E F0      [19] 3243 	ld	a, -16 (ix)
   178E B7            [ 4] 3244 	or	a, a
   178F 20 2C         [12] 3245 	jr	NZ,00230$
                           3246 ;src\CFG8266.c:683: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1791 21 00 01      [10] 3247 	ld	hl, #0x0100
   1794 E5            [11] 3248 	push	hl
   1795 21r01r00      [10] 3249 	ld	hl, #_ucServer
   1798 E5            [11] 3250 	push	hl
   1799 DD 6E F1      [19] 3251 	ld	l, -15 (ix)
   179C DD 66 F2      [19] 3252 	ld	h, -14 (ix)
   179F E5            [11] 3253 	push	hl
   17A0 CDr00r00      [17] 3254 	call	_MyRead
   17A3 F1            [10] 3255 	pop	af
   17A4 F1            [10] 3256 	pop	af
   17A5 F1            [10] 3257 	pop	af
   17A6 DD 75 F3      [19] 3258 	ld	-13 (ix), l
                           3259 ;src\CFG8266.c:684: if (FileRead ==0)
   17A9 DD 74 F4      [19] 3260 	ld	-12 (ix), h
   17AC 7C            [ 4] 3261 	ld	a, h
   17AD DD B6 F3      [19] 3262 	or	a, -13 (ix)
   17B0 20 0F         [12] 3263 	jr	NZ,00231$
                           3264 ;src\CFG8266.c:686: printf("\rError reading file...\r\n");
   17B2 21rD8r1C      [10] 3265 	ld	hl, #___str_73
   17B5 E5            [11] 3266 	push	hl
   17B6 CDr00r00      [17] 3267 	call	_puts
   17B9 F1            [10] 3268 	pop	af
                           3269 ;src\CFG8266.c:687: break;
   17BA C3r4Dr18      [10] 3270 	jp	00237$
   17BD                    3271 00230$:
                           3272 ;src\CFG8266.c:691: ucFirstBlock = 0;
   17BD AF            [ 4] 3273 	xor	a, a
   17BE DD 77 F0      [19] 3274 	ld	-16 (ix), a
   17C1                    3275 00231$:
                           3276 ;src\CFG8266.c:693: TxByte('z'); //Write block
   17C1 3E 7A         [ 7] 3277 	ld	a, #0x7a
   17C3 F5            [11] 3278 	push	af
   17C4 33            [ 6] 3279 	inc	sp
   17C5 CDr0Dr06      [17] 3280 	call	_TxByte
   17C8 33            [ 6] 3281 	inc	sp
                           3282 ;src\CFG8266.c:694: TxByte((unsigned char)((FileRead&0xff00)>>8));
   17C9 DD 46 F4      [19] 3283 	ld	b, -12 (ix)
   17CC 0E 00         [ 7] 3284 	ld	c, #0x00
   17CE C5            [11] 3285 	push	bc
   17CF 33            [ 6] 3286 	inc	sp
   17D0 CDr0Dr06      [17] 3287 	call	_TxByte
   17D3 33            [ 6] 3288 	inc	sp
                           3289 ;src\CFG8266.c:695: TxByte((unsigned char)(FileRead&0xff));
   17D4 DD 7E F3      [19] 3290 	ld	a, -13 (ix)
   17D7 F5            [11] 3291 	push	af
   17D8 33            [ 6] 3292 	inc	sp
   17D9 CDr0Dr06      [17] 3293 	call	_TxByte
   17DC 33            [ 6] 3294 	inc	sp
                           3295 ;src\CFG8266.c:696: for (ii=0;ii<256;ii++)
   17DD 01 00 00      [10] 3296 	ld	bc, #0x0000
   17E0                    3297 00302$:
                           3298 ;src\CFG8266.c:697: TxByte(ucServer[ii]);
   17E0 21r01r00      [10] 3299 	ld	hl, #_ucServer
   17E3 09            [11] 3300 	add	hl, bc
   17E4 7E            [ 7] 3301 	ld	a, (hl)
   17E5 C5            [11] 3302 	push	bc
   17E6 F5            [11] 3303 	push	af
   17E7 33            [ 6] 3304 	inc	sp
   17E8 CDr0Dr06      [17] 3305 	call	_TxByte
   17EB 33            [ 6] 3306 	inc	sp
   17EC C1            [10] 3307 	pop	bc
                           3308 ;src\CFG8266.c:696: for (ii=0;ii<256;ii++)
   17ED 03            [ 6] 3309 	inc	bc
   17EE 78            [ 4] 3310 	ld	a, b
   17EF D6 01         [ 7] 3311 	sub	a, #0x01
   17F1 38 ED         [12] 3312 	jr	C,00302$
                           3313 ;src\CFG8266.c:699: bResponse = WaitForRXData(responseWRBlock,2,600,true,false);
   17F3 AF            [ 4] 3314 	xor	a, a
   17F4 57            [ 4] 3315 	ld	d,a
   17F5 1E 01         [ 7] 3316 	ld	e,#0x01
   17F7 D5            [11] 3317 	push	de
   17F8 21 58 02      [10] 3318 	ld	hl, #0x0258
   17FB E5            [11] 3319 	push	hl
   17FC 21 02 00      [10] 3320 	ld	hl, #0x0002
   17FF E5            [11] 3321 	push	hl
   1800 21rA9r00      [10] 3322 	ld	hl, #_responseWRBlock
   1803 E5            [11] 3323 	push	hl
   1804 CDrC8r07      [17] 3324 	call	_WaitForRXData
   1807 F1            [10] 3325 	pop	af
   1808 F1            [10] 3326 	pop	af
   1809 F1            [10] 3327 	pop	af
   180A F1            [10] 3328 	pop	af
                           3329 ;src\CFG8266.c:701: if (!bResponse)
   180B DD 75 F5      [19] 3330 	ld	-11 (ix), l
   180E 7D            [ 4] 3331 	ld	a, l
   180F B7            [ 4] 3332 	or	a, a
   1810 20 0A         [12] 3333 	jr	NZ,00234$
                           3334 ;src\CFG8266.c:703: printf("\rError requesting to write firmware block.\r\n");
   1812 21rF0r1C      [10] 3335 	ld	hl, #___str_75
   1815 E5            [11] 3336 	push	hl
   1816 CDr00r00      [17] 3337 	call	_puts
   1819 F1            [10] 3338 	pop	af
                           3339 ;src\CFG8266.c:704: break;
   181A 18 31         [12] 3340 	jr	00237$
   181C                    3341 00234$:
                           3342 ;src\CFG8266.c:706: SentFileSize = SentFileSize - FileRead;
   181C DD 4E F3      [19] 3343 	ld	c, -13 (ix)
   181F DD 46 F4      [19] 3344 	ld	b, -12 (ix)
   1822 11 00 00      [10] 3345 	ld	de, #0x0000
   1825 DD 7E FA      [19] 3346 	ld	a, -6 (ix)
   1828 91            [ 4] 3347 	sub	a, c
   1829 DD 77 FA      [19] 3348 	ld	-6 (ix), a
   182C DD 7E FB      [19] 3349 	ld	a, -5 (ix)
   182F 98            [ 4] 3350 	sbc	a, b
   1830 DD 77 FB      [19] 3351 	ld	-5 (ix), a
   1833 DD 7E FC      [19] 3352 	ld	a, -4 (ix)
   1836 9B            [ 4] 3353 	sbc	a, e
   1837 DD 77 FC      [19] 3354 	ld	-4 (ix), a
   183A DD 7E FD      [19] 3355 	ld	a, -3 (ix)
   183D 9A            [ 4] 3356 	sbc	a, d
                           3357 ;src\CFG8266.c:708: while(SentFileSize);
   183E DD 77 FD      [19] 3358 	ld	-3 (ix), a
   1841 DD B6 FC      [19] 3359 	or	a, -4 (ix)
   1844 DD B6 FB      [19] 3360 	or	a, -5 (ix)
   1847 DD B6 FA      [19] 3361 	or	a, -6 (ix)
   184A C2r50r17      [10] 3362 	jp	NZ, 00235$
   184D                    3363 00237$:
                           3364 ;src\CFG8266.c:711: if (bResponse)
   184D DD 7E F5      [19] 3365 	ld	a, -11 (ix)
   1850 B7            [ 4] 3366 	or	a, a
   1851 28 11         [12] 3367 	jr	Z,00245$
                           3368 ;src\CFG8266.c:712: FinishUpdate(false);
   1853 AF            [ 4] 3369 	xor	a, a
   1854 F5            [11] 3370 	push	af
   1855 33            [ 6] 3371 	inc	sp
   1856 CDr3Cr0A      [17] 3372 	call	_FinishUpdate
   1859 33            [ 6] 3373 	inc	sp
   185A 18 08         [12] 3374 	jr	00245$
   185C                    3375 00244$:
                           3376 ;src\CFG8266.c:716: Print("\rError reading firmware file!\n");
   185C 21r1Cr1D      [10] 3377 	ld	hl, #___str_76
   185F E5            [11] 3378 	push	hl
   1860 CDr00r00      [17] 3379 	call	_Print
   1863 F1            [10] 3380 	pop	af
   1864                    3381 00245$:
                           3382 ;src\CFG8266.c:717: Close(iFile);
   1864 DD 6E F1      [19] 3383 	ld	l, -15 (ix)
   1867 DD 66 F2      [19] 3384 	ld	h, -14 (ix)
   186A E5            [11] 3385 	push	hl
   186B CDr00r00      [17] 3386 	call	_Close
   186E F1            [10] 3387 	pop	af
   186F C3rFDr19      [10] 3388 	jp	00294$
   1872                    3389 00247$:
                           3390 ;src\CFG8266.c:721: printf("Error, couldn't open %s ...\r\n",ucFile);
   1872 21r01r01      [10] 3391 	ld	hl, #_ucFile
   1875 E5            [11] 3392 	push	hl
   1876 21r3Br1D      [10] 3393 	ld	hl, #___str_77
   1879 E5            [11] 3394 	push	hl
   187A CDr00r00      [17] 3395 	call	_printf
   187D F1            [10] 3396 	pop	af
   187E F1            [10] 3397 	pop	af
                           3398 ;src\CFG8266.c:722: return 0;
   187F 21 00 00      [10] 3399 	ld	hl, #0x0000
   1882 C3r00r1A      [10] 3400 	jp	00304$
   1885                    3401 00250$:
                           3402 ;src\CFG8266.c:727: printf("Error, %s is 0 bytes long...\r\n",ucFile);
   1885 21r01r01      [10] 3403 	ld	hl, #_ucFile
   1888 E5            [11] 3404 	push	hl
   1889 21r59r1D      [10] 3405 	ld	hl, #___str_78
   188C E5            [11] 3406 	push	hl
   188D CDr00r00      [17] 3407 	call	_printf
   1890 F1            [10] 3408 	pop	af
   1891 F1            [10] 3409 	pop	af
                           3410 ;src\CFG8266.c:728: return 0;
   1892 21 00 00      [10] 3411 	ld	hl, #0x0000
   1895 C3r00r1A      [10] 3412 	jp	00304$
   1898                    3413 00253$:
                           3414 ;src\CFG8266.c:733: printf("Error, couldn't open %s ...\r\n",ucFile);
   1898 21r01r01      [10] 3415 	ld	hl, #_ucFile
   189B E5            [11] 3416 	push	hl
   189C 21r3Br1D      [10] 3417 	ld	hl, #___str_77
   189F E5            [11] 3418 	push	hl
   18A0 CDr00r00      [17] 3419 	call	_printf
   18A3 F1            [10] 3420 	pop	af
   18A4 F1            [10] 3421 	pop	af
                           3422 ;src\CFG8266.c:734: return 0;
   18A5 21 00 00      [10] 3423 	ld	hl, #0x0000
   18A8 C3r00r1A      [10] 3424 	jp	00304$
   18AB                    3425 00280$:
                           3426 ;src\CFG8266.c:739: if (ucIsFw)
   18AB 3Ar0Er02      [13] 3427 	ld	a,(#_ucIsFw + 0)
   18AE B7            [ 4] 3428 	or	a, a
   18AF 28 19         [12] 3429 	jr	Z,00256$
                           3430 ;src\CFG8266.c:740: printf ("Ok, updating FW using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   18B1 21r01r01      [10] 3431 	ld	hl, #_ucFile
   18B4 E5            [11] 3432 	push	hl
   18B5 2Ar07r02      [16] 3433 	ld	hl, (_uiPort)
   18B8 E5            [11] 3434 	push	hl
   18B9 21r01r00      [10] 3435 	ld	hl, #_ucServer
   18BC E5            [11] 3436 	push	hl
   18BD 21r78r1D      [10] 3437 	ld	hl, #___str_79
   18C0 E5            [11] 3438 	push	hl
   18C1 CDr00r00      [17] 3439 	call	_printf
   18C4 F1            [10] 3440 	pop	af
   18C5 F1            [10] 3441 	pop	af
   18C6 F1            [10] 3442 	pop	af
   18C7 F1            [10] 3443 	pop	af
   18C8 18 17         [12] 3444 	jr	00257$
   18CA                    3445 00256$:
                           3446 ;src\CFG8266.c:742: printf ("Ok, updating certificates using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   18CA 21r01r01      [10] 3447 	ld	hl, #_ucFile
   18CD E5            [11] 3448 	push	hl
   18CE 2Ar07r02      [16] 3449 	ld	hl, (_uiPort)
   18D1 E5            [11] 3450 	push	hl
   18D2 21r01r00      [10] 3451 	ld	hl, #_ucServer
   18D5 E5            [11] 3452 	push	hl
   18D6 21rE1r1D      [10] 3453 	ld	hl, #___str_80
   18D9 E5            [11] 3454 	push	hl
   18DA CDr00r00      [17] 3455 	call	_printf
   18DD F1            [10] 3456 	pop	af
   18DE F1            [10] 3457 	pop	af
   18DF F1            [10] 3458 	pop	af
   18E0 F1            [10] 3459 	pop	af
   18E1                    3460 00257$:
                           3461 ;src\CFG8266.c:743: uiCMDLen = strlen(ucServer) + 3; //3 = 0 terminator + 2 bytes port
   18E1 21r01r00      [10] 3462 	ld	hl, #_ucServer
   18E4 E5            [11] 3463 	push	hl
   18E5 CDr00r00      [17] 3464 	call	_strlen
   18E8 F1            [10] 3465 	pop	af
   18E9 EB            [ 4] 3466 	ex	de,hl
   18EA 13            [ 6] 3467 	inc	de
   18EB 13            [ 6] 3468 	inc	de
   18EC 13            [ 6] 3469 	inc	de
                           3470 ;src\CFG8266.c:744: uiCMDLen += strlen(ucFile);
   18ED 21r01r01      [10] 3471 	ld	hl, #_ucFile
   18F0 E5            [11] 3472 	push	hl
   18F1 CDr00r00      [17] 3473 	call	_strlen
   18F4 F1            [10] 3474 	pop	af
   18F5 19            [11] 3475 	add	hl, de
   18F6 DD 75 FE      [19] 3476 	ld	-2 (ix), l
   18F9 DD 74 FF      [19] 3477 	ld	-1 (ix), h
                           3478 ;src\CFG8266.c:745: if (ucIsFw)
   18FC 3Ar0Er02      [13] 3479 	ld	a,(#_ucIsFw + 0)
   18FF B7            [ 4] 3480 	or	a, a
   1900 28 0A         [12] 3481 	jr	Z,00259$
                           3482 ;src\CFG8266.c:746: TxByte('U'); //Request Update Main Firmware remotely
   1902 3E 55         [ 7] 3483 	ld	a, #0x55
   1904 F5            [11] 3484 	push	af
   1905 33            [ 6] 3485 	inc	sp
   1906 CDr0Dr06      [17] 3486 	call	_TxByte
   1909 33            [ 6] 3487 	inc	sp
   190A 18 08         [12] 3488 	jr	00260$
   190C                    3489 00259$:
                           3490 ;src\CFG8266.c:748: TxByte('u'); //Request Update spiffs remotely
   190C 3E 75         [ 7] 3491 	ld	a, #0x75
   190E F5            [11] 3492 	push	af
   190F 33            [ 6] 3493 	inc	sp
   1910 CDr0Dr06      [17] 3494 	call	_TxByte
   1913 33            [ 6] 3495 	inc	sp
   1914                    3496 00260$:
                           3497 ;src\CFG8266.c:749: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   1914 DD 7E FF      [19] 3498 	ld	a, -1 (ix)
   1917 F5            [11] 3499 	push	af
   1918 33            [ 6] 3500 	inc	sp
   1919 CDr0Dr06      [17] 3501 	call	_TxByte
   191C 33            [ 6] 3502 	inc	sp
                           3503 ;src\CFG8266.c:750: TxByte((unsigned char)(uiCMDLen&0xff));
   191D DD 7E FE      [19] 3504 	ld	a, -2 (ix)
   1920 F5            [11] 3505 	push	af
   1921 33            [ 6] 3506 	inc	sp
   1922 CDr0Dr06      [17] 3507 	call	_TxByte
   1925 33            [ 6] 3508 	inc	sp
                           3509 ;src\CFG8266.c:751: TxByte((unsigned char)(uiPort&0xff));
   1926 3Ar07r02      [13] 3510 	ld	a,(#_uiPort + 0)
   1929 F5            [11] 3511 	push	af
   192A 33            [ 6] 3512 	inc	sp
   192B CDr0Dr06      [17] 3513 	call	_TxByte
   192E 33            [ 6] 3514 	inc	sp
                           3515 ;src\CFG8266.c:752: TxByte((unsigned char)((uiPort&0xff00)>>8));
   192F 3Ar08r02      [13] 3516 	ld	a,(#_uiPort + 1)
   1932 F5            [11] 3517 	push	af
   1933 33            [ 6] 3518 	inc	sp
   1934 CDr0Dr06      [17] 3519 	call	_TxByte
   1937 33            [ 6] 3520 	inc	sp
                           3521 ;src\CFG8266.c:754: do
   1938 DD 4E FE      [19] 3522 	ld	c, -2 (ix)
   193B DD 46 FF      [19] 3523 	ld	b, -1 (ix)
   193E 1E 00         [ 7] 3524 	ld	e, #0x00
   1940                    3525 00262$:
                           3526 ;src\CFG8266.c:756: tx_data = ucServer[rx_data];
   1940 21r01r00      [10] 3527 	ld	hl, #_ucServer
   1943 16 00         [ 7] 3528 	ld	d, #0x00
   1945 19            [11] 3529 	add	hl, de
   1946 56            [ 7] 3530 	ld	d, (hl)
                           3531 ;src\CFG8266.c:757: TxByte(tx_data);
   1947 C5            [11] 3532 	push	bc
   1948 D5            [11] 3533 	push	de
   1949 D5            [11] 3534 	push	de
   194A 33            [ 6] 3535 	inc	sp
   194B CDr0Dr06      [17] 3536 	call	_TxByte
   194E 33            [ 6] 3537 	inc	sp
   194F D1            [10] 3538 	pop	de
   1950 C1            [10] 3539 	pop	bc
                           3540 ;src\CFG8266.c:758: --uiCMDLen;
   1951 0B            [ 6] 3541 	dec	bc
                           3542 ;src\CFG8266.c:759: ++rx_data;
   1952 1C            [ 4] 3543 	inc	e
                           3544 ;src\CFG8266.c:761: while((uiCMDLen)&&(tx_data!=0));
   1953 78            [ 4] 3545 	ld	a, b
   1954 B1            [ 4] 3546 	or	a, c
   1955 28 04         [12] 3547 	jr	Z,00264$
   1957 7A            [ 4] 3548 	ld	a, d
   1958 B7            [ 4] 3549 	or	a, a
   1959 20 E5         [12] 3550 	jr	NZ,00262$
   195B                    3551 00264$:
                           3552 ;src\CFG8266.c:763: do
   195B AF            [ 4] 3553 	xor	a, a
   195C DD 77 FF      [19] 3554 	ld	-1 (ix), a
   195F                    3555 00267$:
                           3556 ;src\CFG8266.c:765: tx_data = ucFile[rx_data];
   195F 3Er01         [ 7] 3557 	ld	a, #<(_ucFile)
   1961 DD 86 FF      [19] 3558 	add	a, -1 (ix)
   1964 5F            [ 4] 3559 	ld	e, a
   1965 3Es01         [ 7] 3560 	ld	a, #>(_ucFile)
   1967 CE 00         [ 7] 3561 	adc	a, #0x00
   1969 57            [ 4] 3562 	ld	d, a
   196A 1A            [ 7] 3563 	ld	a, (de)
                           3564 ;src\CFG8266.c:766: if (tx_data==0)
   196B B7            [ 4] 3565 	or	a, a
   196C 28 10         [12] 3566 	jr	Z,00269$
                           3567 ;src\CFG8266.c:768: TxByte(tx_data);
   196E C5            [11] 3568 	push	bc
   196F F5            [11] 3569 	push	af
   1970 33            [ 6] 3570 	inc	sp
   1971 CDr0Dr06      [17] 3571 	call	_TxByte
   1974 33            [ 6] 3572 	inc	sp
   1975 C1            [10] 3573 	pop	bc
                           3574 ;src\CFG8266.c:769: --uiCMDLen;
   1976 0B            [ 6] 3575 	dec	bc
                           3576 ;src\CFG8266.c:770: ++rx_data;
   1977 DD 34 FF      [23] 3577 	inc	-1 (ix)
                           3578 ;src\CFG8266.c:772: while(uiCMDLen);
   197A 78            [ 4] 3579 	ld	a, b
   197B B1            [ 4] 3580 	or	a, c
   197C 20 E1         [12] 3581 	jr	NZ,00267$
   197E                    3582 00269$:
                           3583 ;src\CFG8266.c:774: if (ucIsFw)
   197E 3Ar0Er02      [13] 3584 	ld	a,(#_ucIsFw + 0)
   1981 B7            [ 4] 3585 	or	a, a
   1982 28 1B         [12] 3586 	jr	Z,00271$
                           3587 ;src\CFG8266.c:775: bResponse = WaitForRXData(responseOTAFW,2,18000,true,false);
   1984 AF            [ 4] 3588 	xor	a, a
   1985 57            [ 4] 3589 	ld	d,a
   1986 1E 01         [ 7] 3590 	ld	e,#0x01
   1988 D5            [11] 3591 	push	de
   1989 21 50 46      [10] 3592 	ld	hl, #0x4650
   198C E5            [11] 3593 	push	hl
   198D 21 02 00      [10] 3594 	ld	hl, #0x0002
   1990 E5            [11] 3595 	push	hl
   1991 21rABr00      [10] 3596 	ld	hl, #_responseOTAFW
   1994 E5            [11] 3597 	push	hl
   1995 CDrC8r07      [17] 3598 	call	_WaitForRXData
   1998 F1            [10] 3599 	pop	af
   1999 F1            [10] 3600 	pop	af
   199A F1            [10] 3601 	pop	af
   199B F1            [10] 3602 	pop	af
   199C 4D            [ 4] 3603 	ld	c, l
   199D 18 19         [12] 3604 	jr	00272$
   199F                    3605 00271$:
                           3606 ;src\CFG8266.c:777: bResponse = WaitForRXData(responseOTASPIFF,2,18000,true,false);
   199F AF            [ 4] 3607 	xor	a, a
   19A0 57            [ 4] 3608 	ld	d,a
   19A1 1E 01         [ 7] 3609 	ld	e,#0x01
   19A3 D5            [11] 3610 	push	de
   19A4 21 50 46      [10] 3611 	ld	hl, #0x4650
   19A7 E5            [11] 3612 	push	hl
   19A8 21 02 00      [10] 3613 	ld	hl, #0x0002
   19AB E5            [11] 3614 	push	hl
   19AC 21rADr00      [10] 3615 	ld	hl, #_responseOTASPIFF
   19AF E5            [11] 3616 	push	hl
   19B0 CDrC8r07      [17] 3617 	call	_WaitForRXData
   19B3 F1            [10] 3618 	pop	af
   19B4 F1            [10] 3619 	pop	af
   19B5 F1            [10] 3620 	pop	af
   19B6 F1            [10] 3621 	pop	af
   19B7 4D            [ 4] 3622 	ld	c, l
   19B8                    3623 00272$:
                           3624 ;src\CFG8266.c:779: if (bResponse)
   19B8 79            [ 4] 3625 	ld	a, c
   19B9 B7            [ 4] 3626 	or	a, a
   19BA 28 25         [12] 3627 	jr	Z,00277$
                           3628 ;src\CFG8266.c:781: if ((!ucIsFw))
   19BC 3Ar0Er02      [13] 3629 	ld	a,(#_ucIsFw + 0)
   19BF B7            [ 4] 3630 	or	a, a
   19C0 20 0A         [12] 3631 	jr	NZ,00274$
                           3632 ;src\CFG8266.c:782: printf("\rSuccess updating certificates!\r\n");
   19C2 21r54r1E      [10] 3633 	ld	hl, #___str_82
   19C5 E5            [11] 3634 	push	hl
   19C6 CDr00r00      [17] 3635 	call	_puts
   19C9 F1            [10] 3636 	pop	af
   19CA 18 08         [12] 3637 	jr	00275$
   19CC                    3638 00274$:
                           3639 ;src\CFG8266.c:784: printf("\rSuccess, firmware updated, wait a minute so it is fully flashed.\r\n");
   19CC 21r75r1E      [10] 3640 	ld	hl, #___str_84
   19CF E5            [11] 3641 	push	hl
   19D0 CDr00r00      [17] 3642 	call	_puts
   19D3 F1            [10] 3643 	pop	af
   19D4                    3644 00275$:
                           3645 ;src\CFG8266.c:785: FinishUpdate(true);
   19D4 3E 01         [ 7] 3646 	ld	a, #0x01
   19D6 F5            [11] 3647 	push	af
   19D7 33            [ 6] 3648 	inc	sp
   19D8 CDr3Cr0A      [17] 3649 	call	_FinishUpdate
   19DB 33            [ 6] 3650 	inc	sp
                           3651 ;src\CFG8266.c:786: return 0;
   19DC 21 00 00      [10] 3652 	ld	hl, #0x0000
   19DF 18 1F         [12] 3653 	jr	00304$
   19E1                    3654 00277$:
                           3655 ;src\CFG8266.c:789: printf("\rFailed to update from remote server...\r\n");
   19E1 21rB8r1E      [10] 3656 	ld	hl, #___str_86
   19E4 E5            [11] 3657 	push	hl
   19E5 CDr00r00      [17] 3658 	call	_puts
   19E8 F1            [10] 3659 	pop	af
   19E9 18 12         [12] 3660 	jr	00294$
   19EB                    3661 00290$:
                           3662 ;src\CFG8266.c:793: printf("ESP device not found...\r\n");
   19EB 21rE1r1E      [10] 3663 	ld	hl, #___str_88
   19EE E5            [11] 3664 	push	hl
   19EF CDr00r00      [17] 3665 	call	_puts
   19F2 F1            [10] 3666 	pop	af
   19F3 18 08         [12] 3667 	jr	00294$
   19F5                    3668 00293$:
                           3669 ;src\CFG8266.c:796: printf(strUsage);
   19F5 21rBAr00      [10] 3670 	ld	hl, #_strUsage
   19F8 E5            [11] 3671 	push	hl
   19F9 CDr00r00      [17] 3672 	call	_printf
   19FC F1            [10] 3673 	pop	af
   19FD                    3674 00294$:
                           3675 ;src\CFG8266.c:798: return 0;
   19FD 21 00 00      [10] 3676 	ld	hl, #0x0000
   1A00                    3677 00304$:
                           3678 ;src\CFG8266.c:799: }
   1A00 DD F9         [10] 3679 	ld	sp, ix
   1A02 DD E1         [14] 3680 	pop	ix
   1A04 C9            [10] 3681 	ret
   1A05                    3682 ___str_29:
   1A05 3E 20 53 4D 2D 58  3683 	.ascii "> SM-X ESP8266 WIFI Module Configuration v1.20 <"
        20 45 53 50 38 32
        36 36 20 57 49 46
        49 20 4D 6F 64 75
        6C 65 20 43 6F 6E
        66 69 67 75 72 61
        74 69 6F 6E 20 76
        31 2E 32 30 20 3C
   1A35 0D                 3684 	.db 0x0d
   1A36 0A                 3685 	.db 0x0a
   1A37 28 63 29 20 32 30  3686 	.ascii "(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com"
        32 30 20 4F 64 75
        76 61 6C 64 6F 20
        50 61 76 61 6E 20
        4A 75 6E 69 6F 72
        20 2D 20 64 75 63
        61 73 70 40 67 6D
        61 69 6C 2E 63 6F
        6D
   1A68 0D                 3687 	.db 0x0d
   1A69 0A                 3688 	.db 0x0a
   1A6A 00                 3689 	.db 0x00
   1A6B                    3690 ___str_30:
   1A6B 55 73 69 6E 67 20  3691 	.ascii "Using Baud Rate #%u"
        42 61 75 64 20 52
        61 74 65 20 23 25
        75
   1A7E 0D                 3692 	.db 0x0d
   1A7F 0A                 3693 	.db 0x0a
   1A80 00                 3694 	.db 0x00
   1A81                    3695 ___str_31:
   1A81 0D                 3696 	.db 0x0d
   1A82 0A                 3697 	.db 0x0a
   1A83 53 65 74 74 69 6E  3698 	.ascii "Setting WiFi idle timeout to %u..."
        67 20 57 69 46 69
        20 69 64 6C 65 20
        74 69 6D 65 6F 75
        74 20 74 6F 20 25
        75 2E 2E 2E
   1AA5 0D                 3699 	.db 0x0d
   1AA6 0A                 3700 	.db 0x0a
   1AA7 00                 3701 	.db 0x00
   1AA8                    3702 ___str_33:
   1AA8 0D                 3703 	.db 0x0d
   1AA9 0A                 3704 	.db 0x0a
   1AAA 53 65 74 74 69 6E  3705 	.ascii "Setting WiFi to always on!"
        67 20 57 69 46 69
        20 74 6F 20 61 6C
        77 61 79 73 20 6F
        6E 21
   1AC4 0D                 3706 	.db 0x0d
   1AC5 00                 3707 	.db 0x00
   1AC6                    3708 ___str_35:
   1AC6 0D                 3709 	.db 0x0d
   1AC7 00                 3710 	.db 0x00
   1AC8                    3711 ___str_37:
   1AC8 43 68 6F 6F 73 65  3712 	.ascii "Choose AP:"
        20 41 50 3A
   1AD2 0D                 3713 	.db 0x0d
   1AD3 0A                 3714 	.db 0x0a
   1AD4 00                 3715 	.db 0x00
   1AD5                    3716 ___str_38:
   1AD5 25 75 20 2D 20 25  3717 	.ascii "%u - %s"
        73
   1ADC 00                 3718 	.db 0x00
   1ADD                    3719 ___str_40:
   1ADD 20 28 50 57 44 29  3720 	.ascii " (PWD)"
   1AE3 0D                 3721 	.db 0x0d
   1AE4 00                 3722 	.db 0x00
   1AE5                    3723 ___str_42:
   1AE5 20 28 4F 50 45 4E  3724 	.ascii " (OPEN)"
        29
   1AEC 0D                 3725 	.db 0x0d
   1AED 00                 3726 	.db 0x00
   1AEE                    3727 ___str_43:
   1AEE 0D                 3728 	.db 0x0d
   1AEF 0A                 3729 	.db 0x0a
   1AF0 57 68 69 63 68 20  3730 	.ascii "Which one to connect? (ESC exit)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 29
   1B10 00                 3731 	.db 0x00
   1B11                    3732 ___str_44:
   1B11 20 25 63           3733 	.ascii " %c"
   1B14 0D                 3734 	.db 0x0d
   1B15 0A                 3735 	.db 0x0a
   1B16 00                 3736 	.db 0x00
   1B17                    3737 ___str_45:
   1B17 50 61 73 73 77 6F  3738 	.ascii "Password? "
        72 64 3F 20
   1B21 00                 3739 	.db 0x00
   1B22                    3740 ___str_48:
   1B22 53 75 63 63 65 73  3741 	.ascii "Success, AP configured to be used."
        73 2C 20 41 50 20
        63 6F 6E 66 69 67
        75 72 65 64 20 74
        6F 20 62 65 20 75
        73 65 64 2E
   1B44 0D                 3742 	.db 0x0d
   1B45 00                 3743 	.db 0x00
   1B46                    3744 ___str_50:
   1B46 45 72 72 6F 72 2C  3745 	.ascii "Error, AP not configured!"
        20 41 50 20 6E 6F
        74 20 63 6F 6E 66
        69 67 75 72 65 64
        21
   1B5F 0D                 3746 	.db 0x0d
   1B60 00                 3747 	.db 0x00
   1B61                    3748 ___str_52:
   1B61 0D                 3749 	.db 0x0d
   1B62 0A                 3750 	.db 0x0a
   1B63 55 73 65 72 20 63  3751 	.ascii "User canceled by ESC key..."
        61 6E 63 65 6C 65
        64 20 62 79 20 45
        53 43 20 6B 65 79
        2E 2E 2E
   1B7E 0D                 3752 	.db 0x0d
   1B7F 00                 3753 	.db 0x00
   1B80                    3754 ___str_54:
   1B80 0D                 3755 	.db 0x0d
   1B81 0A                 3756 	.db 0x0a
   1B82 53 63 61 6E 20 72  3757 	.ascii "Scan results: no answer..."
        65 73 75 6C 74 73
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   1B9C 0D                 3758 	.db 0x0d
   1B9D 00                 3759 	.db 0x00
   1B9E                    3760 ___str_56:
   1B9E 0D                 3761 	.db 0x0d
   1B9F 53 63 61 6E 20 72  3762 	.ascii "Scan request: no answer..."
        65 71 75 65 73 74
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   1BB9 00                 3763 	.db 0x00
   1BBA                    3764 ___str_58:
   1BBA 0D                 3765 	.db 0x0d
   1BBB 4E 61 67 6C 65 20  3766 	.ascii "Nagle set as requested..."
        73 65 74 20 61 73
        20 72 65 71 75 65
        73 74 65 64 2E 2E
        2E
   1BD4 00                 3767 	.db 0x00
   1BD5                    3768 ___str_60:
   1BD5 0D                 3769 	.db 0x0d
   1BD6 4E 61 67 6C 65 20  3770 	.ascii "Nagle not set as requested, error!"
        6E 6F 74 20 73 65
        74 20 61 73 20 72
        65 71 75 65 73 74
        65 64 2C 20 65 72
        72 6F 72 21
   1BF8 00                 3771 	.db 0x00
   1BF9                    3772 ___str_62:
   1BF9 0D                 3773 	.db 0x0d
   1BFA 52 65 71 75 65 73  3774 	.ascii "Requested to turn off WiFi Radio..."
        74 65 64 20 74 6F
        20 74 75 72 6E 20
        6F 66 66 20 57 69
        46 69 20 52 61 64
        69 6F 2E 2E 2E
   1C1D 00                 3775 	.db 0x00
   1C1E                    3776 ___str_64:
   1C1E 0D                 3777 	.db 0x0d
   1C1F 52 65 71 75 65 73  3778 	.ascii "Request to turnoff WiFi Radio error!"
        74 20 74 6F 20 74
        75 72 6E 6F 66 66
        20 57 69 46 69 20
        52 61 64 69 6F 20
        65 72 72 6F 72 21
   1C43 00                 3779 	.db 0x00
   1C44                    3780 ___str_66:
   1C44 0D                 3781 	.db 0x0d
   1C45 57 69 46 69 20 72  3782 	.ascii "WiFi radio on Time-out set successfully..."
        61 64 69 6F 20 6F
        6E 20 54 69 6D 65
        2D 6F 75 74 20 73
        65 74 20 73 75 63
        63 65 73 73 66 75
        6C 6C 79 2E 2E 2E
   1C6F 00                 3783 	.db 0x00
   1C70                    3784 ___str_68:
   1C70 0D                 3785 	.db 0x0d
   1C71 45 72 72 6F 72 20  3786 	.ascii "Error setting WiFi radio on Time-out!"
        73 65 74 74 69 6E
        67 20 57 69 46 69
        20 72 61 64 69 6F
        20 6F 6E 20 54 69
        6D 65 2D 6F 75 74
        21
   1C96 00                 3787 	.db 0x00
   1C97                    3788 ___str_69:
   1C97 46 69 6C 65 3A 20  3789 	.ascii "File: %s Size: %s "
        25 73 20 53 69 7A
        65 3A 20 25 73 20
   1CA9 0D                 3790 	.db 0x0d
   1CAA 0A                 3791 	.db 0x0a
   1CAB 00                 3792 	.db 0x00
   1CAC                    3793 ___str_71:
   1CAC 45 72 72 6F 72 20  3794 	.ascii "Error requesting to start firmware update."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 73 74 61 72
        74 20 66 69 72 6D
        77 61 72 65 20 75
        70 64 61 74 65 2E
   1CD6 0D                 3795 	.db 0x0d
   1CD7 00                 3796 	.db 0x00
   1CD8                    3797 ___str_73:
   1CD8 0D                 3798 	.db 0x0d
   1CD9 45 72 72 6F 72 20  3799 	.ascii "Error reading file..."
        72 65 61 64 69 6E
        67 20 66 69 6C 65
        2E 2E 2E
   1CEE 0D                 3800 	.db 0x0d
   1CEF 00                 3801 	.db 0x00
   1CF0                    3802 ___str_75:
   1CF0 0D                 3803 	.db 0x0d
   1CF1 45 72 72 6F 72 20  3804 	.ascii "Error requesting to write firmware block."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 77 72 69 74
        65 20 66 69 72 6D
        77 61 72 65 20 62
        6C 6F 63 6B 2E
   1D1A 0D                 3805 	.db 0x0d
   1D1B 00                 3806 	.db 0x00
   1D1C                    3807 ___str_76:
   1D1C 0D                 3808 	.db 0x0d
   1D1D 45 72 72 6F 72 20  3809 	.ascii "Error reading firmware file!"
        72 65 61 64 69 6E
        67 20 66 69 72 6D
        77 61 72 65 20 66
        69 6C 65 21
   1D39 0A                 3810 	.db 0x0a
   1D3A 00                 3811 	.db 0x00
   1D3B                    3812 ___str_77:
   1D3B 45 72 72 6F 72 2C  3813 	.ascii "Error, couldn't open %s ..."
        20 63 6F 75 6C 64
        6E 27 74 20 6F 70
        65 6E 20 25 73 20
        2E 2E 2E
   1D56 0D                 3814 	.db 0x0d
   1D57 0A                 3815 	.db 0x0a
   1D58 00                 3816 	.db 0x00
   1D59                    3817 ___str_78:
   1D59 45 72 72 6F 72 2C  3818 	.ascii "Error, %s is 0 bytes long..."
        20 25 73 20 69 73
        20 30 20 62 79 74
        65 73 20 6C 6F 6E
        67 2E 2E 2E
   1D75 0D                 3819 	.db 0x0d
   1D76 0A                 3820 	.db 0x0a
   1D77 00                 3821 	.db 0x00
   1D78                    3822 ___str_79:
   1D78 4F 6B 2C 20 75 70  3823 	.ascii "Ok, updating FW using server: %s port: %u"
        64 61 74 69 6E 67
        20 46 57 20 75 73
        69 6E 67 20 73 65
        72 76 65 72 3A 20
        25 73 20 70 6F 72
        74 3A 20 25 75
   1DA1 0D                 3824 	.db 0x0d
   1DA2 0A                 3825 	.db 0x0a
   1DA3 46 69 6C 65 20 70  3826 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   1DB0 0A                 3827 	.db 0x0a
   1DB1 50 6C 65 61 73 65  3828 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   1DDE 0D                 3829 	.db 0x0d
   1DDF 0A                 3830 	.db 0x0a
   1DE0 00                 3831 	.db 0x00
   1DE1                    3832 ___str_80:
   1DE1 4F 6B 2C 20 75 70  3833 	.ascii "Ok, updating certificates using server: %s port: %u"
        64 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 75 73 69 6E
        67 20 73 65 72 76
        65 72 3A 20 25 73
        20 70 6F 72 74 3A
        20 25 75
   1E14 0D                 3834 	.db 0x0d
   1E15 0A                 3835 	.db 0x0a
   1E16 46 69 6C 65 20 70  3836 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   1E23 0A                 3837 	.db 0x0a
   1E24 50 6C 65 61 73 65  3838 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   1E51 0D                 3839 	.db 0x0d
   1E52 0A                 3840 	.db 0x0a
   1E53 00                 3841 	.db 0x00
   1E54                    3842 ___str_82:
   1E54 0D                 3843 	.db 0x0d
   1E55 53 75 63 63 65 73  3844 	.ascii "Success updating certificates!"
        73 20 75 70 64 61
        74 69 6E 67 20 63
        65 72 74 69 66 69
        63 61 74 65 73 21
   1E73 0D                 3845 	.db 0x0d
   1E74 00                 3846 	.db 0x00
   1E75                    3847 ___str_84:
   1E75 0D                 3848 	.db 0x0d
   1E76 53 75 63 63 65 73  3849 	.ascii "Success, firmware updated, wait a minute so it is fully flas"
        73 2C 20 66 69 72
        6D 77 61 72 65 20
        75 70 64 61 74 65
        64 2C 20 77 61 69
        74 20 61 20 6D 69
        6E 75 74 65 20 73
        6F 20 69 74 20 69
        73 20 66 75 6C 6C
        79 20 66 6C 61 73
   1EB2 68 65 64 2E        3850 	.ascii "hed."
   1EB6 0D                 3851 	.db 0x0d
   1EB7 00                 3852 	.db 0x00
   1EB8                    3853 ___str_86:
   1EB8 0D                 3854 	.db 0x0d
   1EB9 46 61 69 6C 65 64  3855 	.ascii "Failed to update from remote server..."
        20 74 6F 20 75 70
        64 61 74 65 20 66
        72 6F 6D 20 72 65
        6D 6F 74 65 20 73
        65 72 76 65 72 2E
        2E 2E
   1EDF 0D                 3856 	.db 0x0d
   1EE0 00                 3857 	.db 0x00
   1EE1                    3858 ___str_88:
   1EE1 45 53 50 20 64 65  3859 	.ascii "ESP device not found..."
        76 69 63 65 20 6E
        6F 74 20 66 6F 75
        6E 64 2E 2E 2E
   1EF8 0D                 3860 	.db 0x0d
   1EF9 00                 3861 	.db 0x00
                           3862 	.area _CODE
                           3863 	.area _INITIALIZER
                           3864 	.area _CABS (ABS)
