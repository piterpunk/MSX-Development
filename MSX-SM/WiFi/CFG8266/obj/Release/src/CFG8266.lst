                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11570 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module CFG8266
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _FinishUpdate
                             13 	.globl _WaitForRXData
                             14 	.globl _ultostr
                             15 	.globl _TxByte
                             16 	.globl _IsValidInput
                             17 	.globl _MyRead
                             18 	.globl _DosCall
                             19 	.globl _Close
                             20 	.globl _Open
                             21 	.globl _Inkey
                             22 	.globl _Cls
                             23 	.globl _Beep
                             24 	.globl _InputString
                             25 	.globl _Print
                             26 	.globl _strlen
                             27 	.globl _atol
                             28 	.globl _atoi
                             29 	.globl _puts
                             30 	.globl _printf
                             31 	.globl _speedStr
                             32 	.globl _strAPSts
                             33 	.globl _uiTimeout
                             34 	.globl _ucSetTimeout
                             35 	.globl _ucRadioOff
                             36 	.globl _ucNagleOn
                             37 	.globl _ucNagleOff
                             38 	.globl _ucIsFw
                             39 	.globl _ucLocalUpdate
                             40 	.globl _lPort
                             41 	.globl _uiPort
                             42 	.globl _ucScan
                             43 	.globl _TickCount
                             44 	.globl _chFiller2
                             45 	.globl _strUsage
                             46 	.globl _responseReady2
                             47 	.globl _aDone
                             48 	.globl _advance
                             49 	.globl _radioOffResponse
                             50 	.globl _responseRadioOnTimeout
                             51 	.globl _responseOTASPIFF
                             52 	.globl _responseOTAFW
                             53 	.globl _responseWRBlock
                             54 	.globl _responseRSCERTUpdate
                             55 	.globl _responseRSFWUpdate
                             56 	.globl _apstsResponse
                             57 	.globl _apconfigurationResponse
                             58 	.globl _scanresResponse
                             59 	.globl _nagleoffResponse
                             60 	.globl _nagleonResponse
                             61 	.globl _scanresNoNetwork
                             62 	.globl _scanResponse
                             63 	.globl _responseOK
                             64 	.globl _certificateDone
                             65 	.globl _versionResponse
                             66 	.globl _endUpdate
                             67 	.globl _chFiller
                             68 ;--------------------------------------------------------
                             69 ; special function registers
                             70 ;--------------------------------------------------------
                     0006    71 _myPort6	=	0x0006
                     0007    72 _myPort7	=	0x0007
                             73 ;--------------------------------------------------------
                             74 ; ram data
                             75 ;--------------------------------------------------------
                             76 	.area _DATA
                     FC9E    77 _TickCount	=	0xfc9e
   0000                      78 _ucScan::
   0000                      79 	.ds 1
   0001                      80 _uiPort::
   0001                      81 	.ds 2
   0003                      82 _lPort::
   0003                      83 	.ds 4
   0007                      84 _ucLocalUpdate::
   0007                      85 	.ds 1
   0008                      86 _ucIsFw::
   0008                      87 	.ds 1
   0009                      88 _ucNagleOff::
   0009                      89 	.ds 1
   000A                      90 _ucNagleOn::
   000A                      91 	.ds 1
   000B                      92 _ucRadioOff::
   000B                      93 	.ds 1
   000C                      94 _ucSetTimeout::
   000C                      95 	.ds 1
   000D                      96 _uiTimeout::
   000D                      97 	.ds 2
                             98 ;--------------------------------------------------------
                             99 ; ram data
                            100 ;--------------------------------------------------------
                            101 	.area _INITIALIZED
   0000                     102 _strAPSts::
   0000                     103 	.ds 12
   000C                     104 _speedStr::
   000C                     105 	.ds 20
                            106 ;--------------------------------------------------------
                            107 ; absolute external ram data
                            108 ;--------------------------------------------------------
                            109 	.area _DABS (ABS)
                            110 ;--------------------------------------------------------
                            111 ; global & static initialisations
                            112 ;--------------------------------------------------------
                            113 	.area _HOME
                            114 	.area _GSINIT
                            115 	.area _GSFINAL
                            116 	.area _GSINIT
                            117 ;--------------------------------------------------------
                            118 ; Home
                            119 ;--------------------------------------------------------
                            120 	.area _HOME
                            121 	.area _HOME
                            122 ;--------------------------------------------------------
                            123 ; code
                            124 ;--------------------------------------------------------
                            125 	.area _CODE
                            126 ;src\CFG8266.c:47: unsigned int MyRead (int Handle, unsigned char* Buffer, unsigned int Size)
                            127 ;	---------------------------------
                            128 ; Function MyRead
                            129 ; ---------------------------------
   0000                     130 _MyRead::
   0000 DD E5         [15]  131 	push	ix
   0002 DD 21 00 00   [14]  132 	ld	ix,#0
   0006 DD 39         [15]  133 	add	ix,sp
   0008 21 F4 FF      [10]  134 	ld	hl, #-12
   000B 39            [11]  135 	add	hl, sp
   000C F9            [ 6]  136 	ld	sp, hl
                            137 ;src\CFG8266.c:53: regs.Words.DE = (unsigned int) Buffer;
   000D 21 00 00      [10]  138 	ld	hl, #0
   0010 39            [11]  139 	add	hl, sp
   0011 EB            [ 4]  140 	ex	de, hl
   0012 21 04 00      [10]  141 	ld	hl, #0x0004
   0015 19            [11]  142 	add	hl, de
   0016 DD 4E 06      [19]  143 	ld	c, 6 (ix)
   0019 DD 7E 07      [19]  144 	ld	a, 7 (ix)
   001C 71            [ 7]  145 	ld	(hl), c
   001D 23            [ 6]  146 	inc	hl
   001E 77            [ 7]  147 	ld	(hl), a
                            148 ;src\CFG8266.c:54: regs.Words.HL = Size;
   001F 21 06 00      [10]  149 	ld	hl, #0x0006
   0022 19            [11]  150 	add	hl, de
   0023 DD 7E 08      [19]  151 	ld	a, 8 (ix)
   0026 77            [ 7]  152 	ld	(hl), a
   0027 23            [ 6]  153 	inc	hl
   0028 DD 7E 09      [19]  154 	ld	a, 9 (ix)
   002B 77            [ 7]  155 	ld	(hl), a
                            156 ;src\CFG8266.c:55: regs.Bytes.B = (unsigned char)(Handle&0xff);
   002C 21 03 00      [10]  157 	ld	hl, #3
   002F 39            [11]  158 	add	hl, sp
   0030 DD 7E 04      [19]  159 	ld	a, 4 (ix)
   0033 77            [ 7]  160 	ld	(hl), a
                            161 ;src\CFG8266.c:56: DosCall(0x48, &regs, REGS_MAIN, REGS_MAIN);
   0034 21 00 00      [10]  162 	ld	hl, #0
   0037 39            [11]  163 	add	hl, sp
   0038 4D            [ 4]  164 	ld	c, l
   0039 44            [ 4]  165 	ld	b, h
   003A 59            [ 4]  166 	ld	e, c
   003B 50            [ 4]  167 	ld	d, b
   003C C5            [11]  168 	push	bc
   003D 01 02 02      [10]  169 	ld	bc, #0x0202
   0040 C5            [11]  170 	push	bc
   0041 D5            [11]  171 	push	de
   0042 3E 48         [ 7]  172 	ld	a, #0x48
   0044 F5            [11]  173 	push	af
   0045 33            [ 6]  174 	inc	sp
   0046 CDr00r00      [17]  175 	call	_DosCall
   0049 F1            [10]  176 	pop	af
   004A F1            [10]  177 	pop	af
   004B 33            [ 6]  178 	inc	sp
   004C C1            [10]  179 	pop	bc
                            180 ;src\CFG8266.c:57: if (regs.Bytes.A == 0)
   004D 69            [ 4]  181 	ld	l, c
   004E 60            [ 4]  182 	ld	h, b
   004F 23            [ 6]  183 	inc	hl
   0050 7E            [ 7]  184 	ld	a, (hl)
   0051 B7            [ 4]  185 	or	a, a
   0052 20 0B         [12]  186 	jr	NZ,00102$
                            187 ;src\CFG8266.c:60: iRet = regs.Words.HL;
   0054 69            [ 4]  188 	ld	l, c
   0055 60            [ 4]  189 	ld	h, b
   0056 11 06 00      [10]  190 	ld	de, #0x0006
   0059 19            [11]  191 	add	hl, de
   005A 4E            [ 7]  192 	ld	c, (hl)
   005B 23            [ 6]  193 	inc	hl
   005C 46            [ 7]  194 	ld	b, (hl)
   005D 18 03         [12]  195 	jr	00103$
   005F                     196 00102$:
                            197 ;src\CFG8266.c:63: iRet = 0;
   005F 01 00 00      [10]  198 	ld	bc, #0x0000
   0062                     199 00103$:
                            200 ;src\CFG8266.c:65: return iRet;
   0062 69            [ 4]  201 	ld	l, c
   0063 60            [ 4]  202 	ld	h, b
                            203 ;src\CFG8266.c:66: }
   0064 DD F9         [10]  204 	ld	sp, ix
   0066 DD E1         [14]  205 	pop	ix
   0068 C9            [10]  206 	ret
   0069                     207 _Done_Version:
   0069 4D 61 64 65 20 77   208 	.ascii "Made with FUSION-C 1.2 (ebsoft)"
        69 74 68 20 46 55
        53 49 4F 4E 2D 43
        20 31 2E 32 20 28
        65 62 73 6F 66 74
        29
   0088 00                  209 	.db 0x00
   0089                     210 _chFiller:
   0089 43                  211 	.db #0x43	; 67	'C'
   008A 46                  212 	.db #0x46	; 70	'F'
   008B 47                  213 	.db #0x47	; 71	'G'
   008C 38                  214 	.db #0x38	; 56	'8'
   008D 32                  215 	.db #0x32	; 50	'2'
   008E 36                  216 	.db #0x36	; 54	'6'
   008F 36                  217 	.db #0x36	; 54	'6'
   0090 20                  218 	.db #0x20	; 32
   0091 59                  219 	.db #0x59	; 89	'Y'
   0092 6F                  220 	.db #0x6f	; 111	'o'
   0093 75                  221 	.db #0x75	; 117	'u'
   0094 20                  222 	.db #0x20	; 32
   0095 68                  223 	.db #0x68	; 104	'h'
   0096 61                  224 	.db #0x61	; 97	'a'
   0097 76                  225 	.db #0x76	; 118	'v'
   0098 65                  226 	.db #0x65	; 101	'e'
   0099 20                  227 	.db #0x20	; 32
   009A 61                  228 	.db #0x61	; 97	'a'
   009B 20                  229 	.db #0x20	; 32
   009C 67                  230 	.db #0x67	; 103	'g'
   009D 6F                  231 	.db #0x6f	; 111	'o'
   009E 6F                  232 	.db #0x6f	; 111	'o'
   009F 64                  233 	.db #0x64	; 100	'd'
   00A0 20                  234 	.db #0x20	; 32
   00A1 74                  235 	.db #0x74	; 116	't'
   00A2 69                  236 	.db #0x69	; 105	'i'
   00A3 6D                  237 	.db #0x6d	; 109	'm'
   00A4 65                  238 	.db #0x65	; 101	'e'
   00A5 20                  239 	.db #0x20	; 32
   00A6 72                  240 	.db #0x72	; 114	'r'
   00A7 65                  241 	.db #0x65	; 101	'e'
   00A8 61                  242 	.db #0x61	; 97	'a'
   00A9 64                  243 	.db #0x64	; 100	'd'
   00AA 69                  244 	.db #0x69	; 105	'i'
   00AB 6E                  245 	.db #0x6e	; 110	'n'
   00AC 67                  246 	.db #0x67	; 103	'g'
   00AD 20                  247 	.db #0x20	; 32
   00AE 74                  248 	.db #0x74	; 116	't'
   00AF 68                  249 	.db #0x68	; 104	'h'
   00B0 69                  250 	.db #0x69	; 105	'i'
   00B1 73                  251 	.db #0x73	; 115	's'
   00B2 20                  252 	.db #0x20	; 32
   00B3 74                  253 	.db #0x74	; 116	't'
   00B4 61                  254 	.db #0x61	; 97	'a'
   00B5 6C                  255 	.db #0x6c	; 108	'l'
   00B6 65                  256 	.db #0x65	; 101	'e'
   00B7 20                  257 	.db #0x20	; 32
   00B8 6F                  258 	.db #0x6f	; 111	'o'
   00B9 66                  259 	.db #0x66	; 102	'f'
   00BA 20                  260 	.db #0x20	; 32
   00BB 61                  261 	.db #0x61	; 97	'a'
   00BC 6E                  262 	.db #0x6e	; 110	'n'
   00BD 20                  263 	.db #0x20	; 32
   00BE 77                  264 	.db #0x77	; 119	'w'
   00BF 65                  265 	.db #0x65	; 101	'e'
   00C0 69                  266 	.db #0x69	; 105	'i'
   00C1 72                  267 	.db #0x72	; 114	'r'
   00C2 64                  268 	.db #0x64	; 100	'd'
   00C3 20                  269 	.db #0x20	; 32
   00C4 62                  270 	.db #0x62	; 98	'b'
   00C5 65                  271 	.db #0x65	; 101	'e'
   00C6 68                  272 	.db #0x68	; 104	'h'
   00C7 61                  273 	.db #0x61	; 97	'a'
   00C8 76                  274 	.db #0x76	; 118	'v'
   00C9 69                  275 	.db #0x69	; 105	'i'
   00CA 6F                  276 	.db #0x6f	; 111	'o'
   00CB 72                  277 	.db #0x72	; 114	'r'
   00CC 2C                  278 	.db #0x2c	; 44
   00CD 20                  279 	.db #0x20	; 32
   00CE 73                  280 	.db #0x73	; 115	's'
   00CF 69                  281 	.db #0x69	; 105	'i'
   00D0 74                  282 	.db #0x74	; 116	't'
   00D1 20                  283 	.db #0x20	; 32
   00D2 61                  284 	.db #0x61	; 97	'a'
   00D3 6E                  285 	.db #0x6e	; 110	'n'
   00D4 64                  286 	.db #0x64	; 100	'd'
   00D5 20                  287 	.db #0x20	; 32
   00D6 68                  288 	.db #0x68	; 104	'h'
   00D7 61                  289 	.db #0x61	; 97	'a'
   00D8 76                  290 	.db #0x76	; 118	'v'
   00D9 65                  291 	.db #0x65	; 101	'e'
   00DA 20                  292 	.db #0x20	; 32
   00DB 66                  293 	.db #0x66	; 102	'f'
   00DC 75                  294 	.db #0x75	; 117	'u'
   00DD 6E                  295 	.db #0x6e	; 110	'n'
   00DE 20                  296 	.db #0x20	; 32
   00DF 61                  297 	.db #0x61	; 97	'a'
   00E0 73                  298 	.db #0x73	; 115	's'
   00E1 20                  299 	.db #0x20	; 32
   00E2 74                  300 	.db #0x74	; 116	't'
   00E3 68                  301 	.db #0x68	; 104	'h'
   00E4 69                  302 	.db #0x69	; 105	'i'
   00E5 73                  303 	.db #0x73	; 115	's'
   00E6 20                  304 	.db #0x20	; 32
   00E7 69                  305 	.db #0x69	; 105	'i'
   00E8 73                  306 	.db #0x73	; 115	's'
   00E9 20                  307 	.db #0x20	; 32
   00EA 6F                  308 	.db #0x6f	; 111	'o'
   00EB 76                  309 	.db #0x76	; 118	'v'
   00EC 65                  310 	.db #0x65	; 101	'e'
   00ED 72                  311 	.db #0x72	; 114	'r'
   00EE 77                  312 	.db #0x77	; 119	'w'
   00EF 72                  313 	.db #0x72	; 114	'r'
   00F0 69                  314 	.db #0x69	; 105	'i'
   00F1 74                  315 	.db #0x74	; 116	't'
   00F2 74                  316 	.db #0x74	; 116	't'
   00F3 65                  317 	.db #0x65	; 101	'e'
   00F4 6E                  318 	.db #0x6e	; 110	'n'
   00F5 21                  319 	.db #0x21	; 33
   00F6 0D                  320 	.db #0x0d	; 13
   00F7 0A                  321 	.db #0x0a	; 10
   00F8 00                  322 	.db #0x00	; 0
   00F9 00                  323 	.db #0x00	; 0
   00FA 00                  324 	.db #0x00	; 0
   00FB 00                  325 	.db #0x00	; 0
   00FC 00                  326 	.db #0x00	; 0
   00FD 00                  327 	.db #0x00	; 0
   00FE 00                  328 	.db #0x00	; 0
   00FF 00                  329 	.db #0x00	; 0
   0100 00                  330 	.db #0x00	; 0
   0101 00                  331 	.db #0x00	; 0
   0102 00                  332 	.db #0x00	; 0
   0103 00                  333 	.db #0x00	; 0
   0104 00                  334 	.db #0x00	; 0
   0105 00                  335 	.db #0x00	; 0
   0106 00                  336 	.db #0x00	; 0
   0107 00                  337 	.db #0x00	; 0
   0108 00                  338 	.db #0x00	; 0
   0109                     339 _endUpdate:
   0109 45                  340 	.db #0x45	; 69	'E'
   010A 00                  341 	.db #0x00	; 0
   010B                     342 _versionResponse:
   010B 56                  343 	.db #0x56	; 86	'V'
   010C                     344 _certificateDone:
   010C 49                  345 	.db #0x49	; 73	'I'
   010D 00                  346 	.db #0x00	; 0
   010E                     347 _responseOK:
   010E 4F                  348 	.db #0x4f	; 79	'O'
   010F 4B                  349 	.db #0x4b	; 75	'K'
   0110                     350 _scanResponse:
   0110 53                  351 	.db #0x53	; 83	'S'
   0111 00                  352 	.db #0x00	; 0
   0112                     353 _scanresNoNetwork:
   0112 53                  354 	.db #0x53	; 83	'S'
   0113 02                  355 	.db #0x02	; 2
   0114                     356 _nagleonResponse:
   0114 44                  357 	.db #0x44	; 68	'D'
   0115 00                  358 	.db #0x00	; 0
   0116                     359 _nagleoffResponse:
   0116 4E                  360 	.db #0x4e	; 78	'N'
   0117 00                  361 	.db #0x00	; 0
   0118                     362 _scanresResponse:
   0118 73                  363 	.db #0x73	; 115	's'
   0119 00                  364 	.db #0x00	; 0
   011A                     365 _apconfigurationResponse:
   011A 41                  366 	.db #0x41	; 65	'A'
   011B 00                  367 	.db #0x00	; 0
   011C                     368 _apstsResponse:
   011C 67                  369 	.db #0x67	; 103	'g'
   011D 00                  370 	.db #0x00	; 0
   011E 00                  371 	.db #0x00	; 0
   011F                     372 _responseRSFWUpdate:
   011F 5A                  373 	.db #0x5a	; 90	'Z'
   0120 00                  374 	.db #0x00	; 0
   0121                     375 _responseRSCERTUpdate:
   0121 59                  376 	.db #0x59	; 89	'Y'
   0122 00                  377 	.db #0x00	; 0
   0123                     378 _responseWRBlock:
   0123 7A                  379 	.db #0x7a	; 122	'z'
   0124 00                  380 	.db #0x00	; 0
   0125                     381 _responseOTAFW:
   0125 55                  382 	.db #0x55	; 85	'U'
   0126 00                  383 	.db #0x00	; 0
   0127                     384 _responseOTASPIFF:
   0127 75                  385 	.db #0x75	; 117	'u'
   0128 00                  386 	.db #0x00	; 0
   0129                     387 _responseRadioOnTimeout:
   0129 54                  388 	.db #0x54	; 84	'T'
   012A 00                  389 	.db #0x00	; 0
   012B                     390 _radioOffResponse:
   012B 4F                  391 	.db #0x4f	; 79	'O'
   012C 00                  392 	.db #0x00	; 0
   012D                     393 _advance:
   012D 5B                  394 	.db #0x5b	; 91
   012E 01                  395 	.db #0x01	; 1
   012F 57                  396 	.db #0x57	; 87	'W'
   0130 01                  397 	.db #0x01	; 1
   0131 57                  398 	.db #0x57	; 87	'W'
   0132 01                  399 	.db #0x01	; 1
   0133 57                  400 	.db #0x57	; 87	'W'
   0134 20                  401 	.db #0x20	; 32
   0135 20                  402 	.db #0x20	; 32
   0136 5D                  403 	.db #0x5d	; 93
   0137 1D                  404 	.db #0x1d	; 29
   0138 1D                  405 	.db #0x1d	; 29
   0139 1D                  406 	.db #0x1d	; 29
   013A 1D                  407 	.db #0x1d	; 29
   013B 1D                  408 	.db #0x1d	; 29
   013C 1D                  409 	.db #0x1d	; 29
   013D 1D                  410 	.db #0x1d	; 29
   013E 00                  411 	.db #0x00	; 0
   013F 5B                  412 	.db #0x5b	; 91
   0140 20                  413 	.db #0x20	; 32
   0141 01                  414 	.db #0x01	; 1
   0142 57                  415 	.db #0x57	; 87	'W'
   0143 01                  416 	.db #0x01	; 1
   0144 57                  417 	.db #0x57	; 87	'W'
   0145 01                  418 	.db #0x01	; 1
   0146 57                  419 	.db #0x57	; 87	'W'
   0147 20                  420 	.db #0x20	; 32
   0148 5D                  421 	.db #0x5d	; 93
   0149 1D                  422 	.db #0x1d	; 29
   014A 1D                  423 	.db #0x1d	; 29
   014B 1D                  424 	.db #0x1d	; 29
   014C 1D                  425 	.db #0x1d	; 29
   014D 1D                  426 	.db #0x1d	; 29
   014E 1D                  427 	.db #0x1d	; 29
   014F 1D                  428 	.db #0x1d	; 29
   0150 00                  429 	.db #0x00	; 0
   0151 5B                  430 	.db #0x5b	; 91
   0152 20                  431 	.db #0x20	; 32
   0153 20                  432 	.db #0x20	; 32
   0154 01                  433 	.db #0x01	; 1
   0155 57                  434 	.db #0x57	; 87	'W'
   0156 01                  435 	.db #0x01	; 1
   0157 57                  436 	.db #0x57	; 87	'W'
   0158 01                  437 	.db #0x01	; 1
   0159 57                  438 	.db #0x57	; 87	'W'
   015A 5D                  439 	.db #0x5d	; 93
   015B 1D                  440 	.db #0x1d	; 29
   015C 1D                  441 	.db #0x1d	; 29
   015D 1D                  442 	.db #0x1d	; 29
   015E 1D                  443 	.db #0x1d	; 29
   015F 1D                  444 	.db #0x1d	; 29
   0160 1D                  445 	.db #0x1d	; 29
   0161 1D                  446 	.db #0x1d	; 29
   0162 00                  447 	.db #0x00	; 0
   0163 5B                  448 	.db #0x5b	; 91
   0164 01                  449 	.db #0x01	; 1
   0165 57                  450 	.db #0x57	; 87	'W'
   0166 20                  451 	.db #0x20	; 32
   0167 20                  452 	.db #0x20	; 32
   0168 01                  453 	.db #0x01	; 1
   0169 57                  454 	.db #0x57	; 87	'W'
   016A 01                  455 	.db #0x01	; 1
   016B 57                  456 	.db #0x57	; 87	'W'
   016C 5D                  457 	.db #0x5d	; 93
   016D 1D                  458 	.db #0x1d	; 29
   016E 1D                  459 	.db #0x1d	; 29
   016F 1D                  460 	.db #0x1d	; 29
   0170 1D                  461 	.db #0x1d	; 29
   0171 1D                  462 	.db #0x1d	; 29
   0172 1D                  463 	.db #0x1d	; 29
   0173 1D                  464 	.db #0x1d	; 29
   0174 00                  465 	.db #0x00	; 0
   0175 5B                  466 	.db #0x5b	; 91
   0176 01                  467 	.db #0x01	; 1
   0177 57                  468 	.db #0x57	; 87	'W'
   0178 01                  469 	.db #0x01	; 1
   0179 57                  470 	.db #0x57	; 87	'W'
   017A 20                  471 	.db #0x20	; 32
   017B 20                  472 	.db #0x20	; 32
   017C 01                  473 	.db #0x01	; 1
   017D 57                  474 	.db #0x57	; 87	'W'
   017E 5D                  475 	.db #0x5d	; 93
   017F 1D                  476 	.db #0x1d	; 29
   0180 1D                  477 	.db #0x1d	; 29
   0181 1D                  478 	.db #0x1d	; 29
   0182 1D                  479 	.db #0x1d	; 29
   0183 1D                  480 	.db #0x1d	; 29
   0184 1D                  481 	.db #0x1d	; 29
   0185 1D                  482 	.db #0x1d	; 29
   0186 00                  483 	.db #0x00	; 0
   0187                     484 _aDone:
   0187 20                  485 	.db #0x20	; 32
   0188 20                  486 	.db #0x20	; 32
   0189 20                  487 	.db #0x20	; 32
   018A 20                  488 	.db #0x20	; 32
   018B 20                  489 	.db #0x20	; 32
   018C 20                  490 	.db #0x20	; 32
   018D 20                  491 	.db #0x20	; 32
   018E 0D                  492 	.db #0x0d	; 13
   018F 00                  493 	.db #0x00	; 0
   0190                     494 _responseReady2:
   0190 52                  495 	.db #0x52	; 82	'R'
   0191 65                  496 	.db #0x65	; 101	'e'
   0192 61                  497 	.db #0x61	; 97	'a'
   0193 64                  498 	.db #0x64	; 100	'd'
   0194 79                  499 	.db #0x79	; 121	'y'
   0195 0D                  500 	.db #0x0d	; 13
   0196 0A                  501 	.db #0x0a	; 10
   0197                     502 _strUsage:
   0197 55 73 61 67 65 3A   503 	.ascii "Usage:  CFG8266 [options]"
        20 20 43 46 47 38
        32 36 36 20 5B 6F
        70 74 69 6F 6E 73
        5D
   01B0 0D                  504 	.db 0x0d
   01B1 0A                  505 	.db 0x0a
   01B2 0A                  506 	.db 0x0a
   01B3 20 2F 73 20 20 74   507 	.ascii " /s  to scan networks and choose one to connect"
        6F 20 73 63 61 6E
        20 6E 65 74 77 6F
        72 6B 73 20 61 6E
        64 20 63 68 6F 6F
        73 65 20 6F 6E 65
        20 74 6F 20 63 6F
        6E 6E 65 63 74
   01E2 0D                  508 	.db 0x0d
   01E3 0A                  509 	.db 0x0a
   01E4 20 2F 6D 20 20 74   510 	.ascii " /m  to turn on Nagle Algorithm"
        6F 20 74 75 72 6E
        20 6F 6E 20 4E 61
        67 6C 65 20 41 6C
        67 6F 72 69 74 68
        6D
   0203 0D                  511 	.db 0x0d
   0204 0A                  512 	.db 0x0a
   0205 20 2F 6E 20 20 74   513 	.ascii " /n  to turn off Nagle Algorithm (default)"
        6F 20 74 75 72 6E
        20 6F 66 66 20 4E
        61 67 6C 65 20 41
        6C 67 6F 72 69 74
        68 6D 20 28 64 65
        66 61 75 6C 74 29
   022F 0D                  514 	.db 0x0d
   0230 0A                  515 	.db 0x0a
   0231 20 2F 6F 20 20 74   516 	.ascii " /o  to turn off radio now if no connections are open"
        6F 20 74 75 72 6E
        20 6F 66 66 20 72
        61 64 69 6F 20 6E
        6F 77 20 69 66 20
        6E 6F 20 63 6F 6E
        6E 65 63 74 69 6F
        6E 73 20 61 72 65
        20 6F 70 65 6E
   0266 0D                  517 	.db 0x0d
   0267 0A                  518 	.db 0x0a
   0268 0A                  519 	.db 0x0a
   0269 20 46 57 2E 42 49   520 	.ascii " FW.BIN       to update ESP8266 firmware locally"
        4E 20 20 20 20 20
        20 20 74 6F 20 75
        70 64 61 74 65 20
        45 53 50 38 32 36
        36 20 66 69 72 6D
        77 61 72 65 20 6C
        6F 63 61 6C 6C 79
   0299 0D                  521 	.db 0x0d
   029A 0A                  522 	.db 0x0a
   029B 20 43 45 52 54 2E   523 	.ascii " CERT.BIN /c  to update TLS certificates locally"
        42 49 4E 20 2F 63
        20 20 74 6F 20 75
        70 64 61 74 65 20
        54 4C 53 20 63 65
        72 74 69 66 69 63
        61 74 65 73 20 6C
        6F 63 61 6C 6C 79
   02CB 0D                  524 	.db 0x0d
   02CC 0A                  525 	.db 0x0a
   02CD 0A                  526 	.db 0x0a
   02CE 20 2F 75 20 53 45   527 	.ascii " /u SERVER PORT FILEPATH  to update ESP8266 firmware remotel"
        52 56 45 52 20 50
        4F 52 54 20 46 49
        4C 45 50 41 54 48
        20 20 74 6F 20 75
        70 64 61 74 65 20
        45 53 50 38 32 36
        36 20 66 69 72 6D
        77 61 72 65 20 72
        65 6D 6F 74 65 6C
   030A 79                  528 	.ascii "y"
   030B 0D                  529 	.db 0x0d
   030C 0A                  530 	.db 0x0a
   030D 20 2F 63 20 53 45   531 	.ascii " /c SERVER PORT FILEPATH  to update TLS certificates remotel"
        52 56 45 52 20 50
        4F 52 54 20 46 49
        4C 45 50 41 54 48
        20 20 74 6F 20 75
        70 64 61 74 65 20
        54 4C 53 20 63 65
        72 74 69 66 69 63
        61 74 65 73 20 72
        65 6D 6F 74 65 6C
   0349 79                  532 	.ascii "y"
   034A 0D                  533 	.db 0x0d
   034B 0A                  534 	.db 0x0a
   034C 0A                  535 	.db 0x0a
   034D 20 2F 74 20 54 49   536 	.ascii " /t TIME  to change the inactivity time in seconds to disabl"
        4D 45 20 20 74 6F
        20 63 68 61 6E 67
        65 20 74 68 65 20
        69 6E 61 63 74 69
        76 69 74 79 20 74
        69 6D 65 20 69 6E
        20 73 65 63 6F 6E
        64 73 20 74 6F 20
        64 69 73 61 62 6C
   0389 65 20 72 61 64 69   537 	.ascii "e radio"
        6F
   0390 0D                  538 	.db 0x0d
   0391 0A                  539 	.db 0x0a
   0392 20 20 20 20 20 20   540 	.ascii "          time range is 0-600 seconds (0 means never disable"
        20 20 20 20 74 69
        6D 65 20 72 61 6E
        67 65 20 69 73 20
        30 2D 36 30 30 20
        73 65 63 6F 6E 64
        73 20 28 30 20 6D
        65 61 6E 73 20 6E
        65 76 65 72 20 64
        69 73 61 62 6C 65
   03CE 29                  541 	.ascii ")"
   03CF 0D                  542 	.db 0x0d
   03D0 0A                  543 	.db 0x0a
   03D1 0A                  544 	.db 0x0a
   03D2 45 78 61 6D 70 6C   545 	.ascii "Example:  CFG8266 /u 192.168.31.1 80 /fw/fw.bin"
        65 3A 20 20 43 46
        47 38 32 36 36 20
        2F 75 20 31 39 32
        2E 31 36 38 2E 33
        31 2E 31 20 38 30
        20 2F 66 77 2F 66
        77 2E 62 69 6E
   0401 0D                  546 	.db 0x0d
   0402 0A                  547 	.db 0x0a
   0403 00                  548 	.db 0x00
   0404                     549 _chFiller2:
   0404 43                  550 	.db #0x43	; 67	'C'
   0405 46                  551 	.db #0x46	; 70	'F'
   0406 47                  552 	.db #0x47	; 71	'G'
   0407 38                  553 	.db #0x38	; 56	'8'
   0408 32                  554 	.db #0x32	; 50	'2'
   0409 36                  555 	.db #0x36	; 54	'6'
   040A 36                  556 	.db #0x36	; 54	'6'
   040B 20                  557 	.db #0x20	; 32
   040C 59                  558 	.db #0x59	; 89	'Y'
   040D 6F                  559 	.db #0x6f	; 111	'o'
   040E 75                  560 	.db #0x75	; 117	'u'
   040F 20                  561 	.db #0x20	; 32
   0410 68                  562 	.db #0x68	; 104	'h'
   0411 61                  563 	.db #0x61	; 97	'a'
   0412 76                  564 	.db #0x76	; 118	'v'
   0413 65                  565 	.db #0x65	; 101	'e'
   0414 20                  566 	.db #0x20	; 32
   0415 61                  567 	.db #0x61	; 97	'a'
   0416 20                  568 	.db #0x20	; 32
   0417 67                  569 	.db #0x67	; 103	'g'
   0418 6F                  570 	.db #0x6f	; 111	'o'
   0419 6F                  571 	.db #0x6f	; 111	'o'
   041A 64                  572 	.db #0x64	; 100	'd'
   041B 20                  573 	.db #0x20	; 32
   041C 74                  574 	.db #0x74	; 116	't'
   041D 69                  575 	.db #0x69	; 105	'i'
   041E 6D                  576 	.db #0x6d	; 109	'm'
   041F 65                  577 	.db #0x65	; 101	'e'
   0420 20                  578 	.db #0x20	; 32
   0421 72                  579 	.db #0x72	; 114	'r'
   0422 65                  580 	.db #0x65	; 101	'e'
   0423 61                  581 	.db #0x61	; 97	'a'
   0424 64                  582 	.db #0x64	; 100	'd'
   0425 69                  583 	.db #0x69	; 105	'i'
   0426 6E                  584 	.db #0x6e	; 110	'n'
   0427 67                  585 	.db #0x67	; 103	'g'
   0428 20                  586 	.db #0x20	; 32
   0429 74                  587 	.db #0x74	; 116	't'
   042A 68                  588 	.db #0x68	; 104	'h'
   042B 69                  589 	.db #0x69	; 105	'i'
   042C 73                  590 	.db #0x73	; 115	's'
   042D 20                  591 	.db #0x20	; 32
   042E 74                  592 	.db #0x74	; 116	't'
   042F 61                  593 	.db #0x61	; 97	'a'
   0430 6C                  594 	.db #0x6c	; 108	'l'
   0431 65                  595 	.db #0x65	; 101	'e'
   0432 20                  596 	.db #0x20	; 32
   0433 6F                  597 	.db #0x6f	; 111	'o'
   0434 66                  598 	.db #0x66	; 102	'f'
   0435 20                  599 	.db #0x20	; 32
   0436 61                  600 	.db #0x61	; 97	'a'
   0437 6E                  601 	.db #0x6e	; 110	'n'
   0438 20                  602 	.db #0x20	; 32
   0439 77                  603 	.db #0x77	; 119	'w'
   043A 65                  604 	.db #0x65	; 101	'e'
   043B 69                  605 	.db #0x69	; 105	'i'
   043C 72                  606 	.db #0x72	; 114	'r'
   043D 64                  607 	.db #0x64	; 100	'd'
   043E 20                  608 	.db #0x20	; 32
   043F 62                  609 	.db #0x62	; 98	'b'
   0440 65                  610 	.db #0x65	; 101	'e'
   0441 68                  611 	.db #0x68	; 104	'h'
   0442 61                  612 	.db #0x61	; 97	'a'
   0443 76                  613 	.db #0x76	; 118	'v'
   0444 69                  614 	.db #0x69	; 105	'i'
   0445 6F                  615 	.db #0x6f	; 111	'o'
   0446 72                  616 	.db #0x72	; 114	'r'
   0447 2C                  617 	.db #0x2c	; 44
   0448 20                  618 	.db #0x20	; 32
   0449 73                  619 	.db #0x73	; 115	's'
   044A 69                  620 	.db #0x69	; 105	'i'
   044B 74                  621 	.db #0x74	; 116	't'
   044C 20                  622 	.db #0x20	; 32
   044D 61                  623 	.db #0x61	; 97	'a'
   044E 6E                  624 	.db #0x6e	; 110	'n'
   044F 64                  625 	.db #0x64	; 100	'd'
   0450 20                  626 	.db #0x20	; 32
   0451 68                  627 	.db #0x68	; 104	'h'
   0452 61                  628 	.db #0x61	; 97	'a'
   0453 76                  629 	.db #0x76	; 118	'v'
   0454 65                  630 	.db #0x65	; 101	'e'
   0455 20                  631 	.db #0x20	; 32
   0456 66                  632 	.db #0x66	; 102	'f'
   0457 75                  633 	.db #0x75	; 117	'u'
   0458 6E                  634 	.db #0x6e	; 110	'n'
   0459 20                  635 	.db #0x20	; 32
   045A 61                  636 	.db #0x61	; 97	'a'
   045B 73                  637 	.db #0x73	; 115	's'
   045C 20                  638 	.db #0x20	; 32
   045D 74                  639 	.db #0x74	; 116	't'
   045E 68                  640 	.db #0x68	; 104	'h'
   045F 69                  641 	.db #0x69	; 105	'i'
   0460 73                  642 	.db #0x73	; 115	's'
   0461 20                  643 	.db #0x20	; 32
   0462 69                  644 	.db #0x69	; 105	'i'
   0463 73                  645 	.db #0x73	; 115	's'
   0464 20                  646 	.db #0x20	; 32
   0465 6F                  647 	.db #0x6f	; 111	'o'
   0466 76                  648 	.db #0x76	; 118	'v'
   0467 65                  649 	.db #0x65	; 101	'e'
   0468 72                  650 	.db #0x72	; 114	'r'
   0469 77                  651 	.db #0x77	; 119	'w'
   046A 72                  652 	.db #0x72	; 114	'r'
   046B 69                  653 	.db #0x69	; 105	'i'
   046C 74                  654 	.db #0x74	; 116	't'
   046D 74                  655 	.db #0x74	; 116	't'
   046E 65                  656 	.db #0x65	; 101	'e'
   046F 6E                  657 	.db #0x6e	; 110	'n'
   0470 21                  658 	.db #0x21	; 33
   0471 0D                  659 	.db #0x0d	; 13
   0472 0A                  660 	.db #0x0a	; 10
   0473 00                  661 	.db #0x00	; 0
   0474 00                  662 	.db #0x00	; 0
   0475 00                  663 	.db #0x00	; 0
   0476 00                  664 	.db #0x00	; 0
   0477 00                  665 	.db #0x00	; 0
   0478 00                  666 	.db #0x00	; 0
   0479 00                  667 	.db #0x00	; 0
   047A 00                  668 	.db #0x00	; 0
   047B 00                  669 	.db #0x00	; 0
   047C 00                  670 	.db #0x00	; 0
   047D 00                  671 	.db #0x00	; 0
   047E 00                  672 	.db #0x00	; 0
   047F 00                  673 	.db #0x00	; 0
   0480 00                  674 	.db #0x00	; 0
   0481 00                  675 	.db #0x00	; 0
   0482 00                  676 	.db #0x00	; 0
   0483 00                  677 	.db #0x00	; 0
                            678 ;src\CFG8266.c:69: unsigned int IsValidInput (char**argv, int argc, unsigned char *cServer, unsigned char *cFile, unsigned char *cPort)
                            679 ;	---------------------------------
                            680 ; Function IsValidInput
                            681 ; ---------------------------------
   0484                     682 _IsValidInput::
   0484 DD E5         [15]  683 	push	ix
   0486 DD 21 00 00   [14]  684 	ld	ix,#0
   048A DD 39         [15]  685 	add	ix,sp
   048C F5            [11]  686 	push	af
   048D F5            [11]  687 	push	af
                            688 ;src\CFG8266.c:71: unsigned int ret = 1;
   048E 01 01 00      [10]  689 	ld	bc, #0x0001
                            690 ;src\CFG8266.c:72: unsigned char * Input = (unsigned char*)argv[0];
   0491 DD 7E 04      [19]  691 	ld	a, 4 (ix)
   0494 DD 77 FC      [19]  692 	ld	-4 (ix), a
   0497 DD 7E 05      [19]  693 	ld	a, 5 (ix)
   049A DD 77 FD      [19]  694 	ld	-3 (ix), a
   049D E1            [10]  695 	pop	hl
   049E E5            [11]  696 	push	hl
   049F 7E            [ 7]  697 	ld	a, (hl)
   04A0 DD 77 FE      [19]  698 	ld	-2 (ix), a
   04A3 23            [ 6]  699 	inc	hl
   04A4 7E            [ 7]  700 	ld	a, (hl)
   04A5 DD 77 FF      [19]  701 	ld	-1 (ix), a
                            702 ;src\CFG8266.c:74: ucScan = 0;
   04A8 21r00r00      [10]  703 	ld	hl,#_ucScan + 0
   04AB 36 00         [10]  704 	ld	(hl), #0x00
                            705 ;src\CFG8266.c:76: if (argc)
   04AD DD 7E 07      [19]  706 	ld	a, 7 (ix)
   04B0 DD B6 06      [19]  707 	or	a, 6 (ix)
   04B3 CAr45r07      [10]  708 	jp	Z, 00162$
                            709 ;src\CFG8266.c:78: if ((argc==1)||(argc==2)||(argc==4))
   04B6 DD 7E 06      [19]  710 	ld	a, 6 (ix)
   04B9 3D            [ 4]  711 	dec	a
   04BA DD B6 07      [19]  712 	or	a, 7 (ix)
   04BD 3E 01         [ 7]  713 	ld	a, #0x01
   04BF 28 01         [12]  714 	jr	Z,00287$
   04C1 AF            [ 4]  715 	xor	a, a
   04C2                     716 00287$:
   04C2 57            [ 4]  717 	ld	d, a
   04C3 B7            [ 4]  718 	or	a, a
   04C4 20 15         [12]  719 	jr	NZ,00156$
   04C6 DD 7E 06      [19]  720 	ld	a, 6 (ix)
   04C9 D6 02         [ 7]  721 	sub	a, #0x02
   04CB DD B6 07      [19]  722 	or	a, 7 (ix)
   04CE 28 0B         [12]  723 	jr	Z,00156$
   04D0 DD 7E 06      [19]  724 	ld	a, 6 (ix)
   04D3 D6 04         [ 7]  725 	sub	a, #0x04
   04D5 DD B6 07      [19]  726 	or	a, 7 (ix)
   04D8 C2r40r07      [10]  727 	jp	NZ,00157$
   04DB                     728 00156$:
                            729 ;src\CFG8266.c:82: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   04DB DD 6E FE      [19]  730 	ld	l, -2 (ix)
   04DE DD 66 FF      [19]  731 	ld	h, -1 (ix)
   04E1 7E            [ 7]  732 	ld	a, (hl)
   04E2 D6 2F         [ 7]  733 	sub	a, #0x2f
   04E4 3E 01         [ 7]  734 	ld	a, #0x01
   04E6 28 01         [12]  735 	jr	Z,00292$
   04E8 AF            [ 4]  736 	xor	a, a
   04E9                     737 00292$:
   04E9 5F            [ 4]  738 	ld	e, a
                            739 ;src\CFG8266.c:80: if ((argc==1)||(argc==2))
   04EA 7A            [ 4]  740 	ld	a, d
   04EB B7            [ 4]  741 	or	a, a
   04EC 20 0B         [12]  742 	jr	NZ,00152$
   04EE DD 7E 06      [19]  743 	ld	a, 6 (ix)
   04F1 D6 02         [ 7]  744 	sub	a, #0x02
   04F3 DD B6 07      [19]  745 	or	a, 7 (ix)
   04F6 C2rFBr05      [10]  746 	jp	NZ,00153$
   04F9                     747 00152$:
                            748 ;src\CFG8266.c:82: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   04F9 7B            [ 4]  749 	ld	a, e
   04FA B7            [ 4]  750 	or	a, a
   04FB 28 18         [12]  751 	jr	Z,00132$
   04FD DD 6E FE      [19]  752 	ld	l, -2 (ix)
   0500 DD 66 FF      [19]  753 	ld	h, -1 (ix)
   0503 23            [ 6]  754 	inc	hl
   0504 7E            [ 7]  755 	ld	a, (hl)
   0505 FE 73         [ 7]  756 	cp	a, #0x73
   0507 28 04         [12]  757 	jr	Z,00131$
   0509 D6 53         [ 7]  758 	sub	a, #0x53
   050B 20 08         [12]  759 	jr	NZ,00132$
   050D                     760 00131$:
                            761 ;src\CFG8266.c:83: ucScan = 1;
   050D 21r00r00      [10]  762 	ld	hl,#_ucScan + 0
   0510 36 01         [10]  763 	ld	(hl), #0x01
   0512 C3r48r07      [10]  764 	jp	00163$
   0515                     765 00132$:
                            766 ;src\CFG8266.c:84: else if ((Input[0]=='/')&&((Input[1]=='n')||(Input[1]=='N')))
   0515 7B            [ 4]  767 	ld	a, e
   0516 B7            [ 4]  768 	or	a, a
   0517 28 18         [12]  769 	jr	Z,00127$
   0519 DD 6E FE      [19]  770 	ld	l, -2 (ix)
   051C DD 66 FF      [19]  771 	ld	h, -1 (ix)
   051F 23            [ 6]  772 	inc	hl
   0520 7E            [ 7]  773 	ld	a, (hl)
   0521 FE 6E         [ 7]  774 	cp	a, #0x6e
   0523 28 04         [12]  775 	jr	Z,00126$
   0525 D6 4E         [ 7]  776 	sub	a, #0x4e
   0527 20 08         [12]  777 	jr	NZ,00127$
   0529                     778 00126$:
                            779 ;src\CFG8266.c:85: ucNagleOff = 1;
   0529 21r09r00      [10]  780 	ld	hl,#_ucNagleOff + 0
   052C 36 01         [10]  781 	ld	(hl), #0x01
   052E C3r48r07      [10]  782 	jp	00163$
   0531                     783 00127$:
                            784 ;src\CFG8266.c:86: else if ((Input[0]=='/')&&((Input[1]=='m')||(Input[1]=='M')))
   0531 7B            [ 4]  785 	ld	a, e
   0532 B7            [ 4]  786 	or	a, a
   0533 28 18         [12]  787 	jr	Z,00122$
   0535 DD 6E FE      [19]  788 	ld	l, -2 (ix)
   0538 DD 66 FF      [19]  789 	ld	h, -1 (ix)
   053B 23            [ 6]  790 	inc	hl
   053C 7E            [ 7]  791 	ld	a, (hl)
   053D FE 6D         [ 7]  792 	cp	a, #0x6d
   053F 28 04         [12]  793 	jr	Z,00121$
   0541 D6 4D         [ 7]  794 	sub	a, #0x4d
   0543 20 08         [12]  795 	jr	NZ,00122$
   0545                     796 00121$:
                            797 ;src\CFG8266.c:87: ucNagleOn = 1;
   0545 21r0Ar00      [10]  798 	ld	hl,#_ucNagleOn + 0
   0548 36 01         [10]  799 	ld	(hl), #0x01
   054A C3r48r07      [10]  800 	jp	00163$
   054D                     801 00122$:
                            802 ;src\CFG8266.c:88: else if ((Input[0]=='/')&&((Input[1]=='o')||(Input[1]=='O')))
   054D 7B            [ 4]  803 	ld	a, e
   054E B7            [ 4]  804 	or	a, a
   054F 28 18         [12]  805 	jr	Z,00117$
   0551 DD 6E FE      [19]  806 	ld	l, -2 (ix)
   0554 DD 66 FF      [19]  807 	ld	h, -1 (ix)
   0557 23            [ 6]  808 	inc	hl
   0558 7E            [ 7]  809 	ld	a, (hl)
   0559 FE 6F         [ 7]  810 	cp	a, #0x6f
   055B 28 04         [12]  811 	jr	Z,00116$
   055D D6 4F         [ 7]  812 	sub	a, #0x4f
   055F 20 08         [12]  813 	jr	NZ,00117$
   0561                     814 00116$:
                            815 ;src\CFG8266.c:89: ucRadioOff = 1;
   0561 21r0Br00      [10]  816 	ld	hl,#_ucRadioOff + 0
   0564 36 01         [10]  817 	ld	(hl), #0x01
   0566 C3r48r07      [10]  818 	jp	00163$
   0569                     819 00117$:
                            820 ;src\CFG8266.c:90: else if ((Input[0]=='/')&&((Input[1]=='t')||(Input[1]=='T')))
   0569 7B            [ 4]  821 	ld	a, e
   056A B7            [ 4]  822 	or	a, a
   056B 28 3E         [12]  823 	jr	Z,00112$
   056D D1            [10]  824 	pop	de
   056E E1            [10]  825 	pop	hl
   056F E5            [11]  826 	push	hl
   0570 D5            [11]  827 	push	de
   0571 23            [ 6]  828 	inc	hl
   0572 7E            [ 7]  829 	ld	a, (hl)
   0573 FE 74         [ 7]  830 	cp	a, #0x74
   0575 28 04         [12]  831 	jr	Z,00111$
   0577 D6 54         [ 7]  832 	sub	a, #0x54
   0579 20 30         [12]  833 	jr	NZ,00112$
   057B                     834 00111$:
                            835 ;src\CFG8266.c:92: ucSetTimeout = 1;
   057B 21r0Cr00      [10]  836 	ld	hl,#_ucSetTimeout + 0
   057E 36 01         [10]  837 	ld	(hl), #0x01
                            838 ;src\CFG8266.c:93: Input = (unsigned char*)argv[1];
   0580 E1            [10]  839 	pop	hl
   0581 E5            [11]  840 	push	hl
   0582 23            [ 6]  841 	inc	hl
   0583 23            [ 6]  842 	inc	hl
   0584 5E            [ 7]  843 	ld	e, (hl)
   0585 23            [ 6]  844 	inc	hl
   0586 56            [ 7]  845 	ld	d, (hl)
                            846 ;src\CFG8266.c:94: uiTimeout = atoi (Input);
   0587 C5            [11]  847 	push	bc
   0588 D5            [11]  848 	push	de
   0589 CDr00r00      [17]  849 	call	_atoi
   058C F1            [10]  850 	pop	af
   058D C1            [10]  851 	pop	bc
   058E 22r0Dr00      [16]  852 	ld	(_uiTimeout), hl
                            853 ;src\CFG8266.c:95: if (uiTimeout > 600)
   0591 3E 58         [ 7]  854 	ld	a, #0x58
   0593 FD 21r0Dr00   [14]  855 	ld	iy, #_uiTimeout
   0597 FD BE 00      [19]  856 	cp	a, 0 (iy)
   059A 3E 02         [ 7]  857 	ld	a, #0x02
   059C FD 9E 01      [19]  858 	sbc	a, 1 (iy)
   059F D2r48r07      [10]  859 	jp	NC, 00163$
                            860 ;src\CFG8266.c:96: uiTimeout = 600;
   05A2 21 58 02      [10]  861 	ld	hl, #0x0258
   05A5 22r0Dr00      [16]  862 	ld	(_uiTimeout), hl
   05A8 C3r48r07      [10]  863 	jp	00163$
   05AB                     864 00112$:
                            865 ;src\CFG8266.c:100: strcpy (cFile,Input);
   05AB C5            [11]  866 	push	bc
   05AC DD 5E 0A      [19]  867 	ld	e, 10 (ix)
   05AF DD 56 0B      [19]  868 	ld	d, 11 (ix)
   05B2 DD 6E FE      [19]  869 	ld	l, -2 (ix)
   05B5 DD 66 FF      [19]  870 	ld	h, -1 (ix)
   05B8 AF            [ 4]  871 	xor	a, a
   05B9                     872 00310$:
   05B9 BE            [ 7]  873 	cp	a, (hl)
   05BA ED A0         [16]  874 	ldi
   05BC 20 FB         [12]  875 	jr	NZ, 00310$
   05BE C1            [10]  876 	pop	bc
                            877 ;src\CFG8266.c:101: ucLocalUpdate = 1;
   05BF 21r07r00      [10]  878 	ld	hl,#_ucLocalUpdate + 0
   05C2 36 01         [10]  879 	ld	(hl), #0x01
                            880 ;src\CFG8266.c:102: if (argc==2)
   05C4 DD 7E 06      [19]  881 	ld	a, 6 (ix)
   05C7 D6 02         [ 7]  882 	sub	a, #0x02
   05C9 DD B6 07      [19]  883 	or	a, 7 (ix)
   05CC 20 25         [12]  884 	jr	NZ,00109$
                            885 ;src\CFG8266.c:104: Input = (unsigned char*)argv[1];
   05CE E1            [10]  886 	pop	hl
   05CF E5            [11]  887 	push	hl
   05D0 23            [ 6]  888 	inc	hl
   05D1 23            [ 6]  889 	inc	hl
   05D2 5E            [ 7]  890 	ld	e, (hl)
   05D3 23            [ 6]  891 	inc	hl
   05D4 56            [ 7]  892 	ld	d, (hl)
                            893 ;src\CFG8266.c:105: if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   05D5 1A            [ 7]  894 	ld	a, (de)
   05D6 D6 2F         [ 7]  895 	sub	a, #0x2f
   05D8 20 13         [12]  896 	jr	NZ,00104$
   05DA EB            [ 4]  897 	ex	de,hl
   05DB 23            [ 6]  898 	inc	hl
   05DC 7E            [ 7]  899 	ld	a, (hl)
   05DD FE 63         [ 7]  900 	cp	a, #0x63
   05DF 28 04         [12]  901 	jr	Z,00103$
   05E1 D6 43         [ 7]  902 	sub	a, #0x43
   05E3 20 08         [12]  903 	jr	NZ,00104$
   05E5                     904 00103$:
                            905 ;src\CFG8266.c:106: ucIsFw=0;
   05E5 21r08r00      [10]  906 	ld	hl,#_ucIsFw + 0
   05E8 36 00         [10]  907 	ld	(hl), #0x00
   05EA C3r48r07      [10]  908 	jp	00163$
   05ED                     909 00104$:
                            910 ;src\CFG8266.c:108: ret=0;
   05ED 01 00 00      [10]  911 	ld	bc, #0x0000
   05F0 C3r48r07      [10]  912 	jp	00163$
   05F3                     913 00109$:
                            914 ;src\CFG8266.c:112: ucIsFw=1;
   05F3 21r08r00      [10]  915 	ld	hl,#_ucIsFw + 0
   05F6 36 01         [10]  916 	ld	(hl), #0x01
   05F8 C3r48r07      [10]  917 	jp	00163$
   05FB                     918 00153$:
                            919 ;src\CFG8266.c:117: if ((Input[0]=='/')&&((Input[1]=='u')||(Input[1]=='U')))
   05FB 7B            [ 4]  920 	ld	a, e
   05FC B7            [ 4]  921 	or	a, a
   05FD CAr9Dr06      [10]  922 	jp	Z, 00148$
   0600 DD 6E FE      [19]  923 	ld	l, -2 (ix)
   0603 DD 66 FF      [19]  924 	ld	h, -1 (ix)
   0606 23            [ 6]  925 	inc	hl
   0607 7E            [ 7]  926 	ld	a, (hl)
   0608 FE 75         [ 7]  927 	cp	a, #0x75
   060A 28 05         [12]  928 	jr	Z,00147$
   060C D6 55         [ 7]  929 	sub	a, #0x55
   060E C2r9Dr06      [10]  930 	jp	NZ,00148$
   0611                     931 00147$:
                            932 ;src\CFG8266.c:119: ucIsFw = 1;
   0611 21r08r00      [10]  933 	ld	hl,#_ucIsFw + 0
   0614 36 01         [10]  934 	ld	(hl), #0x01
                            935 ;src\CFG8266.c:120: Input = (unsigned char*)argv[2];
   0616 E1            [10]  936 	pop	hl
   0617 E5            [11]  937 	push	hl
   0618 11 04 00      [10]  938 	ld	de, #0x0004
   061B 19            [11]  939 	add	hl, de
   061C 5E            [ 7]  940 	ld	e, (hl)
   061D 23            [ 6]  941 	inc	hl
   061E 56            [ 7]  942 	ld	d, (hl)
                            943 ;src\CFG8266.c:121: if (strlen (Input)<7)
   061F C5            [11]  944 	push	bc
   0620 D5            [11]  945 	push	de
   0621 CDr00r00      [17]  946 	call	_strlen
   0624 F1            [10]  947 	pop	af
   0625 C1            [10]  948 	pop	bc
   0626 7D            [ 4]  949 	ld	a, l
   0627 D6 07         [ 7]  950 	sub	a, #0x07
   0629 7C            [ 4]  951 	ld	a, h
   062A DE 00         [ 7]  952 	sbc	a, #0x00
   062C 30 69         [12]  953 	jr	NC,00137$
                            954 ;src\CFG8266.c:123: strcpy(cPort,Input);
   062E C5            [11]  955 	push	bc
   062F EB            [ 4]  956 	ex	de,hl
   0630 DD 5E 0C      [19]  957 	ld	e, 12 (ix)
   0633 DD 56 0D      [19]  958 	ld	d, 13 (ix)
   0636 AF            [ 4]  959 	xor	a, a
   0637                     960 00321$:
   0637 BE            [ 7]  961 	cp	a, (hl)
   0638 ED A0         [16]  962 	ldi
   063A 20 FB         [12]  963 	jr	NZ, 00321$
   063C C1            [10]  964 	pop	bc
                            965 ;src\CFG8266.c:124: Input = (unsigned char*)argv[1];
   063D E1            [10]  966 	pop	hl
   063E E5            [11]  967 	push	hl
   063F 23            [ 6]  968 	inc	hl
   0640 23            [ 6]  969 	inc	hl
   0641 5E            [ 7]  970 	ld	e, (hl)
   0642 23            [ 6]  971 	inc	hl
   0643 66            [ 7]  972 	ld	h, (hl)
                            973 ;src\CFG8266.c:125: strcpy(cServer,Input);
   0644 C5            [11]  974 	push	bc
   0645 6B            [ 4]  975 	ld	l, e
   0646 DD 5E 08      [19]  976 	ld	e, 8 (ix)
   0649 DD 56 09      [19]  977 	ld	d, 9 (ix)
   064C AF            [ 4]  978 	xor	a, a
   064D                     979 00322$:
   064D BE            [ 7]  980 	cp	a, (hl)
   064E ED A0         [16]  981 	ldi
   0650 20 FB         [12]  982 	jr	NZ, 00322$
   0652 C1            [10]  983 	pop	bc
                            984 ;src\CFG8266.c:126: Input = (unsigned char*)argv[3];
   0653 E1            [10]  985 	pop	hl
   0654 E5            [11]  986 	push	hl
   0655 11 06 00      [10]  987 	ld	de, #0x0006
   0658 19            [11]  988 	add	hl, de
   0659 5E            [ 7]  989 	ld	e, (hl)
   065A 23            [ 6]  990 	inc	hl
   065B 66            [ 7]  991 	ld	h, (hl)
                            992 ;src\CFG8266.c:127: strcpy(cFile,Input);
   065C C5            [11]  993 	push	bc
   065D 6B            [ 4]  994 	ld	l, e
   065E DD 5E 0A      [19]  995 	ld	e, 10 (ix)
   0661 DD 56 0B      [19]  996 	ld	d, 11 (ix)
   0664 AF            [ 4]  997 	xor	a, a
   0665                     998 00323$:
   0665 BE            [ 7]  999 	cp	a, (hl)
   0666 ED A0         [16] 1000 	ldi
   0668 20 FB         [12] 1001 	jr	NZ, 00323$
   066A DD 6E 0C      [19] 1002 	ld	l, 12 (ix)
   066D DD 66 0D      [19] 1003 	ld	h, 13 (ix)
   0670 E5            [11] 1004 	push	hl
   0671 CDr00r00      [17] 1005 	call	_atol
   0674 F1            [10] 1006 	pop	af
   0675 DD 75 FC      [19] 1007 	ld	-4 (ix), l
   0678 DD 74 FD      [19] 1008 	ld	-3 (ix), h
   067B DD 73 FE      [19] 1009 	ld	-2 (ix), e
   067E DD 72 FF      [19] 1010 	ld	-1 (ix), d
   0681 11r03r00      [10] 1011 	ld	de, #_lPort
   0684 21 02 00      [10] 1012 	ld	hl, #2
   0687 39            [11] 1013 	add	hl, sp
   0688 01 04 00      [10] 1014 	ld	bc, #4
   068B ED B0         [21] 1015 	ldir
   068D C1            [10] 1016 	pop	bc
                           1017 ;src\CFG8266.c:129: uiPort = (lPort&0xffff);
   068E 2Ar03r00      [16] 1018 	ld	hl, (_lPort)
   0691 22r01r00      [16] 1019 	ld	(_uiPort), hl
   0694 C3r48r07      [10] 1020 	jp	00163$
   0697                    1021 00137$:
                           1022 ;src\CFG8266.c:132: ret = 0;
   0697 01 00 00      [10] 1023 	ld	bc, #0x0000
   069A C3r48r07      [10] 1024 	jp	00163$
   069D                    1025 00148$:
                           1026 ;src\CFG8266.c:134: else if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   069D 7B            [ 4] 1027 	ld	a, e
   069E B7            [ 4] 1028 	or	a, a
   069F CAr3Br07      [10] 1029 	jp	Z, 00143$
   06A2 D1            [10] 1030 	pop	de
   06A3 E1            [10] 1031 	pop	hl
   06A4 E5            [11] 1032 	push	hl
   06A5 D5            [11] 1033 	push	de
   06A6 23            [ 6] 1034 	inc	hl
   06A7 7E            [ 7] 1035 	ld	a, (hl)
   06A8 FE 63         [ 7] 1036 	cp	a, #0x63
   06AA 28 05         [12] 1037 	jr	Z,00142$
   06AC D6 43         [ 7] 1038 	sub	a, #0x43
   06AE C2r3Br07      [10] 1039 	jp	NZ,00143$
   06B1                    1040 00142$:
                           1041 ;src\CFG8266.c:136: ucIsFw = 0;
   06B1 21r08r00      [10] 1042 	ld	hl,#_ucIsFw + 0
   06B4 36 00         [10] 1043 	ld	(hl), #0x00
                           1044 ;src\CFG8266.c:137: Input = (unsigned char*)argv[2];
   06B6 E1            [10] 1045 	pop	hl
   06B7 E5            [11] 1046 	push	hl
   06B8 11 04 00      [10] 1047 	ld	de, #0x0004
   06BB 19            [11] 1048 	add	hl, de
   06BC 5E            [ 7] 1049 	ld	e, (hl)
   06BD 23            [ 6] 1050 	inc	hl
   06BE 56            [ 7] 1051 	ld	d, (hl)
                           1052 ;src\CFG8266.c:138: if (strlen (Input)<7)
   06BF C5            [11] 1053 	push	bc
   06C0 D5            [11] 1054 	push	de
   06C1 CDr00r00      [17] 1055 	call	_strlen
   06C4 F1            [10] 1056 	pop	af
   06C5 C1            [10] 1057 	pop	bc
   06C6 7D            [ 4] 1058 	ld	a, l
   06C7 D6 07         [ 7] 1059 	sub	a, #0x07
   06C9 7C            [ 4] 1060 	ld	a, h
   06CA DE 00         [ 7] 1061 	sbc	a, #0x00
   06CC 30 68         [12] 1062 	jr	NC,00140$
                           1063 ;src\CFG8266.c:140: strcpy(cPort,Input);
   06CE C5            [11] 1064 	push	bc
   06CF EB            [ 4] 1065 	ex	de,hl
   06D0 DD 5E 0C      [19] 1066 	ld	e, 12 (ix)
   06D3 DD 56 0D      [19] 1067 	ld	d, 13 (ix)
   06D6 AF            [ 4] 1068 	xor	a, a
   06D7                    1069 00327$:
   06D7 BE            [ 7] 1070 	cp	a, (hl)
   06D8 ED A0         [16] 1071 	ldi
   06DA 20 FB         [12] 1072 	jr	NZ, 00327$
   06DC C1            [10] 1073 	pop	bc
                           1074 ;src\CFG8266.c:141: Input = (unsigned char*)argv[1];
   06DD E1            [10] 1075 	pop	hl
   06DE E5            [11] 1076 	push	hl
   06DF 23            [ 6] 1077 	inc	hl
   06E0 23            [ 6] 1078 	inc	hl
   06E1 5E            [ 7] 1079 	ld	e, (hl)
   06E2 23            [ 6] 1080 	inc	hl
   06E3 66            [ 7] 1081 	ld	h, (hl)
                           1082 ;src\CFG8266.c:142: strcpy(cServer,Input);
   06E4 C5            [11] 1083 	push	bc
   06E5 6B            [ 4] 1084 	ld	l, e
   06E6 DD 5E 08      [19] 1085 	ld	e, 8 (ix)
   06E9 DD 56 09      [19] 1086 	ld	d, 9 (ix)
   06EC AF            [ 4] 1087 	xor	a, a
   06ED                    1088 00328$:
   06ED BE            [ 7] 1089 	cp	a, (hl)
   06EE ED A0         [16] 1090 	ldi
   06F0 20 FB         [12] 1091 	jr	NZ, 00328$
   06F2 C1            [10] 1092 	pop	bc
                           1093 ;src\CFG8266.c:143: Input = (unsigned char*)argv[3];
   06F3 E1            [10] 1094 	pop	hl
   06F4 E5            [11] 1095 	push	hl
   06F5 11 06 00      [10] 1096 	ld	de, #0x0006
   06F8 19            [11] 1097 	add	hl, de
   06F9 5E            [ 7] 1098 	ld	e, (hl)
   06FA 23            [ 6] 1099 	inc	hl
   06FB 66            [ 7] 1100 	ld	h, (hl)
                           1101 ;src\CFG8266.c:144: strcpy(cFile,Input);
   06FC C5            [11] 1102 	push	bc
   06FD 6B            [ 4] 1103 	ld	l, e
   06FE DD 5E 0A      [19] 1104 	ld	e, 10 (ix)
   0701 DD 56 0B      [19] 1105 	ld	d, 11 (ix)
   0704 AF            [ 4] 1106 	xor	a, a
   0705                    1107 00329$:
   0705 BE            [ 7] 1108 	cp	a, (hl)
   0706 ED A0         [16] 1109 	ldi
   0708 20 FB         [12] 1110 	jr	NZ, 00329$
   070A DD 6E 0C      [19] 1111 	ld	l, 12 (ix)
   070D DD 66 0D      [19] 1112 	ld	h, 13 (ix)
   0710 E5            [11] 1113 	push	hl
   0711 CDr00r00      [17] 1114 	call	_atol
   0714 F1            [10] 1115 	pop	af
   0715 DD 75 FC      [19] 1116 	ld	-4 (ix), l
   0718 DD 74 FD      [19] 1117 	ld	-3 (ix), h
   071B DD 73 FE      [19] 1118 	ld	-2 (ix), e
   071E DD 72 FF      [19] 1119 	ld	-1 (ix), d
   0721 11r03r00      [10] 1120 	ld	de, #_lPort
   0724 21 02 00      [10] 1121 	ld	hl, #2
   0727 39            [11] 1122 	add	hl, sp
   0728 01 04 00      [10] 1123 	ld	bc, #4
   072B ED B0         [21] 1124 	ldir
   072D C1            [10] 1125 	pop	bc
                           1126 ;src\CFG8266.c:146: uiPort = (lPort&0xffff);
   072E 2Ar03r00      [16] 1127 	ld	hl, (_lPort)
   0731 22r01r00      [16] 1128 	ld	(_uiPort), hl
   0734 18 12         [12] 1129 	jr	00163$
   0736                    1130 00140$:
                           1131 ;src\CFG8266.c:149: ret = 0;
   0736 01 00 00      [10] 1132 	ld	bc, #0x0000
   0739 18 0D         [12] 1133 	jr	00163$
   073B                    1134 00143$:
                           1135 ;src\CFG8266.c:152: ret = 0;
   073B 01 00 00      [10] 1136 	ld	bc, #0x0000
   073E 18 08         [12] 1137 	jr	00163$
   0740                    1138 00157$:
                           1139 ;src\CFG8266.c:156: ret = 0;
   0740 01 00 00      [10] 1140 	ld	bc, #0x0000
   0743 18 03         [12] 1141 	jr	00163$
   0745                    1142 00162$:
                           1143 ;src\CFG8266.c:159: ret=0;
   0745 01 00 00      [10] 1144 	ld	bc, #0x0000
   0748                    1145 00163$:
                           1146 ;src\CFG8266.c:161: return ret;
   0748 69            [ 4] 1147 	ld	l, c
   0749 60            [ 4] 1148 	ld	h, b
                           1149 ;src\CFG8266.c:162: }
   074A DD F9         [10] 1150 	ld	sp, ix
   074C DD E1         [14] 1151 	pop	ix
   074E C9            [10] 1152 	ret
                           1153 ;src\CFG8266.c:164: void TxByte(char chTxByte)
                           1154 ;	---------------------------------
                           1155 ; Function TxByte
                           1156 ; ---------------------------------
   074F                    1157 _TxByte::
                           1158 ;src\CFG8266.c:166: while (myPort7&2);
   074F                    1159 00101$:
   074F DB 07         [11] 1160 	in	a, (_myPort7)
   0751 CB 4F         [ 8] 1161 	bit	1, a
   0753 20 FA         [12] 1162 	jr	NZ,00101$
                           1163 ;src\CFG8266.c:170: myPort7 = chTxByte;
   0755 21 02 00      [10] 1164 	ld	hl, #2+0
   0758 39            [11] 1165 	add	hl, sp
   0759 7E            [ 7] 1166 	ld	a, (hl)
   075A D3 07         [11] 1167 	out	(_myPort7), a
                           1168 ;src\CFG8266.c:171: }
   075C C9            [10] 1169 	ret
                           1170 ;src\CFG8266.c:173: char *ultostr(unsigned long value, char *ptr, int base)
                           1171 ;	---------------------------------
                           1172 ; Function ultostr
                           1173 ; ---------------------------------
   075D                    1174 _ultostr::
   075D DD E5         [15] 1175 	push	ix
   075F DD 21 00 00   [14] 1176 	ld	ix,#0
   0763 DD 39         [15] 1177 	add	ix,sp
   0765 21 F4 FF      [10] 1178 	ld	hl, #-12
   0768 39            [11] 1179 	add	hl, sp
   0769 F9            [ 6] 1180 	ld	sp, hl
                           1181 ;src\CFG8266.c:176: unsigned long tmp = value;
   076A DD 4E 04      [19] 1182 	ld	c, 4 (ix)
   076D DD 46 05      [19] 1183 	ld	b, 5 (ix)
   0770 DD 5E 06      [19] 1184 	ld	e, 6 (ix)
   0773 DD 56 07      [19] 1185 	ld	d, 7 (ix)
                           1186 ;src\CFG8266.c:179: if (NULL == ptr) //if null pointer
   0776 DD 7E 09      [19] 1187 	ld	a, 9 (ix)
   0779 DD B6 08      [19] 1188 	or	a, 8 (ix)
   077C 20 06         [12] 1189 	jr	NZ,00102$
                           1190 ;src\CFG8266.c:180: return NULL; //nothing to do
   077E 21 00 00      [10] 1191 	ld	hl, #0x0000
   0781 C3rC6r08      [10] 1192 	jp	00118$
   0784                    1193 00102$:
                           1194 ;src\CFG8266.c:188: tmp = tmp/base;
   0784 DD 7E 0A      [19] 1195 	ld	a, 10 (ix)
   0787 DD 77 F8      [19] 1196 	ld	-8 (ix), a
   078A DD 7E 0B      [19] 1197 	ld	a, 11 (ix)
   078D DD 77 F9      [19] 1198 	ld	-7 (ix), a
   0790 17            [ 4] 1199 	rla
   0791 9F            [ 4] 1200 	sbc	a, a
   0792 DD 77 FA      [19] 1201 	ld	-6 (ix), a
   0795 DD 77 FB      [19] 1202 	ld	-5 (ix), a
                           1203 ;src\CFG8266.c:182: if (tmp == 0) //if value is zero
   0798 7A            [ 4] 1204 	ld	a, d
   0799 B3            [ 4] 1205 	or	a, e
   079A B0            [ 4] 1206 	or	a, b
   079B B1            [ 4] 1207 	or	a, c
   079C 20 04         [12] 1208 	jr	NZ,00123$
                           1209 ;src\CFG8266.c:183: ++count; //one digit
   079E 0E 01         [ 7] 1210 	ld	c, #0x01
   07A0 18 2B         [12] 1211 	jr	00108$
                           1212 ;src\CFG8266.c:186: while(tmp > 0)
   07A2                    1213 00123$:
   07A2 AF            [ 4] 1214 	xor	a, a
   07A3 DD 77 FF      [19] 1215 	ld	-1 (ix), a
   07A6                    1216 00103$:
   07A6 7A            [ 4] 1217 	ld	a, d
   07A7 B3            [ 4] 1218 	or	a, e
   07A8 B0            [ 4] 1219 	or	a, b
   07A9 B1            [ 4] 1220 	or	a, c
   07AA 28 1E         [12] 1221 	jr	Z,00129$
                           1222 ;src\CFG8266.c:188: tmp = tmp/base;
   07AC DD 6E FA      [19] 1223 	ld	l, -6 (ix)
   07AF DD 66 FB      [19] 1224 	ld	h, -5 (ix)
   07B2 E5            [11] 1225 	push	hl
   07B3 DD 6E F8      [19] 1226 	ld	l, -8 (ix)
   07B6 DD 66 F9      [19] 1227 	ld	h, -7 (ix)
   07B9 E5            [11] 1228 	push	hl
   07BA D5            [11] 1229 	push	de
   07BB C5            [11] 1230 	push	bc
   07BC CDr00r00      [17] 1231 	call	__divulong
   07BF F1            [10] 1232 	pop	af
   07C0 F1            [10] 1233 	pop	af
   07C1 F1            [10] 1234 	pop	af
   07C2 F1            [10] 1235 	pop	af
   07C3 4D            [ 4] 1236 	ld	c, l
   07C4 44            [ 4] 1237 	ld	b, h
                           1238 ;src\CFG8266.c:189: ++count;
   07C5 DD 34 FF      [23] 1239 	inc	-1 (ix)
   07C8 18 DC         [12] 1240 	jr	00103$
   07CA                    1241 00129$:
   07CA DD 4E FF      [19] 1242 	ld	c, -1 (ix)
   07CD                    1243 00108$:
                           1244 ;src\CFG8266.c:193: ptr += count; // so, after the LSB
   07CD DD 7E 08      [19] 1245 	ld	a, 8 (ix)
   07D0 81            [ 4] 1246 	add	a, c
   07D1 DD 77 08      [19] 1247 	ld	8 (ix), a
   07D4 30 03         [12] 1248 	jr	NC,00166$
   07D6 DD 34 09      [23] 1249 	inc	9 (ix)
   07D9                    1250 00166$:
                           1251 ;src\CFG8266.c:194: *ptr = '\0'; // null terminator
   07D9 DD 4E 08      [19] 1252 	ld	c, 8 (ix)
   07DC DD 46 09      [19] 1253 	ld	b, 9 (ix)
   07DF AF            [ 4] 1254 	xor	a, a
   07E0 02            [ 7] 1255 	ld	(bc), a
                           1256 ;src\CFG8266.c:196: do
   07E1                    1257 00115$:
                           1258 ;src\CFG8266.c:198: t = value / base; // useful now (find remainder) as well later (next value of value)
   07E1 DD 6E FA      [19] 1259 	ld	l, -6 (ix)
   07E4 DD 66 FB      [19] 1260 	ld	h, -5 (ix)
   07E7 E5            [11] 1261 	push	hl
   07E8 DD 6E F8      [19] 1262 	ld	l, -8 (ix)
   07EB DD 66 F9      [19] 1263 	ld	h, -7 (ix)
   07EE E5            [11] 1264 	push	hl
   07EF DD 6E 06      [19] 1265 	ld	l, 6 (ix)
   07F2 DD 66 07      [19] 1266 	ld	h, 7 (ix)
   07F5 E5            [11] 1267 	push	hl
   07F6 DD 6E 04      [19] 1268 	ld	l, 4 (ix)
   07F9 DD 66 05      [19] 1269 	ld	h, 5 (ix)
   07FC E5            [11] 1270 	push	hl
   07FD CDr00r00      [17] 1271 	call	__divulong
   0800 F1            [10] 1272 	pop	af
   0801 F1            [10] 1273 	pop	af
   0802 F1            [10] 1274 	pop	af
   0803 F1            [10] 1275 	pop	af
   0804 4D            [ 4] 1276 	ld	c, l
   0805 44            [ 4] 1277 	ld	b, h
                           1278 ;src\CFG8266.c:199: res = value - base * t; // get what remains of dividing base
   0806 C5            [11] 1279 	push	bc
   0807 D5            [11] 1280 	push	de
   0808 D5            [11] 1281 	push	de
   0809 C5            [11] 1282 	push	bc
   080A DD 6E FA      [19] 1283 	ld	l, -6 (ix)
   080D DD 66 FB      [19] 1284 	ld	h, -5 (ix)
   0810 E5            [11] 1285 	push	hl
   0811 DD 6E F8      [19] 1286 	ld	l, -8 (ix)
   0814 DD 66 F9      [19] 1287 	ld	h, -7 (ix)
   0817 E5            [11] 1288 	push	hl
   0818 CDr00r00      [17] 1289 	call	__mullong
   081B F1            [10] 1290 	pop	af
   081C F1            [10] 1291 	pop	af
   081D F1            [10] 1292 	pop	af
   081E F1            [10] 1293 	pop	af
   081F DD 75 F4      [19] 1294 	ld	-12 (ix), l
   0822 DD 74 F5      [19] 1295 	ld	-11 (ix), h
   0825 DD 73 F6      [19] 1296 	ld	-10 (ix), e
   0828 DD 72 F7      [19] 1297 	ld	-9 (ix), d
   082B D1            [10] 1298 	pop	de
   082C C1            [10] 1299 	pop	bc
   082D DD 7E 04      [19] 1300 	ld	a, 4 (ix)
   0830 DD 96 F4      [19] 1301 	sub	a, -12 (ix)
   0833 DD 77 FC      [19] 1302 	ld	-4 (ix), a
   0836 DD 7E 05      [19] 1303 	ld	a, 5 (ix)
   0839 DD 9E F5      [19] 1304 	sbc	a, -11 (ix)
   083C DD 77 FD      [19] 1305 	ld	-3 (ix), a
   083F DD 7E 06      [19] 1306 	ld	a, 6 (ix)
   0842 DD 9E F6      [19] 1307 	sbc	a, -10 (ix)
   0845 DD 77 FE      [19] 1308 	ld	-2 (ix), a
   0848 DD 7E 07      [19] 1309 	ld	a, 7 (ix)
   084B DD 9E F7      [19] 1310 	sbc	a, -9 (ix)
   084E DD 77 FF      [19] 1311 	ld	-1 (ix), a
                           1312 ;src\CFG8266.c:201: if (res < 10)
   0851 DD 7E FC      [19] 1313 	ld	a, -4 (ix)
   0854 D6 0A         [ 7] 1314 	sub	a, #0x0a
   0856 DD 7E FD      [19] 1315 	ld	a, -3 (ix)
   0859 DE 00         [ 7] 1316 	sbc	a, #0x00
   085B DD 7E FE      [19] 1317 	ld	a, -2 (ix)
   085E DE 00         [ 7] 1318 	sbc	a, #0x00
   0860 DD 7E FF      [19] 1319 	ld	a, -1 (ix)
   0863 DE 00         [ 7] 1320 	sbc	a, #0x00
   0865 3E 00         [ 7] 1321 	ld	a, #0x00
   0867 17            [ 4] 1322 	rla
   0868 B7            [ 4] 1323 	or	a, a
   0869 28 15         [12] 1324 	jr	Z,00113$
                           1325 ;src\CFG8266.c:202: * -- ptr = '0' + res; // convert the remainder to ASCII and put in the current position of pointer, move pointer after operation
   086B DD 6E 08      [19] 1326 	ld	l, 8 (ix)
   086E DD 66 09      [19] 1327 	ld	h, 9 (ix)
   0871 2B            [ 6] 1328 	dec	hl
   0872 DD 75 08      [19] 1329 	ld	8 (ix), l
   0875 DD 74 09      [19] 1330 	ld	9 (ix), h
   0878 DD 7E FC      [19] 1331 	ld	a, -4 (ix)
   087B C6 30         [ 7] 1332 	add	a, #0x30
   087D 77            [ 7] 1333 	ld	(hl), a
   087E 18 2D         [12] 1334 	jr	00116$
   0880                    1335 00113$:
                           1336 ;src\CFG8266.c:203: else if ((res >= 10) && (res < 16)) // Otherwise is a HEX value and a digit above 9
   0880 CB 47         [ 8] 1337 	bit	0, a
   0882 20 29         [12] 1338 	jr	NZ,00116$
   0884 DD 7E FC      [19] 1339 	ld	a, -4 (ix)
   0887 D6 10         [ 7] 1340 	sub	a, #0x10
   0889 DD 7E FD      [19] 1341 	ld	a, -3 (ix)
   088C DE 00         [ 7] 1342 	sbc	a, #0x00
   088E DD 7E FE      [19] 1343 	ld	a, -2 (ix)
   0891 DE 00         [ 7] 1344 	sbc	a, #0x00
   0893 DD 7E FF      [19] 1345 	ld	a, -1 (ix)
   0896 DE 00         [ 7] 1346 	sbc	a, #0x00
   0898 30 13         [12] 1347 	jr	NC,00116$
                           1348 ;src\CFG8266.c:204: * --ptr = 'A' - 10 + res; // convert the remainder to ASCII and put in the current position of pointer, move pointer after operation
   089A DD 6E 08      [19] 1349 	ld	l, 8 (ix)
   089D DD 66 09      [19] 1350 	ld	h, 9 (ix)
   08A0 2B            [ 6] 1351 	dec	hl
   08A1 DD 75 08      [19] 1352 	ld	8 (ix), l
   08A4 DD 74 09      [19] 1353 	ld	9 (ix), h
   08A7 DD 7E FC      [19] 1354 	ld	a, -4 (ix)
   08AA C6 37         [ 7] 1355 	add	a, #0x37
   08AC 77            [ 7] 1356 	ld	(hl), a
   08AD                    1357 00116$:
                           1358 ;src\CFG8266.c:205: } while ((value = t) != 0); //value is now t, and if t is other than zero, still work to do
   08AD DD 71 04      [19] 1359 	ld	4 (ix), c
   08B0 DD 70 05      [19] 1360 	ld	5 (ix), b
   08B3 DD 73 06      [19] 1361 	ld	6 (ix), e
   08B6 DD 72 07      [19] 1362 	ld	7 (ix), d
   08B9 7A            [ 4] 1363 	ld	a, d
   08BA B3            [ 4] 1364 	or	a, e
   08BB B0            [ 4] 1365 	or	a, b
   08BC B1            [ 4] 1366 	or	a, c
   08BD C2rE1r07      [10] 1367 	jp	NZ, 00115$
                           1368 ;src\CFG8266.c:207: return(ptr); // and return own pointer as successful conversion has been made
   08C0 DD 6E 08      [19] 1369 	ld	l, 8 (ix)
   08C3 DD 66 09      [19] 1370 	ld	h, 9 (ix)
   08C6                    1371 00118$:
                           1372 ;src\CFG8266.c:208: }
   08C6 DD F9         [10] 1373 	ld	sp, ix
   08C8 DD E1         [14] 1374 	pop	ix
   08CA C9            [10] 1375 	ret
                           1376 ;src\CFG8266.c:210: bool WaitForRXData(unsigned char *uchData, unsigned int uiDataSize, unsigned int Timeout, bool bVerbose, bool bShowReceivedData, unsigned char *uchData2, unsigned int uiDataSize2)
                           1377 ;	---------------------------------
                           1378 ; Function WaitForRXData
                           1379 ; ---------------------------------
   08CB                    1380 _WaitForRXData::
   08CB DD E5         [15] 1381 	push	ix
   08CD DD 21 00 00   [14] 1382 	ld	ix,#0
   08D1 DD 39         [15] 1383 	add	ix,sp
   08D3 21 EE FF      [10] 1384 	ld	hl, #-18
   08D6 39            [11] 1385 	add	hl, sp
   08D7 F9            [ 6] 1386 	ld	sp, hl
                           1387 ;src\CFG8266.c:212: bool bReturn = false;
   08D8 AF            [ 4] 1388 	xor	a, a
   08D9 DD 77 F0      [19] 1389 	ld	-16 (ix), a
                           1390 ;src\CFG8266.c:217: unsigned int i = 0;
   08DC AF            [ 4] 1391 	xor	a, a
   08DD DD 77 FE      [19] 1392 	ld	-2 (ix), a
   08E0 DD 77 FF      [19] 1393 	ld	-1 (ix), a
                           1394 ;src\CFG8266.c:219: if (bShowReceivedData)
   08E3 DD 7E 0B      [19] 1395 	ld	a, 11 (ix)
   08E6 B7            [ 4] 1396 	or	a, a
   08E7 28 6B         [12] 1397 	jr	Z,00104$
                           1398 ;src\CFG8266.c:221: printf ("Waiting for: ");
   08E9 21r6Er0B      [10] 1399 	ld	hl, #___str_2
   08EC E5            [11] 1400 	push	hl
   08ED CDr00r00      [17] 1401 	call	_printf
   08F0 F1            [10] 1402 	pop	af
                           1403 ;src\CFG8266.c:222: for (i=0;i<uiDataSize;++i)
   08F1 01 00 00      [10] 1404 	ld	bc, #0x0000
   08F4                    1405 00144$:
   08F4 79            [ 4] 1406 	ld	a, c
   08F5 DD 96 06      [19] 1407 	sub	a, 6 (ix)
   08F8 78            [ 4] 1408 	ld	a, b
   08F9 DD 9E 07      [19] 1409 	sbc	a, 7 (ix)
   08FC 30 19         [12] 1410 	jr	NC,00101$
                           1411 ;src\CFG8266.c:223: printf("%c",uchData[i]);
   08FE DD 6E 04      [19] 1412 	ld	l, 4 (ix)
   0901 DD 66 05      [19] 1413 	ld	h, 5 (ix)
   0904 09            [11] 1414 	add	hl, bc
   0905 5E            [ 7] 1415 	ld	e, (hl)
   0906 16 00         [ 7] 1416 	ld	d, #0x00
   0908 C5            [11] 1417 	push	bc
   0909 D5            [11] 1418 	push	de
   090A 21r7Cr0B      [10] 1419 	ld	hl, #___str_3
   090D E5            [11] 1420 	push	hl
   090E CDr00r00      [17] 1421 	call	_printf
   0911 F1            [10] 1422 	pop	af
   0912 F1            [10] 1423 	pop	af
   0913 C1            [10] 1424 	pop	bc
                           1425 ;src\CFG8266.c:222: for (i=0;i<uiDataSize;++i)
   0914 03            [ 6] 1426 	inc	bc
   0915 18 DD         [12] 1427 	jr	00144$
   0917                    1428 00101$:
                           1429 ;src\CFG8266.c:224: printf (" / ");
   0917 21r7Fr0B      [10] 1430 	ld	hl, #___str_4
   091A E5            [11] 1431 	push	hl
   091B CDr00r00      [17] 1432 	call	_printf
   091E F1            [10] 1433 	pop	af
                           1434 ;src\CFG8266.c:225: for (i=0;i<uiDataSize;++i)
   091F 01 00 00      [10] 1435 	ld	bc, #0x0000
   0922                    1436 00147$:
   0922 79            [ 4] 1437 	ld	a, c
   0923 DD 96 06      [19] 1438 	sub	a, 6 (ix)
   0926 78            [ 4] 1439 	ld	a, b
   0927 DD 9E 07      [19] 1440 	sbc	a, 7 (ix)
   092A 30 19         [12] 1441 	jr	NC,00102$
                           1442 ;src\CFG8266.c:226: printf("{%x}",uchData[i]);
   092C DD 6E 04      [19] 1443 	ld	l, 4 (ix)
   092F DD 66 05      [19] 1444 	ld	h, 5 (ix)
   0932 09            [11] 1445 	add	hl, bc
   0933 5E            [ 7] 1446 	ld	e, (hl)
   0934 16 00         [ 7] 1447 	ld	d, #0x00
   0936 C5            [11] 1448 	push	bc
   0937 D5            [11] 1449 	push	de
   0938 21r83r0B      [10] 1450 	ld	hl, #___str_5
   093B E5            [11] 1451 	push	hl
   093C CDr00r00      [17] 1452 	call	_printf
   093F F1            [10] 1453 	pop	af
   0940 F1            [10] 1454 	pop	af
   0941 C1            [10] 1455 	pop	bc
                           1456 ;src\CFG8266.c:225: for (i=0;i<uiDataSize;++i)
   0942 03            [ 6] 1457 	inc	bc
   0943 18 DD         [12] 1458 	jr	00147$
   0945                    1459 00102$:
                           1460 ;src\CFG8266.c:227: printf ("\r\n");
   0945 21r88r0B      [10] 1461 	ld	hl, #___str_7
   0948 E5            [11] 1462 	push	hl
   0949 CDr00r00      [17] 1463 	call	_puts
   094C F1            [10] 1464 	pop	af
                           1465 ;src\CFG8266.c:228: i = 0;
   094D AF            [ 4] 1466 	xor	a, a
   094E DD 77 FE      [19] 1467 	ld	-2 (ix), a
   0951 DD 77 FF      [19] 1468 	ld	-1 (ix), a
   0954                    1469 00104$:
                           1470 ;src\CFG8266.c:231: Timeout1 = TickCount + 9; //Drives the animation every 9 ticks or so
   0954 FD 21 9E FC   [14] 1471 	ld	iy, #_TickCount
   0958 FD 7E 00      [19] 1472 	ld	a, 0 (iy)
   095B C6 09         [ 7] 1473 	add	a, #0x09
   095D DD 77 F1      [19] 1474 	ld	-15 (ix), a
   0960 FD 7E 01      [19] 1475 	ld	a, 1 (iy)
   0963 CE 00         [ 7] 1476 	adc	a, #0x00
   0965 DD 77 F2      [19] 1477 	ld	-14 (ix), a
                           1478 ;src\CFG8266.c:232: Timeout2 = TickCount + Timeout; //Wait up to 5 minutes
   0968 FD 7E 00      [19] 1479 	ld	a, 0 (iy)
   096B DD 86 08      [19] 1480 	add	a, 8 (ix)
   096E 4F            [ 4] 1481 	ld	c, a
   096F FD 7E 01      [19] 1482 	ld	a, 1 (iy)
   0972 DD 8E 09      [19] 1483 	adc	a, 9 (ix)
   0975 47            [ 4] 1484 	ld	b, a
   0976 DD 71 F3      [19] 1485 	ld	-13 (ix), c
   0979 DD 70 F4      [19] 1486 	ld	-12 (ix), b
                           1487 ;src\CFG8266.c:234: ResponseSt = 0;
   097C AF            [ 4] 1488 	xor	a, a
   097D DD 77 FA      [19] 1489 	ld	-6 (ix), a
   0980 DD 77 FB      [19] 1490 	ld	-5 (ix), a
                           1491 ;src\CFG8266.c:235: ResponseSt2 = 0;
   0983 AF            [ 4] 1492 	xor	a, a
   0984 DD 77 FC      [19] 1493 	ld	-4 (ix), a
   0987 DD 77 FD      [19] 1494 	ld	-3 (ix), a
                           1495 ;src\CFG8266.c:237: do
   098A DD 7E 06      [19] 1496 	ld	a, 6 (ix)
   098D D6 02         [ 7] 1497 	sub	a, #0x02
   098F DD B6 07      [19] 1498 	or	a, 7 (ix)
   0992 3E 01         [ 7] 1499 	ld	a, #0x01
   0994 28 01         [12] 1500 	jr	Z,00269$
   0996 AF            [ 4] 1501 	xor	a, a
   0997                    1502 00269$:
   0997 DD 77 F5      [19] 1503 	ld	-11 (ix), a
   099A 3E 84         [ 7] 1504 	ld	a, #0x84
   099C DD BE 08      [19] 1505 	cp	a, 8 (ix)
   099F 3E 03         [ 7] 1506 	ld	a, #0x03
   09A1 DD 9E 09      [19] 1507 	sbc	a, 9 (ix)
   09A4 3E 00         [ 7] 1508 	ld	a, #0x00
   09A6 17            [ 4] 1509 	rla
   09A7 DD 77 F6      [19] 1510 	ld	-10 (ix), a
   09AA                    1511 00138$:
                           1512 ;src\CFG8266.c:239: if (Timeout>900)
   09AA DD 7E F6      [19] 1513 	ld	a, -10 (ix)
   09AD B7            [ 4] 1514 	or	a, a
   09AE 28 68         [12] 1515 	jr	Z,00108$
                           1516 ;src\CFG8266.c:241: if (TickCount>Timeout1)
   09B0 DD 7E F1      [19] 1517 	ld	a, -15 (ix)
   09B3 FD 21 9E FC   [14] 1518 	ld	iy, #_TickCount
   09B7 FD 96 00      [19] 1519 	sub	a, 0 (iy)
   09BA DD 7E F2      [19] 1520 	ld	a, -14 (ix)
   09BD FD 9E 01      [19] 1521 	sbc	a, 1 (iy)
   09C0 30 56         [12] 1522 	jr	NC,00108$
                           1523 ;src\CFG8266.c:243: Timeout1 = TickCount + 9;
   09C2 FD 7E 00      [19] 1524 	ld	a, 0 (iy)
   09C5 C6 09         [ 7] 1525 	add	a, #0x09
   09C7 DD 77 F1      [19] 1526 	ld	-15 (ix), a
   09CA FD 7E 01      [19] 1527 	ld	a, 1 (iy)
   09CD CE 00         [ 7] 1528 	adc	a, #0x00
   09CF DD 77 F2      [19] 1529 	ld	-14 (ix), a
                           1530 ;src\CFG8266.c:244: printf("%s",advance[i%5]); // next char
   09D2 21 05 00      [10] 1531 	ld	hl, #0x0005
   09D5 E5            [11] 1532 	push	hl
   09D6 DD 6E FE      [19] 1533 	ld	l, -2 (ix)
   09D9 DD 66 FF      [19] 1534 	ld	h, -1 (ix)
   09DC E5            [11] 1535 	push	hl
   09DD CDr00r00      [17] 1536 	call	__moduint
   09E0 F1            [10] 1537 	pop	af
   09E1 F1            [10] 1538 	pop	af
   09E2 DD 75 F8      [19] 1539 	ld	-8 (ix), l
   09E5 DD 74 F9      [19] 1540 	ld	-7 (ix), h
   09E8 4D            [ 4] 1541 	ld	c,l
   09E9 44            [ 4] 1542 	ld	b,h
   09EA 29            [11] 1543 	add	hl, hl
   09EB 29            [11] 1544 	add	hl, hl
   09EC 29            [11] 1545 	add	hl, hl
   09ED 09            [11] 1546 	add	hl, bc
   09EE 29            [11] 1547 	add	hl, hl
   09EF E3            [19] 1548 	ex	(sp), hl
   09F0 3Er2D         [ 7] 1549 	ld	a, #<(_advance)
   09F2 DD 86 EE      [19] 1550 	add	a, -18 (ix)
   09F5 DD 77 F8      [19] 1551 	ld	-8 (ix), a
   09F8 3Es01         [ 7] 1552 	ld	a, #>(_advance)
   09FA DD 8E EF      [19] 1553 	adc	a, -17 (ix)
   09FD DD 77 F9      [19] 1554 	ld	-7 (ix), a
   0A00 DD 6E F8      [19] 1555 	ld	l, -8 (ix)
   0A03 DD 66 F9      [19] 1556 	ld	h, -7 (ix)
   0A06 E5            [11] 1557 	push	hl
   0A07 21r8Ar0B      [10] 1558 	ld	hl, #___str_8
   0A0A E5            [11] 1559 	push	hl
   0A0B CDr00r00      [17] 1560 	call	_printf
   0A0E F1            [10] 1561 	pop	af
   0A0F F1            [10] 1562 	pop	af
                           1563 ;src\CFG8266.c:245: ++i;
   0A10 DD 34 FE      [23] 1564 	inc	-2 (ix)
   0A13 20 03         [12] 1565 	jr	NZ,00270$
   0A15 DD 34 FF      [23] 1566 	inc	-1 (ix)
   0A18                    1567 00270$:
   0A18                    1568 00108$:
                           1569 ;src\CFG8266.c:248: if(UartRXData())
   0A18 DB 07         [11] 1570 	in	a, (_myPort7)
   0A1A 0F            [ 4] 1571 	rrca
   0A1B D2r40r0B      [10] 1572 	jp	NC,00135$
                           1573 ;src\CFG8266.c:250: rx_data = GetUARTData();
   0A1E DB 06         [11] 1574 	in	a, (_myPort6)
   0A20 DD 77 F7      [19] 1575 	ld	-9 (ix), a
                           1576 ;src\CFG8266.c:252: if (rx_data == uchData[ResponseSt])
   0A23 DD 7E 04      [19] 1577 	ld	a, 4 (ix)
   0A26 DD 86 FA      [19] 1578 	add	a, -6 (ix)
   0A29 6F            [ 4] 1579 	ld	l, a
   0A2A DD 7E 05      [19] 1580 	ld	a, 5 (ix)
   0A2D DD 8E FB      [19] 1581 	adc	a, -5 (ix)
   0A30 67            [ 4] 1582 	ld	h, a
   0A31 7E            [ 7] 1583 	ld	a, (hl)
   0A32 DD 77 F9      [19] 1584 	ld	-7 (ix), a
   0A35 DD 7E F7      [19] 1585 	ld	a, -9 (ix)
   0A38 DD 96 F9      [19] 1586 	sub	a, -7 (ix)
   0A3B 20 36         [12] 1587 	jr	NZ,00126$
                           1588 ;src\CFG8266.c:254: if (bShowReceivedData)
   0A3D DD 7E 0B      [19] 1589 	ld	a, 11 (ix)
   0A40 B7            [ 4] 1590 	or	a, a
   0A41 28 0F         [12] 1591 	jr	Z,00110$
                           1592 ;src\CFG8266.c:255: printf ("{%x}",rx_data);
   0A43 DD 4E F7      [19] 1593 	ld	c, -9 (ix)
   0A46 06 00         [ 7] 1594 	ld	b, #0x00
   0A48 C5            [11] 1595 	push	bc
   0A49 21r83r0B      [10] 1596 	ld	hl, #___str_5
   0A4C E5            [11] 1597 	push	hl
   0A4D CDr00r00      [17] 1598 	call	_printf
   0A50 F1            [10] 1599 	pop	af
   0A51 F1            [10] 1600 	pop	af
   0A52                    1601 00110$:
                           1602 ;src\CFG8266.c:256: ++ResponseSt;
   0A52 DD 34 FA      [23] 1603 	inc	-6 (ix)
   0A55 20 03         [12] 1604 	jr	NZ,00274$
   0A57 DD 34 FB      [23] 1605 	inc	-5 (ix)
   0A5A                    1606 00274$:
                           1607 ;src\CFG8266.c:257: if (ResponseSt == uiDataSize)
   0A5A DD 7E FA      [19] 1608 	ld	a, -6 (ix)
   0A5D DD 96 06      [19] 1609 	sub	a, 6 (ix)
   0A60 C2rF5r0A      [10] 1610 	jp	NZ,00127$
   0A63 DD 7E FB      [19] 1611 	ld	a, -5 (ix)
   0A66 DD 96 07      [19] 1612 	sub	a, 7 (ix)
   0A69 C2rF5r0A      [10] 1613 	jp	NZ,00127$
                           1614 ;src\CFG8266.c:259: bReturn = 1;
   0A6C DD 36 F0 01   [19] 1615 	ld	-16 (ix), #0x01
                           1616 ;src\CFG8266.c:260: break;
   0A70 C3r53r0B      [10] 1617 	jp	00140$
   0A73                    1618 00126$:
                           1619 ;src\CFG8266.c:265: if ((ResponseSt)&&(bShowReceivedData))
   0A73 DD 7E FB      [19] 1620 	ld	a, -5 (ix)
   0A76 DD B6 FA      [19] 1621 	or	a, -6 (ix)
   0A79 28 20         [12] 1622 	jr	Z,00116$
   0A7B DD 7E 0B      [19] 1623 	ld	a, 11 (ix)
   0A7E B7            [ 4] 1624 	or	a, a
   0A7F 28 1A         [12] 1625 	jr	Z,00116$
                           1626 ;src\CFG8266.c:266: printf ("{%x} != [%x]",rx_data,uchData[ResponseSt]);
   0A81 DD 5E F9      [19] 1627 	ld	e, -7 (ix)
   0A84 16 00         [ 7] 1628 	ld	d, #0x00
   0A86 DD 4E F7      [19] 1629 	ld	c, -9 (ix)
   0A89 06 00         [ 7] 1630 	ld	b, #0x00
   0A8B D5            [11] 1631 	push	de
   0A8C C5            [11] 1632 	push	bc
   0A8D 21r8Dr0B      [10] 1633 	ld	hl, #___str_9
   0A90 E5            [11] 1634 	push	hl
   0A91 CDr00r00      [17] 1635 	call	_printf
   0A94 21 06 00      [10] 1636 	ld	hl, #6
   0A97 39            [11] 1637 	add	hl, sp
   0A98 F9            [ 6] 1638 	ld	sp, hl
   0A99 18 15         [12] 1639 	jr	00117$
   0A9B                    1640 00116$:
                           1641 ;src\CFG8266.c:267: else if (bShowReceivedData)
   0A9B DD 7E 0B      [19] 1642 	ld	a, 11 (ix)
   0A9E B7            [ 4] 1643 	or	a, a
   0A9F 28 0F         [12] 1644 	jr	Z,00117$
                           1645 ;src\CFG8266.c:268: printf ("}%x{",rx_data);
   0AA1 DD 4E F7      [19] 1646 	ld	c, -9 (ix)
   0AA4 06 00         [ 7] 1647 	ld	b, #0x00
   0AA6 C5            [11] 1648 	push	bc
   0AA7 21r9Ar0B      [10] 1649 	ld	hl, #___str_10
   0AAA E5            [11] 1650 	push	hl
   0AAB CDr00r00      [17] 1651 	call	_printf
   0AAE F1            [10] 1652 	pop	af
   0AAF F1            [10] 1653 	pop	af
   0AB0                    1654 00117$:
                           1655 ;src\CFG8266.c:269: if ((uiDataSize==2)&&(ResponseSt==1))
   0AB0 DD 7E F5      [19] 1656 	ld	a, -11 (ix)
   0AB3 B7            [ 4] 1657 	or	a, a
   0AB4 28 38         [12] 1658 	jr	Z,00123$
   0AB6 DD 7E FA      [19] 1659 	ld	a, -6 (ix)
   0AB9 3D            [ 4] 1660 	dec	a
   0ABA DD B6 FB      [19] 1661 	or	a, -5 (ix)
   0ABD 20 2F         [12] 1662 	jr	NZ,00123$
                           1663 ;src\CFG8266.c:271: if ((bVerbose)&&(!uchData2))
   0ABF DD 7E 0A      [19] 1664 	ld	a, 10 (ix)
   0AC2 B7            [ 4] 1665 	or	a, a
   0AC3 28 24         [12] 1666 	jr	Z,00120$
   0AC5 DD 7E 0D      [19] 1667 	ld	a, 13 (ix)
   0AC8 DD B6 0C      [19] 1668 	or	a, 12 (ix)
   0ACB 20 1C         [12] 1669 	jr	NZ,00120$
                           1670 ;src\CFG8266.c:272: printf ("Error %u on command %c...\r\n",rx_data,uchData[0]);
   0ACD DD 6E 04      [19] 1671 	ld	l, 4 (ix)
   0AD0 DD 66 05      [19] 1672 	ld	h, 5 (ix)
   0AD3 5E            [ 7] 1673 	ld	e, (hl)
   0AD4 16 00         [ 7] 1674 	ld	d, #0x00
   0AD6 DD 4E F7      [19] 1675 	ld	c, -9 (ix)
   0AD9 06 00         [ 7] 1676 	ld	b, #0x00
   0ADB D5            [11] 1677 	push	de
   0ADC C5            [11] 1678 	push	bc
   0ADD 21r9Fr0B      [10] 1679 	ld	hl, #___str_11
   0AE0 E5            [11] 1680 	push	hl
   0AE1 CDr00r00      [17] 1681 	call	_printf
   0AE4 21 06 00      [10] 1682 	ld	hl, #6
   0AE7 39            [11] 1683 	add	hl, sp
   0AE8 F9            [ 6] 1684 	ld	sp, hl
   0AE9                    1685 00120$:
                           1686 ;src\CFG8266.c:273: return false;
   0AE9 2E 00         [ 7] 1687 	ld	l, #0x00
   0AEB C3r69r0B      [10] 1688 	jp	00149$
   0AEE                    1689 00123$:
                           1690 ;src\CFG8266.c:275: ResponseSt = 0;
   0AEE AF            [ 4] 1691 	xor	a, a
   0AEF DD 77 FA      [19] 1692 	ld	-6 (ix), a
   0AF2 DD 77 FB      [19] 1693 	ld	-5 (ix), a
   0AF5                    1694 00127$:
                           1695 ;src\CFG8266.c:278: if ((uchData2)&&(rx_data == uchData2[ResponseSt2]))
   0AF5 DD 7E 0D      [19] 1696 	ld	a, 13 (ix)
   0AF8 DD B6 0C      [19] 1697 	or	a, 12 (ix)
   0AFB 28 3C         [12] 1698 	jr	Z,00131$
   0AFD DD 7E 0C      [19] 1699 	ld	a, 12 (ix)
   0B00 DD 86 FC      [19] 1700 	add	a, -4 (ix)
   0B03 DD 77 F8      [19] 1701 	ld	-8 (ix), a
   0B06 DD 7E 0D      [19] 1702 	ld	a, 13 (ix)
   0B09 DD 8E FD      [19] 1703 	adc	a, -3 (ix)
   0B0C DD 77 F9      [19] 1704 	ld	-7 (ix), a
   0B0F DD 6E F8      [19] 1705 	ld	l, -8 (ix)
   0B12 DD 66 F9      [19] 1706 	ld	h, -7 (ix)
   0B15 DD 7E F7      [19] 1707 	ld	a,-9 (ix)
   0B18 96            [ 7] 1708 	sub	a,(hl)
   0B19 20 1E         [12] 1709 	jr	NZ,00131$
                           1710 ;src\CFG8266.c:280: ++ResponseSt2;
   0B1B DD 34 FC      [23] 1711 	inc	-4 (ix)
   0B1E 20 03         [12] 1712 	jr	NZ,00281$
   0B20 DD 34 FD      [23] 1713 	inc	-3 (ix)
   0B23                    1714 00281$:
                           1715 ;src\CFG8266.c:281: if (ResponseSt2 == uiDataSize2)
   0B23 DD 7E FC      [19] 1716 	ld	a, -4 (ix)
   0B26 DD 96 0E      [19] 1717 	sub	a, 14 (ix)
   0B29 20 15         [12] 1718 	jr	NZ,00135$
   0B2B DD 7E FD      [19] 1719 	ld	a, -3 (ix)
   0B2E DD 96 0F      [19] 1720 	sub	a, 15 (ix)
   0B31 20 0D         [12] 1721 	jr	NZ,00135$
                           1722 ;src\CFG8266.c:283: bReturn = 2;
   0B33 DD 36 F0 02   [19] 1723 	ld	-16 (ix), #0x02
                           1724 ;src\CFG8266.c:284: break;
   0B37 18 1A         [12] 1725 	jr	00140$
   0B39                    1726 00131$:
                           1727 ;src\CFG8266.c:288: ResponseSt2 = 0;
   0B39 AF            [ 4] 1728 	xor	a, a
   0B3A DD 77 FC      [19] 1729 	ld	-4 (ix), a
   0B3D DD 77 FD      [19] 1730 	ld	-3 (ix), a
   0B40                    1731 00135$:
                           1732 ;src\CFG8266.c:291: if (TickCount>Timeout2)
   0B40 DD 7E F3      [19] 1733 	ld	a, -13 (ix)
   0B43 FD 21 9E FC   [14] 1734 	ld	iy, #_TickCount
   0B47 FD 96 00      [19] 1735 	sub	a, 0 (iy)
   0B4A DD 7E F4      [19] 1736 	ld	a, -12 (ix)
   0B4D FD 9E 01      [19] 1737 	sbc	a, 1 (iy)
   0B50 D2rAAr09      [10] 1738 	jp	NC, 00138$
                           1739 ;src\CFG8266.c:294: while (1);
   0B53                    1740 00140$:
                           1741 ;src\CFG8266.c:296: if (Timeout>900)
   0B53 DD 7E F6      [19] 1742 	ld	a, -10 (ix)
   0B56 B7            [ 4] 1743 	or	a, a
   0B57 28 0D         [12] 1744 	jr	Z,00142$
                           1745 ;src\CFG8266.c:297: printf("%s",aDone); // clear line
   0B59 21r87r01      [10] 1746 	ld	hl, #_aDone
   0B5C E5            [11] 1747 	push	hl
   0B5D 21r8Ar0B      [10] 1748 	ld	hl, #___str_8
   0B60 E5            [11] 1749 	push	hl
   0B61 CDr00r00      [17] 1750 	call	_printf
   0B64 F1            [10] 1751 	pop	af
   0B65 F1            [10] 1752 	pop	af
   0B66                    1753 00142$:
                           1754 ;src\CFG8266.c:299: return bReturn;
   0B66 DD 6E F0      [19] 1755 	ld	l, -16 (ix)
   0B69                    1756 00149$:
                           1757 ;src\CFG8266.c:300: }
   0B69 DD F9         [10] 1758 	ld	sp, ix
   0B6B DD E1         [14] 1759 	pop	ix
   0B6D C9            [10] 1760 	ret
   0B6E                    1761 ___str_2:
   0B6E 57 61 69 74 69 6E  1762 	.ascii "Waiting for: "
        67 20 66 6F 72 3A
        20
   0B7B 00                 1763 	.db 0x00
   0B7C                    1764 ___str_3:
   0B7C 25 63              1765 	.ascii "%c"
   0B7E 00                 1766 	.db 0x00
   0B7F                    1767 ___str_4:
   0B7F 20 2F 20           1768 	.ascii " / "
   0B82 00                 1769 	.db 0x00
   0B83                    1770 ___str_5:
   0B83 7B 25 78 7D        1771 	.ascii "{%x}"
   0B87 00                 1772 	.db 0x00
   0B88                    1773 ___str_7:
   0B88 0D                 1774 	.db 0x0d
   0B89 00                 1775 	.db 0x00
   0B8A                    1776 ___str_8:
   0B8A 25 73              1777 	.ascii "%s"
   0B8C 00                 1778 	.db 0x00
   0B8D                    1779 ___str_9:
   0B8D 7B 25 78 7D 20 21  1780 	.ascii "{%x} != [%x]"
        3D 20 5B 25 78 5D
   0B99 00                 1781 	.db 0x00
   0B9A                    1782 ___str_10:
   0B9A 7D 25 78 7B        1783 	.ascii "}%x{"
   0B9E 00                 1784 	.db 0x00
   0B9F                    1785 ___str_11:
   0B9F 45 72 72 6F 72 20  1786 	.ascii "Error %u on command %c..."
        25 75 20 6F 6E 20
        63 6F 6D 6D 61 6E
        64 20 25 63 2E 2E
        2E
   0BB8 0D                 1787 	.db 0x0d
   0BB9 0A                 1788 	.db 0x0a
   0BBA 00                 1789 	.db 0x00
                           1790 ;src\CFG8266.c:302: void FinishUpdate (bool bSendReset)
                           1791 ;	---------------------------------
                           1792 ; Function FinishUpdate
                           1793 ; ---------------------------------
   0BBB                    1794 _FinishUpdate::
   0BBB DD E5         [15] 1795 	push	ix
   0BBD DD 21 00 00   [14] 1796 	ld	ix,#0
   0BC1 DD 39         [15] 1797 	add	ix,sp
   0BC3 F5            [11] 1798 	push	af
   0BC4 F5            [11] 1799 	push	af
                           1800 ;src\CFG8266.c:304: unsigned int iRetries = 3;
   0BC5 21 03 00      [10] 1801 	ld	hl, #0x0003
   0BC8 E3            [19] 1802 	ex	(sp), hl
                           1803 ;src\CFG8266.c:308: bool bReset = bSendReset;
   0BC9 DD 7E 04      [19] 1804 	ld	a, 4 (ix)
   0BCC DD 77 FE      [19] 1805 	ld	-2 (ix), a
                           1806 ;src\CFG8266.c:310: printf("\rFinishing flash, this will take some time, WAIT!\r\n");
   0BCF 21r36r0D      [10] 1807 	ld	hl, #___str_13
   0BD2 E5            [11] 1808 	push	hl
   0BD3 CDr00r00      [17] 1809 	call	_puts
   0BD6 F1            [10] 1810 	pop	af
                           1811 ;src\CFG8266.c:312: do
   0BD7 DD 36 FF 02   [19] 1812 	ld	-1 (ix), #0x02
   0BDB                    1813 00135$:
                           1814 ;src\CFG8266.c:314: bRet = true;
   0BDB 2E 01         [ 7] 1815 	ld	l, #0x01
                           1816 ;src\CFG8266.c:315: --ucRetries;
   0BDD DD 35 FF      [23] 1817 	dec	-1 (ix)
                           1818 ;src\CFG8266.c:316: if (bReset)
   0BE0 DD 7E FE      [19] 1819 	ld	a, -2 (ix)
   0BE3 B7            [ 4] 1820 	or	a, a
   0BE4 28 0C         [12] 1821 	jr	Z,00154$
                           1822 ;src\CFG8266.c:317: TxByte('R'); //Request Reset
   0BE6 E5            [11] 1823 	push	hl
   0BE7 3E 52         [ 7] 1824 	ld	a, #0x52
   0BE9 F5            [11] 1825 	push	af
   0BEA 33            [ 6] 1826 	inc	sp
   0BEB CDr4Fr07      [17] 1827 	call	_TxByte
   0BEE 33            [ 6] 1828 	inc	sp
   0BEF E1            [10] 1829 	pop	hl
   0BF0 18 49         [12] 1830 	jr	00110$
                           1831 ;src\CFG8266.c:320: do
   0BF2                    1832 00154$:
   0BF2 D1            [10] 1833 	pop	de
   0BF3 D5            [11] 1834 	push	de
                           1835 ;src\CFG8266.c:322: for (uchHalt=60;uchHalt>0;--uchHalt)
   0BF4                    1836 00152$:
   0BF4 3E 3C         [ 7] 1837 	ld	a, #0x3c
   0BF6                    1838 00140$:
                           1839 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0BF6 76            [ 4] 1840 	halt
                           1841 ;src\CFG8266.c:322: for (uchHalt=60;uchHalt>0;--uchHalt)
   0BF7 3D            [ 4] 1842 	dec	a
   0BF8 20 FC         [12] 1843 	jr	NZ,00140$
                           1844 ;src\CFG8266.c:324: TxByte('E'); //End Update
   0BFA D5            [11] 1845 	push	de
   0BFB 3E 45         [ 7] 1846 	ld	a, #0x45
   0BFD F5            [11] 1847 	push	af
   0BFE 33            [ 6] 1848 	inc	sp
   0BFF CDr4Fr07      [17] 1849 	call	_TxByte
   0C02 33            [ 6] 1850 	inc	sp
   0C03 21 00 00      [10] 1851 	ld	hl, #0x0000
   0C06 E5            [11] 1852 	push	hl
   0C07 2E 00         [ 7] 1853 	ld	l, #0x00
   0C09 E5            [11] 1854 	push	hl
   0C0A AF            [ 4] 1855 	xor	a, a
   0C0B 57            [ 4] 1856 	ld	d,a
   0C0C 1E 01         [ 7] 1857 	ld	e,#0x01
   0C0E D5            [11] 1858 	push	de
   0C0F 21 08 07      [10] 1859 	ld	hl, #0x0708
   0C12 E5            [11] 1860 	push	hl
   0C13 21 02 00      [10] 1861 	ld	hl, #0x0002
   0C16 E5            [11] 1862 	push	hl
   0C17 21r09r01      [10] 1863 	ld	hl, #_endUpdate
   0C1A E5            [11] 1864 	push	hl
   0C1B CDrCBr08      [17] 1865 	call	_WaitForRXData
   0C1E FD 21 0C 00   [14] 1866 	ld	iy, #12
   0C22 FD 39         [15] 1867 	add	iy, sp
   0C24 FD F9         [10] 1868 	ld	sp, iy
   0C26 D1            [10] 1869 	pop	de
                           1870 ;src\CFG8266.c:326: iRetries--;
   0C27 1B            [ 6] 1871 	dec	de
                           1872 ;src\CFG8266.c:328: while ((!bRet)&&(iRetries));
   0C28 7D            [ 4] 1873 	ld	a, l
   0C29 B7            [ 4] 1874 	or	a, a
   0C2A 20 04         [12] 1875 	jr	NZ,00170$
   0C2C 7A            [ 4] 1876 	ld	a, d
   0C2D B3            [ 4] 1877 	or	a, e
   0C2E 20 C4         [12] 1878 	jr	NZ,00152$
   0C30                    1879 00170$:
   0C30 33            [ 6] 1880 	inc	sp
   0C31 33            [ 6] 1881 	inc	sp
   0C32 D5            [11] 1882 	push	de
                           1883 ;src\CFG8266.c:330: if (bRet)
   0C33 7D            [ 4] 1884 	ld	a, l
   0C34 B7            [ 4] 1885 	or	a, a
   0C35 28 04         [12] 1886 	jr	Z,00110$
                           1887 ;src\CFG8266.c:331: bReset=true;
   0C37 DD 36 FE 01   [19] 1888 	ld	-2 (ix), #0x01
   0C3B                    1889 00110$:
                           1890 ;src\CFG8266.c:334: if (!bRet)
   0C3B 7D            [ 4] 1891 	ld	a, l
   0C3C B7            [ 4] 1892 	or	a, a
   0C3D 20 0B         [12] 1893 	jr	NZ,00133$
                           1894 ;src\CFG8266.c:335: printf("\rTimeout waiting to end update...\r\n");
   0C3F 21r69r0D      [10] 1895 	ld	hl, #___str_15
   0C42 E5            [11] 1896 	push	hl
   0C43 CDr00r00      [17] 1897 	call	_puts
   0C46 F1            [10] 1898 	pop	af
   0C47 C3r2Ar0D      [10] 1899 	jp	00136$
   0C4A                    1900 00133$:
                           1901 ;src\CFG8266.c:338: if (ucRetries)
   0C4A DD 7E FF      [19] 1902 	ld	a, -1 (ix)
   0C4D B7            [ 4] 1903 	or	a, a
   0C4E 28 18         [12] 1904 	jr	Z,00115$
                           1905 ;src\CFG8266.c:340: if (ucIsFw)
   0C50 3Ar08r00      [13] 1906 	ld	a,(#_ucIsFw + 0)
   0C53 B7            [ 4] 1907 	or	a, a
   0C54 28 0A         [12] 1908 	jr	Z,00112$
                           1909 ;src\CFG8266.c:341: printf("\rFirmware Update done, ESP is restarting, WAIT...\r\n");
   0C56 21r8Cr0D      [10] 1910 	ld	hl, #___str_17
   0C59 E5            [11] 1911 	push	hl
   0C5A CDr00r00      [17] 1912 	call	_puts
   0C5D F1            [10] 1913 	pop	af
   0C5E 18 08         [12] 1914 	jr	00115$
   0C60                    1915 00112$:
                           1916 ;src\CFG8266.c:343: printf("\rCertificates Update done, ESP is restarting, WAIT...\r\n");
   0C60 21rBFr0D      [10] 1917 	ld	hl, #___str_19
   0C63 E5            [11] 1918 	push	hl
   0C64 CDr00r00      [17] 1919 	call	_puts
   0C67 F1            [10] 1920 	pop	af
   0C68                    1921 00115$:
                           1922 ;src\CFG8266.c:346: if (WaitForRXData(responseReady2,7,2700,false,false,NULL,0)) //Wait up to 45 seconds
   0C68 21 00 00      [10] 1923 	ld	hl, #0x0000
   0C6B E5            [11] 1924 	push	hl
   0C6C 2E 00         [ 7] 1925 	ld	l, #0x00
   0C6E E5            [11] 1926 	push	hl
   0C6F AF            [ 4] 1927 	xor	a, a
   0C70 F5            [11] 1928 	push	af
   0C71 33            [ 6] 1929 	inc	sp
   0C72 AF            [ 4] 1930 	xor	a, a
   0C73 F5            [11] 1931 	push	af
   0C74 33            [ 6] 1932 	inc	sp
   0C75 21 8C 0A      [10] 1933 	ld	hl, #0x0a8c
   0C78 E5            [11] 1934 	push	hl
   0C79 21 07 00      [10] 1935 	ld	hl, #0x0007
   0C7C E5            [11] 1936 	push	hl
   0C7D 21r90r01      [10] 1937 	ld	hl, #_responseReady2
   0C80 E5            [11] 1938 	push	hl
   0C81 CDrCBr08      [17] 1939 	call	_WaitForRXData
   0C84 FD 21 0C 00   [14] 1940 	ld	iy, #12
   0C88 FD 39         [15] 1941 	add	iy, sp
   0C8A FD F9         [10] 1942 	ld	sp, iy
   0C8C 7D            [ 4] 1943 	ld	a, l
   0C8D B7            [ 4] 1944 	or	a, a
   0C8E CAr1Cr0D      [10] 1945 	jp	Z, 00130$
                           1946 ;src\CFG8266.c:348: if (!ucIsFw)
   0C91 3Ar08r00      [13] 1947 	ld	a,(#_ucIsFw + 0)
   0C94 B7            [ 4] 1948 	or	a, a
   0C95 C2r12r0D      [10] 1949 	jp	NZ, 00125$
                           1950 ;src\CFG8266.c:350: printf("\rESP Reset Ok, now let's request creation of index file...\r\n");
   0C98 21rF6r0D      [10] 1951 	ld	hl, #___str_21
   0C9B E5            [11] 1952 	push	hl
   0C9C CDr00r00      [17] 1953 	call	_puts
   0C9F F1            [10] 1954 	pop	af
                           1955 ;src\CFG8266.c:352: do
   0CA0 DD 36 FE 0A   [19] 1956 	ld	-2 (ix), #0x0a
   0CA4 AF            [ 4] 1957 	xor	a, a
   0CA5 DD 77 FF      [19] 1958 	ld	-1 (ix), a
                           1959 ;src\CFG8266.c:354: for (uchHalt=60;uchHalt>0;--uchHalt)
   0CA8                    1960 00162$:
   0CA8 3E 3C         [ 7] 1961 	ld	a, #0x3c
   0CAA                    1962 00142$:
                           1963 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0CAA 76            [ 4] 1964 	halt
                           1965 ;src\CFG8266.c:354: for (uchHalt=60;uchHalt>0;--uchHalt)
   0CAB 3D            [ 4] 1966 	dec	a
   0CAC 20 FC         [12] 1967 	jr	NZ,00142$
                           1968 ;src\CFG8266.c:356: TxByte('I'); //End Update
   0CAE 3E 49         [ 7] 1969 	ld	a, #0x49
   0CB0 F5            [11] 1970 	push	af
   0CB1 33            [ 6] 1971 	inc	sp
   0CB2 CDr4Fr07      [17] 1972 	call	_TxByte
   0CB5 33            [ 6] 1973 	inc	sp
                           1974 ;src\CFG8266.c:357: bRet = WaitForRXData(certificateDone,2,3600,false,false,NULL,0); //Wait up to 1 minute, certificate index creation takes time
   0CB6 21 00 00      [10] 1975 	ld	hl, #0x0000
   0CB9 E5            [11] 1976 	push	hl
   0CBA 2E 00         [ 7] 1977 	ld	l, #0x00
   0CBC E5            [11] 1978 	push	hl
   0CBD AF            [ 4] 1979 	xor	a, a
   0CBE F5            [11] 1980 	push	af
   0CBF 33            [ 6] 1981 	inc	sp
   0CC0 AF            [ 4] 1982 	xor	a, a
   0CC1 F5            [11] 1983 	push	af
   0CC2 33            [ 6] 1984 	inc	sp
   0CC3 21 10 0E      [10] 1985 	ld	hl, #0x0e10
   0CC6 E5            [11] 1986 	push	hl
   0CC7 21 02 00      [10] 1987 	ld	hl, #0x0002
   0CCA E5            [11] 1988 	push	hl
   0CCB 21r0Cr01      [10] 1989 	ld	hl, #_certificateDone
   0CCE E5            [11] 1990 	push	hl
   0CCF CDrCBr08      [17] 1991 	call	_WaitForRXData
   0CD2 FD 21 0C 00   [14] 1992 	ld	iy, #12
   0CD6 FD 39         [15] 1993 	add	iy, sp
   0CD8 FD F9         [10] 1994 	ld	sp, iy
   0CDA DD 75 FD      [19] 1995 	ld	-3 (ix), l
                           1996 ;src\CFG8266.c:358: iRetries--;
   0CDD DD 6E FE      [19] 1997 	ld	l, -2 (ix)
   0CE0 DD 66 FF      [19] 1998 	ld	h, -1 (ix)
   0CE3 2B            [ 6] 1999 	dec	hl
   0CE4 DD 75 FE      [19] 2000 	ld	-2 (ix), l
   0CE7 DD 74 FF      [19] 2001 	ld	-1 (ix), h
                           2002 ;src\CFG8266.c:360: while ((!bRet)&&(iRetries));
   0CEA DD 7E FD      [19] 2003 	ld	a, -3 (ix)
   0CED B7            [ 4] 2004 	or	a, a
   0CEE 20 08         [12] 2005 	jr	NZ,00120$
   0CF0 DD 7E FF      [19] 2006 	ld	a, -1 (ix)
   0CF3 DD B6 FE      [19] 2007 	or	a, -2 (ix)
   0CF6 20 B0         [12] 2008 	jr	NZ,00162$
   0CF8                    2009 00120$:
                           2010 ;src\CFG8266.c:361: if (bRet)
   0CF8 DD 7E FD      [19] 2011 	ld	a, -3 (ix)
   0CFB B7            [ 4] 2012 	or	a, a
   0CFC 28 0A         [12] 2013 	jr	Z,00122$
                           2014 ;src\CFG8266.c:362: printf("\rDone!                                \r\n");
   0CFE 21r32r0E      [10] 2015 	ld	hl, #___str_23
   0D01 E5            [11] 2016 	push	hl
   0D02 CDr00r00      [17] 2017 	call	_puts
   0D05 F1            [10] 2018 	pop	af
   0D06 18 29         [12] 2019 	jr	00137$
   0D08                    2020 00122$:
                           2021 ;src\CFG8266.c:364: printf("\rDone, but time-out on creating certificates index file!\r\n");
   0D08 21r5Ar0E      [10] 2022 	ld	hl, #___str_25
   0D0B E5            [11] 2023 	push	hl
   0D0C CDr00r00      [17] 2024 	call	_puts
   0D0F F1            [10] 2025 	pop	af
   0D10 18 1F         [12] 2026 	jr	00137$
   0D12                    2027 00125$:
                           2028 ;src\CFG8266.c:367: printf("\rDone!                              \r\n");
   0D12 21r94r0E      [10] 2029 	ld	hl, #___str_27
   0D15 E5            [11] 2030 	push	hl
   0D16 CDr00r00      [17] 2031 	call	_puts
   0D19 F1            [10] 2032 	pop	af
                           2033 ;src\CFG8266.c:368: break;
   0D1A 18 15         [12] 2034 	jr	00137$
   0D1C                    2035 00130$:
                           2036 ;src\CFG8266.c:371: if (!ucRetries)
   0D1C DD 7E FF      [19] 2037 	ld	a, -1 (ix)
   0D1F B7            [ 4] 2038 	or	a, a
   0D20 20 08         [12] 2039 	jr	NZ,00136$
                           2040 ;src\CFG8266.c:372: printf("\rTimeout error\r\n");
   0D22 21rBAr0E      [10] 2041 	ld	hl, #___str_29
   0D25 E5            [11] 2042 	push	hl
   0D26 CDr00r00      [17] 2043 	call	_puts
   0D29 F1            [10] 2044 	pop	af
   0D2A                    2045 00136$:
                           2046 ;src\CFG8266.c:375: while (ucRetries);
   0D2A DD 7E FF      [19] 2047 	ld	a, -1 (ix)
   0D2D B7            [ 4] 2048 	or	a, a
   0D2E C2rDBr0B      [10] 2049 	jp	NZ, 00135$
   0D31                    2050 00137$:
                           2051 ;src\CFG8266.c:377: return;
                           2052 ;src\CFG8266.c:378: }
   0D31 DD F9         [10] 2053 	ld	sp, ix
   0D33 DD E1         [14] 2054 	pop	ix
   0D35 C9            [10] 2055 	ret
   0D36                    2056 ___str_13:
   0D36 0D                 2057 	.db 0x0d
   0D37 46 69 6E 69 73 68  2058 	.ascii "Finishing flash, this will take some time, WAIT!"
        69 6E 67 20 66 6C
        61 73 68 2C 20 74
        68 69 73 20 77 69
        6C 6C 20 74 61 6B
        65 20 73 6F 6D 65
        20 74 69 6D 65 2C
        20 57 41 49 54 21
   0D67 0D                 2059 	.db 0x0d
   0D68 00                 2060 	.db 0x00
   0D69                    2061 ___str_15:
   0D69 0D                 2062 	.db 0x0d
   0D6A 54 69 6D 65 6F 75  2063 	.ascii "Timeout waiting to end update..."
        74 20 77 61 69 74
        69 6E 67 20 74 6F
        20 65 6E 64 20 75
        70 64 61 74 65 2E
        2E 2E
   0D8A 0D                 2064 	.db 0x0d
   0D8B 00                 2065 	.db 0x00
   0D8C                    2066 ___str_17:
   0D8C 0D                 2067 	.db 0x0d
   0D8D 46 69 72 6D 77 61  2068 	.ascii "Firmware Update done, ESP is restarting, WAIT..."
        72 65 20 55 70 64
        61 74 65 20 64 6F
        6E 65 2C 20 45 53
        50 20 69 73 20 72
        65 73 74 61 72 74
        69 6E 67 2C 20 57
        41 49 54 2E 2E 2E
   0DBD 0D                 2069 	.db 0x0d
   0DBE 00                 2070 	.db 0x00
   0DBF                    2071 ___str_19:
   0DBF 0D                 2072 	.db 0x0d
   0DC0 43 65 72 74 69 66  2073 	.ascii "Certificates Update done, ESP is restarting, WAIT..."
        69 63 61 74 65 73
        20 55 70 64 61 74
        65 20 64 6F 6E 65
        2C 20 45 53 50 20
        69 73 20 72 65 73
        74 61 72 74 69 6E
        67 2C 20 57 41 49
        54 2E 2E 2E
   0DF4 0D                 2074 	.db 0x0d
   0DF5 00                 2075 	.db 0x00
   0DF6                    2076 ___str_21:
   0DF6 0D                 2077 	.db 0x0d
   0DF7 45 53 50 20 52 65  2078 	.ascii "ESP Reset Ok, now let's request creation of index file..."
        73 65 74 20 4F 6B
        2C 20 6E 6F 77 20
        6C 65 74 27 73 20
        72 65 71 75 65 73
        74 20 63 72 65 61
        74 69 6F 6E 20 6F
        66 20 69 6E 64 65
        78 20 66 69 6C 65
        2E 2E 2E
   0E30 0D                 2079 	.db 0x0d
   0E31 00                 2080 	.db 0x00
   0E32                    2081 ___str_23:
   0E32 0D                 2082 	.db 0x0d
   0E33 44 6F 6E 65 21 20  2083 	.ascii "Done!                                "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20
   0E58 0D                 2084 	.db 0x0d
   0E59 00                 2085 	.db 0x00
   0E5A                    2086 ___str_25:
   0E5A 0D                 2087 	.db 0x0d
   0E5B 44 6F 6E 65 2C 20  2088 	.ascii "Done, but time-out on creating certificates index file!"
        62 75 74 20 74 69
        6D 65 2D 6F 75 74
        20 6F 6E 20 63 72
        65 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 69 6E 64 65
        78 20 66 69 6C 65
        21
   0E92 0D                 2089 	.db 0x0d
   0E93 00                 2090 	.db 0x00
   0E94                    2091 ___str_27:
   0E94 0D                 2092 	.db 0x0d
   0E95 44 6F 6E 65 21 20  2093 	.ascii "Done!                              "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20
   0EB8 0D                 2094 	.db 0x0d
   0EB9 00                 2095 	.db 0x00
   0EBA                    2096 ___str_29:
   0EBA 0D                 2097 	.db 0x0d
   0EBB 54 69 6D 65 6F 75  2098 	.ascii "Timeout error"
        74 20 65 72 72 6F
        72
   0EC8 0D                 2099 	.db 0x0d
   0EC9 00                 2100 	.db 0x00
                           2101 ;src\CFG8266.c:380: int main(char** argv, int argc)
                           2102 ;	---------------------------------
                           2103 ; Function main
                           2104 ; ---------------------------------
   0ECA                    2105 _main::
   0ECA DD E5         [15] 2106 	push	ix
   0ECC DD 21 00 00   [14] 2107 	ld	ix,#0
   0ED0 DD 39         [15] 2108 	add	ix,sp
   0ED2 21 A4 EF      [10] 2109 	ld	hl, #-4188
   0ED5 39            [11] 2110 	add	hl, sp
   0ED6 F9            [ 6] 2111 	ld	sp, hl
                           2112 ;src\CFG8266.c:397: unsigned char ucFirstBlock = 1;
   0ED7 DD 36 F5 01   [19] 2113 	ld	-11 (ix), #0x01
                           2114 ;src\CFG8266.c:415: ucLocalUpdate = 0;
   0EDB 21r07r00      [10] 2115 	ld	hl,#_ucLocalUpdate + 0
   0EDE 36 00         [10] 2116 	ld	(hl), #0x00
                           2117 ;src\CFG8266.c:416: ucNagleOff = 0;
   0EE0 21r09r00      [10] 2118 	ld	hl,#_ucNagleOff + 0
   0EE3 36 00         [10] 2119 	ld	(hl), #0x00
                           2120 ;src\CFG8266.c:417: ucNagleOn = 0;
   0EE5 21r0Ar00      [10] 2121 	ld	hl,#_ucNagleOn + 0
   0EE8 36 00         [10] 2122 	ld	(hl), #0x00
                           2123 ;src\CFG8266.c:418: ucRadioOff = 0;
   0EEA 21r0Br00      [10] 2124 	ld	hl,#_ucRadioOff + 0
   0EED 36 00         [10] 2125 	ld	(hl), #0x00
                           2126 ;src\CFG8266.c:419: ucSetTimeout = 0;
   0EEF 21r0Cr00      [10] 2127 	ld	hl,#_ucSetTimeout + 0
   0EF2 36 00         [10] 2128 	ld	(hl), #0x00
                           2129 ;src\CFG8266.c:420: ucScanPage = 0;
   0EF4 AF            [ 4] 2130 	xor	a, a
   0EF5 DD 77 EF      [19] 2131 	ld	-17 (ix), a
                           2132 ;src\CFG8266.c:422: ucVerMajor = 0;
   0EF8 AF            [ 4] 2133 	xor	a, a
   0EF9 DD 77 FF      [19] 2134 	ld	-1 (ix), a
                           2135 ;src\CFG8266.c:423: ucVerMinor = 0;
   0EFC AF            [ 4] 2136 	xor	a, a
   0EFD DD 77 FE      [19] 2137 	ld	-2 (ix), a
                           2138 ;src\CFG8266.c:424: TickCount = 0; //this guarantees no leap for 18 minutes, more than enough so we do not need to check for jiffy leaping
   0F00 21 00 00      [10] 2139 	ld	hl, #0x0000
   0F03 22 9E FC      [16] 2140 	ld	(_TickCount), hl
                           2141 ;src\CFG8266.c:426: printf("> SM-X ESP8266 Wi-Fi Module Configuration v1.30 <\r\n(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com\r\n\n");
   0F06 21r68r21      [10] 2142 	ld	hl, #___str_31
   0F09 E5            [11] 2143 	push	hl
   0F0A CDr00r00      [17] 2144 	call	_puts
   0F0D F1            [10] 2145 	pop	af
                           2146 ;src\CFG8266.c:428: if (IsValidInput(argv, argc, ucServer, ucFile, ucPort))
   0F0E 21 45 10      [10] 2147 	ld	hl, #4165
   0F11 39            [11] 2148 	add	hl, sp
   0F12 DD 75 FC      [19] 2149 	ld	-4 (ix), l
   0F15 DD 74 FD      [19] 2150 	ld	-3 (ix), h
   0F18 DD 7E FC      [19] 2151 	ld	a, -4 (ix)
   0F1B DD 77 FA      [19] 2152 	ld	-6 (ix), a
   0F1E DD 7E FD      [19] 2153 	ld	a, -3 (ix)
   0F21 DD 77 FB      [19] 2154 	ld	-5 (ix), a
   0F24 21 19 0F      [10] 2155 	ld	hl, #3865
   0F27 39            [11] 2156 	add	hl, sp
   0F28 DD 75 FC      [19] 2157 	ld	-4 (ix), l
   0F2B DD 74 FD      [19] 2158 	ld	-3 (ix), h
   0F2E EB            [ 4] 2159 	ex	de,hl
   0F2F 21 ED 0D      [10] 2160 	ld	hl, #3565
   0F32 39            [11] 2161 	add	hl, sp
   0F33 DD 75 F6      [19] 2162 	ld	-10 (ix), l
   0F36 DD 74 F7      [19] 2163 	ld	-9 (ix), h
   0F39 4D            [ 4] 2164 	ld	c, l
   0F3A 44            [ 4] 2165 	ld	b, h
   0F3B DD 6E FA      [19] 2166 	ld	l, -6 (ix)
   0F3E DD 66 FB      [19] 2167 	ld	h, -5 (ix)
   0F41 E5            [11] 2168 	push	hl
   0F42 D5            [11] 2169 	push	de
   0F43 C5            [11] 2170 	push	bc
   0F44 DD 6E 06      [19] 2171 	ld	l, 6 (ix)
   0F47 DD 66 07      [19] 2172 	ld	h, 7 (ix)
   0F4A E5            [11] 2173 	push	hl
   0F4B DD 6E 04      [19] 2174 	ld	l, 4 (ix)
   0F4E DD 66 05      [19] 2175 	ld	h, 5 (ix)
   0F51 E5            [11] 2176 	push	hl
   0F52 CDr84r04      [17] 2177 	call	_IsValidInput
   0F55 FD 21 0A 00   [14] 2178 	ld	iy, #10
   0F59 FD 39         [15] 2179 	add	iy, sp
   0F5B FD F9         [10] 2180 	ld	sp, iy
   0F5D DD 75 FA      [19] 2181 	ld	-6 (ix), l
   0F60 DD 74 FB      [19] 2182 	ld	-5 (ix), h
   0F63 7C            [ 4] 2183 	ld	a, h
   0F64 DD B6 FA      [19] 2184 	or	a, -6 (ix)
   0F67 CAr58r21      [10] 2185 	jp	Z, 00374$
                           2186 ;src\CFG8266.c:430: do
   0F6A AF            [ 4] 2187 	xor	a, a
   0F6B DD 77 FB      [19] 2188 	ld	-5 (ix), a
   0F6E                    2189 00103$:
                           2190 ;src\CFG8266.c:433: myPort6 = speed;
   0F6E DD 7E FB      [19] 2191 	ld	a, -5 (ix)
   0F71 D3 06         [11] 2192 	out	(_myPort6), a
                           2193 ;src\CFG8266.c:434: ClearUartData();
   0F73 3E 14         [ 7] 2194 	ld	a, #0x14
   0F75 D3 06         [11] 2195 	out	(_myPort6), a
                           2196 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0F77 76            [ 4] 2197 	halt
                           2198 ;src\CFG8266.c:436: TxByte('?');
   0F78 3E 3F         [ 7] 2199 	ld	a, #0x3f
   0F7A F5            [11] 2200 	push	af
   0F7B 33            [ 6] 2201 	inc	sp
   0F7C CDr4Fr07      [17] 2202 	call	_TxByte
   0F7F 33            [ 6] 2203 	inc	sp
                           2204 ;src\CFG8266.c:438: bResponse = WaitForRXData(responseOK,2,60,false,false,NULL,0);
   0F80 21 00 00      [10] 2205 	ld	hl, #0x0000
   0F83 E5            [11] 2206 	push	hl
   0F84 2E 00         [ 7] 2207 	ld	l, #0x00
   0F86 E5            [11] 2208 	push	hl
   0F87 AF            [ 4] 2209 	xor	a, a
   0F88 F5            [11] 2210 	push	af
   0F89 33            [ 6] 2211 	inc	sp
   0F8A AF            [ 4] 2212 	xor	a, a
   0F8B F5            [11] 2213 	push	af
   0F8C 33            [ 6] 2214 	inc	sp
   0F8D 2E 3C         [ 7] 2215 	ld	l, #0x3c
   0F8F E5            [11] 2216 	push	hl
   0F90 2E 02         [ 7] 2217 	ld	l, #0x02
   0F92 E5            [11] 2218 	push	hl
   0F93 21r0Er01      [10] 2219 	ld	hl, #_responseOK
   0F96 E5            [11] 2220 	push	hl
   0F97 CDrCBr08      [17] 2221 	call	_WaitForRXData
   0F9A FD 21 0C 00   [14] 2222 	ld	iy, #12
   0F9E FD 39         [15] 2223 	add	iy, sp
   0FA0 FD F9         [10] 2224 	ld	sp, iy
   0FA2 7D            [ 4] 2225 	ld	a, l
                           2226 ;src\CFG8266.c:440: if (bResponse)
   0FA3 B7            [ 4] 2227 	or	a, a
   0FA4 20 0A         [12] 2228 	jr	NZ,00105$
                           2229 ;src\CFG8266.c:442: ++speed;
   0FA6 DD 34 FB      [23] 2230 	inc	-5 (ix)
                           2231 ;src\CFG8266.c:444: while (speed<10);
   0FA9 DD 7E FB      [19] 2232 	ld	a, -5 (ix)
   0FAC D6 0A         [ 7] 2233 	sub	a, #0x0a
   0FAE 38 BE         [12] 2234 	jr	C,00103$
   0FB0                    2235 00105$:
                           2236 ;src\CFG8266.c:446: if (speed<10)
   0FB0 DD 7E FB      [19] 2237 	ld	a, -5 (ix)
   0FB3 D6 0A         [ 7] 2238 	sub	a, #0x0a
   0FB5 D2r4Er21      [10] 2239 	jp	NC, 00371$
                           2240 ;src\CFG8266.c:448: printf ("Baud Rate: %s\r\n",speedStr[speed]);
   0FB8 DD 7E FB      [19] 2241 	ld	a, -5 (ix)
   0FBB DD 77 FA      [19] 2242 	ld	-6 (ix), a
   0FBE AF            [ 4] 2243 	xor	a, a
   0FBF DD 77 FB      [19] 2244 	ld	-5 (ix), a
   0FC2 DD 7E FA      [19] 2245 	ld	a, -6 (ix)
   0FC5 DD 77 FA      [19] 2246 	ld	-6 (ix), a
   0FC8 DD 7E FB      [19] 2247 	ld	a, -5 (ix)
   0FCB DD 77 FB      [19] 2248 	ld	-5 (ix), a
   0FCE DD CB FA 26   [23] 2249 	sla	-6 (ix)
   0FD2 DD CB FB 16   [23] 2250 	rl	-5 (ix)
   0FD6 3Er0C         [ 7] 2251 	ld	a, #<(_speedStr)
   0FD8 DD 86 FA      [19] 2252 	add	a, -6 (ix)
   0FDB DD 77 F8      [19] 2253 	ld	-8 (ix), a
   0FDE 3Es00         [ 7] 2254 	ld	a, #>(_speedStr)
   0FE0 DD 8E FB      [19] 2255 	adc	a, -5 (ix)
   0FE3 DD 77 F9      [19] 2256 	ld	-7 (ix), a
   0FE6 DD 6E F8      [19] 2257 	ld	l, -8 (ix)
   0FE9 DD 66 F9      [19] 2258 	ld	h, -7 (ix)
   0FEC 7E            [ 7] 2259 	ld	a, (hl)
   0FED DD 77 FA      [19] 2260 	ld	-6 (ix), a
   0FF0 23            [ 6] 2261 	inc	hl
   0FF1 7E            [ 7] 2262 	ld	a, (hl)
   0FF2 DD 77 FB      [19] 2263 	ld	-5 (ix), a
   0FF5 DD 6E FA      [19] 2264 	ld	l, -6 (ix)
   0FF8 DD 66 FB      [19] 2265 	ld	h, -5 (ix)
   0FFB E5            [11] 2266 	push	hl
   0FFC 21rCFr21      [10] 2267 	ld	hl, #___str_32
   0FFF E5            [11] 2268 	push	hl
   1000 CDr00r00      [17] 2269 	call	_printf
   1003 F1            [10] 2270 	pop	af
                           2271 ;src\CFG8266.c:449: TxByte('V'); //Request version
   1004 26 56         [ 7] 2272 	ld	h,#0x56
   1006 E3            [19] 2273 	ex	(sp),hl
   1007 33            [ 6] 2274 	inc	sp
   1008 CDr4Fr07      [17] 2275 	call	_TxByte
   100B 33            [ 6] 2276 	inc	sp
                           2277 ;src\CFG8266.c:450: bResponse = WaitForRXData(versionResponse,1,20,true,false,NULL,0);
   100C 21 00 00      [10] 2278 	ld	hl, #0x0000
   100F E5            [11] 2279 	push	hl
   1010 2E 00         [ 7] 2280 	ld	l, #0x00
   1012 E5            [11] 2281 	push	hl
   1013 AF            [ 4] 2282 	xor	a, a
   1014 57            [ 4] 2283 	ld	d,a
   1015 1E 01         [ 7] 2284 	ld	e,#0x01
   1017 D5            [11] 2285 	push	de
   1018 2E 14         [ 7] 2286 	ld	l, #0x14
   101A E5            [11] 2287 	push	hl
   101B 2E 01         [ 7] 2288 	ld	l, #0x01
   101D E5            [11] 2289 	push	hl
   101E 21r0Br01      [10] 2290 	ld	hl, #_versionResponse
   1021 E5            [11] 2291 	push	hl
   1022 CDrCBr08      [17] 2292 	call	_WaitForRXData
   1025 FD 21 0C 00   [14] 2293 	ld	iy, #12
   1029 FD 39         [15] 2294 	add	iy, sp
   102B FD F9         [10] 2295 	ld	sp, iy
                           2296 ;src\CFG8266.c:451: if (bResponse)
   102D DD 75 FB      [19] 2297 	ld	-5 (ix), l
   1030 7D            [ 4] 2298 	ld	a, l
   1031 B7            [ 4] 2299 	or	a, a
   1032 28 20         [12] 2300 	jr	Z,00113$
                           2301 ;src\CFG8266.c:453: while(!UartRXData());
   1034                    2302 00106$:
   1034 DB 07         [11] 2303 	in	a, (_myPort7)
   1036 D6 01         [ 7] 2304 	sub	a,#0x01
   1038 3E 00         [ 7] 2305 	ld	a, #0x00
   103A 17            [ 4] 2306 	rla
   103B CB 47         [ 8] 2307 	bit	0, a
   103D 20 F5         [12] 2308 	jr	NZ,00106$
                           2309 ;src\CFG8266.c:454: ucVerMajor = GetUARTData();
   103F DB 06         [11] 2310 	in	a, (_myPort6)
   1041 DD 77 FF      [19] 2311 	ld	-1 (ix), a
                           2312 ;src\CFG8266.c:455: while(!UartRXData());
   1044                    2313 00109$:
   1044 DB 07         [11] 2314 	in	a, (_myPort7)
   1046 D6 01         [ 7] 2315 	sub	a,#0x01
   1048 3E 00         [ 7] 2316 	ld	a, #0x00
   104A 17            [ 4] 2317 	rla
   104B CB 47         [ 8] 2318 	bit	0, a
   104D 20 F5         [12] 2319 	jr	NZ,00109$
                           2320 ;src\CFG8266.c:456: ucVerMinor = GetUARTData();
   104F DB 06         [11] 2321 	in	a, (_myPort6)
   1051 DD 77 FE      [19] 2322 	ld	-2 (ix), a
   1054                    2323 00113$:
                           2324 ;src\CFG8266.c:458: printf ("FW Version: %c.%c\r\n",ucVerMajor+'0',ucVerMinor+'0');
   1054 DD 4E FE      [19] 2325 	ld	c, -2 (ix)
   1057 06 00         [ 7] 2326 	ld	b, #0x00
   1059 21 30 00      [10] 2327 	ld	hl, #0x0030
   105C 09            [11] 2328 	add	hl, bc
   105D EB            [ 4] 2329 	ex	de, hl
   105E DD 4E FF      [19] 2330 	ld	c, -1 (ix)
   1061 06 00         [ 7] 2331 	ld	b, #0x00
   1063 21 30 00      [10] 2332 	ld	hl, #0x0030
   1066 09            [11] 2333 	add	hl, bc
   1067 D5            [11] 2334 	push	de
   1068 E5            [11] 2335 	push	hl
   1069 21rDFr21      [10] 2336 	ld	hl, #___str_33
   106C E5            [11] 2337 	push	hl
   106D CDr00r00      [17] 2338 	call	_printf
   1070 21 06 00      [10] 2339 	ld	hl, #6
   1073 39            [11] 2340 	add	hl, sp
   1074 F9            [ 6] 2341 	ld	sp, hl
                           2342 ;src\CFG8266.c:460: if ((ucScan)||(ucNagleOff)||(ucNagleOn)||(ucRadioOff)||(ucSetTimeout))
   1075 3Ar00r00      [13] 2343 	ld	a,(#_ucScan + 0)
   1078 B7            [ 4] 2344 	or	a, a
   1079 20 19         [12] 2345 	jr	NZ,00363$
   107B 3Ar09r00      [13] 2346 	ld	a,(#_ucNagleOff + 0)
   107E B7            [ 4] 2347 	or	a, a
   107F 20 13         [12] 2348 	jr	NZ,00363$
   1081 3Ar0Ar00      [13] 2349 	ld	a,(#_ucNagleOn + 0)
   1084 B7            [ 4] 2350 	or	a, a
   1085 20 0D         [12] 2351 	jr	NZ,00363$
   1087 3Ar0Br00      [13] 2352 	ld	a,(#_ucRadioOff + 0)
   108A B7            [ 4] 2353 	or	a, a
   108B 20 07         [12] 2354 	jr	NZ,00363$
   108D 3Ar0Cr00      [13] 2355 	ld	a,(#_ucSetTimeout + 0)
   1090 B7            [ 4] 2356 	or	a, a
   1091 CArE6r18      [10] 2357 	jp	Z, 00364$
   1094                    2358 00363$:
                           2359 ;src\CFG8266.c:463: if (ucScan)
   1094 3Ar00r00      [13] 2360 	ld	a,(#_ucScan + 0)
   1097 B7            [ 4] 2361 	or	a, a
   1098 CAr19r11      [10] 2362 	jp	Z, 00143$
                           2363 ;src\CFG8266.c:465: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   109B DD 7E FF      [19] 2364 	ld	a, -1 (ix)
   109E D6 01         [ 7] 2365 	sub	a, #0x01
   10A0 38 6C         [12] 2366 	jr	C,00126$
   10A2 DD 7E FE      [19] 2367 	ld	a, -2 (ix)
   10A5 D6 02         [ 7] 2368 	sub	a, #0x02
   10A7 38 65         [12] 2369 	jr	C,00126$
                           2370 ;src\CFG8266.c:467: TxByte('g'); //Request current AP status
   10A9 3E 67         [ 7] 2371 	ld	a, #0x67
   10AB F5            [11] 2372 	push	af
   10AC 33            [ 6] 2373 	inc	sp
   10AD CDr4Fr07      [17] 2374 	call	_TxByte
   10B0 33            [ 6] 2375 	inc	sp
                           2376 ;src\CFG8266.c:468: bResponse = WaitForRXData(apstsResponse,3,30,true,false,NULL,0);
   10B1 21 00 00      [10] 2377 	ld	hl, #0x0000
   10B4 E5            [11] 2378 	push	hl
   10B5 2E 00         [ 7] 2379 	ld	l, #0x00
   10B7 E5            [11] 2380 	push	hl
   10B8 AF            [ 4] 2381 	xor	a, a
   10B9 57            [ 4] 2382 	ld	d,a
   10BA 1E 01         [ 7] 2383 	ld	e,#0x01
   10BC D5            [11] 2384 	push	de
   10BD 2E 1E         [ 7] 2385 	ld	l, #0x1e
   10BF E5            [11] 2386 	push	hl
   10C0 2E 03         [ 7] 2387 	ld	l, #0x03
   10C2 E5            [11] 2388 	push	hl
   10C3 21r1Cr01      [10] 2389 	ld	hl, #_apstsResponse
   10C6 E5            [11] 2390 	push	hl
   10C7 CDrCBr08      [17] 2391 	call	_WaitForRXData
   10CA FD 21 0C 00   [14] 2392 	ld	iy, #12
   10CE FD 39         [15] 2393 	add	iy, sp
   10D0 FD F9         [10] 2394 	ld	sp, iy
                           2395 ;src\CFG8266.c:469: if (bResponse)
   10D2 DD 75 FB      [19] 2396 	ld	-5 (ix), l
   10D5 7D            [ 4] 2397 	ld	a, l
   10D6 B7            [ 4] 2398 	or	a, a
   10D7 28 35         [12] 2399 	jr	Z,00126$
                           2400 ;src\CFG8266.c:471: while(!UartRXData());
   10D9                    2401 00114$:
   10D9 DB 07         [11] 2402 	in	a, (_myPort7)
   10DB D6 01         [ 7] 2403 	sub	a,#0x01
   10DD 3E 00         [ 7] 2404 	ld	a, #0x00
   10DF 17            [ 4] 2405 	rla
   10E0 CB 47         [ 8] 2406 	bit	0, a
   10E2 20 F5         [12] 2407 	jr	NZ,00114$
                           2408 ;src\CFG8266.c:472: ucAPstsRspSize=GetUARTData();
   10E4 DB 06         [11] 2409 	in	a, (_myPort6)
   10E6 DD 77 FD      [19] 2410 	ld	-3 (ix), a
                           2411 ;src\CFG8266.c:476: while(!UartRXData());
   10E9 21 C5 0D      [10] 2412 	ld	hl, #3525
   10EC 39            [11] 2413 	add	hl, sp
   10ED EB            [ 4] 2414 	ex	de, hl
   10EE 01 00 00      [10] 2415 	ld	bc, #0x0000
   10F1                    2416 00117$:
   10F1 DB 07         [11] 2417 	in	a, (_myPort7)
   10F3 D6 01         [ 7] 2418 	sub	a,#0x01
   10F5 3E 00         [ 7] 2419 	ld	a, #0x00
   10F7 17            [ 4] 2420 	rla
   10F8 CB 47         [ 8] 2421 	bit	0, a
   10FA 20 F5         [12] 2422 	jr	NZ,00117$
                           2423 ;src\CFG8266.c:477: chAPStsInfo[i]=GetUARTData();
   10FC 6B            [ 4] 2424 	ld	l, e
   10FD 62            [ 4] 2425 	ld	h, d
   10FE 09            [11] 2426 	add	hl, bc
   10FF DB 06         [11] 2427 	in	a, (_myPort6)
   1101 77            [ 7] 2428 	ld	(hl), a
                           2429 ;src\CFG8266.c:478: ++i;
   1102 03            [ 6] 2430 	inc	bc
                           2431 ;src\CFG8266.c:480: while(i<ucAPstsRspSize);
   1103 DD 6E FD      [19] 2432 	ld	l, -3 (ix)
   1106 26 00         [ 7] 2433 	ld	h, #0x00
   1108 79            [ 4] 2434 	ld	a, c
   1109 95            [ 4] 2435 	sub	a, l
   110A 78            [ 4] 2436 	ld	a, b
   110B 9C            [ 4] 2437 	sbc	a, h
   110C 38 E3         [12] 2438 	jr	C,00117$
   110E                    2439 00126$:
                           2440 ;src\CFG8266.c:483: TxByte('S'); //Request SCAN
   110E 3E 53         [ 7] 2441 	ld	a, #0x53
   1110 F5            [11] 2442 	push	af
   1111 33            [ 6] 2443 	inc	sp
   1112 CDr4Fr07      [17] 2444 	call	_TxByte
   1115 33            [ 6] 2445 	inc	sp
   1116 C3rA8r11      [10] 2446 	jp	00144$
   1119                    2447 00143$:
                           2448 ;src\CFG8266.c:485: else if (ucNagleOff)
   1119 3Ar09r00      [13] 2449 	ld	a,(#_ucNagleOff + 0)
   111C B7            [ 4] 2450 	or	a, a
   111D 28 0B         [12] 2451 	jr	Z,00140$
                           2452 ;src\CFG8266.c:486: TxByte('N'); //Request nagle off for future connections
   111F 3E 4E         [ 7] 2453 	ld	a, #0x4e
   1121 F5            [11] 2454 	push	af
   1122 33            [ 6] 2455 	inc	sp
   1123 CDr4Fr07      [17] 2456 	call	_TxByte
   1126 33            [ 6] 2457 	inc	sp
   1127 C3rA8r11      [10] 2458 	jp	00144$
   112A                    2459 00140$:
                           2460 ;src\CFG8266.c:487: else if (ucNagleOn)
   112A 3Ar0Ar00      [13] 2461 	ld	a,(#_ucNagleOn + 0)
   112D B7            [ 4] 2462 	or	a, a
   112E 28 0A         [12] 2463 	jr	Z,00137$
                           2464 ;src\CFG8266.c:488: TxByte('D'); //Request nagle on for future connections
   1130 3E 44         [ 7] 2465 	ld	a, #0x44
   1132 F5            [11] 2466 	push	af
   1133 33            [ 6] 2467 	inc	sp
   1134 CDr4Fr07      [17] 2468 	call	_TxByte
   1137 33            [ 6] 2469 	inc	sp
   1138 18 6E         [12] 2470 	jr	00144$
   113A                    2471 00137$:
                           2472 ;src\CFG8266.c:489: else if (ucRadioOff)
   113A 3Ar0Br00      [13] 2473 	ld	a,(#_ucRadioOff + 0)
   113D B7            [ 4] 2474 	or	a, a
   113E 28 0A         [12] 2475 	jr	Z,00134$
                           2476 ;src\CFG8266.c:490: TxByte('O'); //Request to turn off Wi-Fi radio immediately
   1140 3E 4F         [ 7] 2477 	ld	a, #0x4f
   1142 F5            [11] 2478 	push	af
   1143 33            [ 6] 2479 	inc	sp
   1144 CDr4Fr07      [17] 2480 	call	_TxByte
   1147 33            [ 6] 2481 	inc	sp
   1148 18 5E         [12] 2482 	jr	00144$
   114A                    2483 00134$:
                           2484 ;src\CFG8266.c:491: else if (ucSetTimeout)
   114A 3Ar0Cr00      [13] 2485 	ld	a,(#_ucSetTimeout + 0)
   114D B7            [ 4] 2486 	or	a, a
   114E 28 58         [12] 2487 	jr	Z,00144$
                           2488 ;src\CFG8266.c:493: ucTimeOutMSB = ((unsigned char)((uiTimeout&0xff00)>>8));
   1150 FD 21r0Dr00   [14] 2489 	ld	iy, #_uiTimeout
   1154 FD 4E 01      [19] 2490 	ld	c, 1 (iy)
   1157 DD 71 FC      [19] 2491 	ld	-4 (ix), c
                           2492 ;src\CFG8266.c:494: ucTimeOutLSB = ((unsigned char)(uiTimeout&0xff));
   115A FD 7E 00      [19] 2493 	ld	a, 0 (iy)
   115D DD 77 FD      [19] 2494 	ld	-3 (ix), a
                           2495 ;src\CFG8266.c:495: if (uiTimeout)
   1160 FD 7E 01      [19] 2496 	ld	a, 1 (iy)
   1163 FD B6 00      [19] 2497 	or	a, 0 (iy)
   1166 28 0F         [12] 2498 	jr	Z,00129$
                           2499 ;src\CFG8266.c:496: printf("\r\nSetting Wi-Fi idle timeout to %u...\r\n",uiTimeout);
   1168 2Ar0Dr00      [16] 2500 	ld	hl, (_uiTimeout)
   116B E5            [11] 2501 	push	hl
   116C 21rF3r21      [10] 2502 	ld	hl, #___str_34
   116F E5            [11] 2503 	push	hl
   1170 CDr00r00      [17] 2504 	call	_printf
   1173 F1            [10] 2505 	pop	af
   1174 F1            [10] 2506 	pop	af
   1175 18 08         [12] 2507 	jr	00130$
   1177                    2508 00129$:
                           2509 ;src\CFG8266.c:498: printf("\r\nSetting Wi-Fi to always on!\r\n");
   1177 21r1Br22      [10] 2510 	ld	hl, #___str_36
   117A E5            [11] 2511 	push	hl
   117B CDr00r00      [17] 2512 	call	_puts
   117E F1            [10] 2513 	pop	af
   117F                    2514 00130$:
                           2515 ;src\CFG8266.c:499: TxByte('T'); //Request to set time-out
   117F 3E 54         [ 7] 2516 	ld	a, #0x54
   1181 F5            [11] 2517 	push	af
   1182 33            [ 6] 2518 	inc	sp
   1183 CDr4Fr07      [17] 2519 	call	_TxByte
   1186 33            [ 6] 2520 	inc	sp
                           2521 ;src\CFG8266.c:500: TxByte(0);
   1187 AF            [ 4] 2522 	xor	a, a
   1188 F5            [11] 2523 	push	af
   1189 33            [ 6] 2524 	inc	sp
   118A CDr4Fr07      [17] 2525 	call	_TxByte
   118D 33            [ 6] 2526 	inc	sp
                           2527 ;src\CFG8266.c:501: TxByte(2);
   118E 3E 02         [ 7] 2528 	ld	a, #0x02
   1190 F5            [11] 2529 	push	af
   1191 33            [ 6] 2530 	inc	sp
   1192 CDr4Fr07      [17] 2531 	call	_TxByte
   1195 33            [ 6] 2532 	inc	sp
                           2533 ;src\CFG8266.c:502: TxByte(ucTimeOutMSB);
   1196 DD 7E FC      [19] 2534 	ld	a, -4 (ix)
   1199 F5            [11] 2535 	push	af
   119A 33            [ 6] 2536 	inc	sp
   119B CDr4Fr07      [17] 2537 	call	_TxByte
   119E 33            [ 6] 2538 	inc	sp
                           2539 ;src\CFG8266.c:503: TxByte(ucTimeOutLSB);
   119F DD 7E FD      [19] 2540 	ld	a, -3 (ix)
   11A2 F5            [11] 2541 	push	af
   11A3 33            [ 6] 2542 	inc	sp
   11A4 CDr4Fr07      [17] 2543 	call	_TxByte
   11A7 33            [ 6] 2544 	inc	sp
   11A8                    2545 00144$:
                           2546 ;src\CFG8266.c:506: if (ucScan)
   11A8 3Ar00r00      [13] 2547 	ld	a,(#_ucScan + 0)
   11AB B7            [ 4] 2548 	or	a, a
   11AC 28 27         [12] 2549 	jr	Z,00157$
                           2550 ;src\CFG8266.c:507: bResponse = WaitForRXData(scanResponse,2,60,true,false,NULL,0);
   11AE 21 00 00      [10] 2551 	ld	hl, #0x0000
   11B1 E5            [11] 2552 	push	hl
   11B2 2E 00         [ 7] 2553 	ld	l, #0x00
   11B4 E5            [11] 2554 	push	hl
   11B5 AF            [ 4] 2555 	xor	a, a
   11B6 57            [ 4] 2556 	ld	d,a
   11B7 1E 01         [ 7] 2557 	ld	e,#0x01
   11B9 D5            [11] 2558 	push	de
   11BA 2E 3C         [ 7] 2559 	ld	l, #0x3c
   11BC E5            [11] 2560 	push	hl
   11BD 2E 02         [ 7] 2561 	ld	l, #0x02
   11BF E5            [11] 2562 	push	hl
   11C0 21r10r01      [10] 2563 	ld	hl, #_scanResponse
   11C3 E5            [11] 2564 	push	hl
   11C4 CDrCBr08      [17] 2565 	call	_WaitForRXData
   11C7 FD 21 0C 00   [14] 2566 	ld	iy, #12
   11CB FD 39         [15] 2567 	add	iy, sp
   11CD FD F9         [10] 2568 	ld	sp, iy
   11CF DD 75 FB      [19] 2569 	ld	-5 (ix), l
   11D2 C3r84r12      [10] 2570 	jp	00158$
   11D5                    2571 00157$:
                           2572 ;src\CFG8266.c:508: else if (ucNagleOff)
   11D5 3Ar09r00      [13] 2573 	ld	a,(#_ucNagleOff + 0)
   11D8 B7            [ 4] 2574 	or	a, a
   11D9 28 27         [12] 2575 	jr	Z,00154$
                           2576 ;src\CFG8266.c:509: bResponse = WaitForRXData(nagleoffResponse,2,60,true,false,NULL,0);
   11DB 21 00 00      [10] 2577 	ld	hl, #0x0000
   11DE E5            [11] 2578 	push	hl
   11DF 2E 00         [ 7] 2579 	ld	l, #0x00
   11E1 E5            [11] 2580 	push	hl
   11E2 AF            [ 4] 2581 	xor	a, a
   11E3 57            [ 4] 2582 	ld	d,a
   11E4 1E 01         [ 7] 2583 	ld	e,#0x01
   11E6 D5            [11] 2584 	push	de
   11E7 2E 3C         [ 7] 2585 	ld	l, #0x3c
   11E9 E5            [11] 2586 	push	hl
   11EA 2E 02         [ 7] 2587 	ld	l, #0x02
   11EC E5            [11] 2588 	push	hl
   11ED 21r16r01      [10] 2589 	ld	hl, #_nagleoffResponse
   11F0 E5            [11] 2590 	push	hl
   11F1 CDrCBr08      [17] 2591 	call	_WaitForRXData
   11F4 FD 21 0C 00   [14] 2592 	ld	iy, #12
   11F8 FD 39         [15] 2593 	add	iy, sp
   11FA FD F9         [10] 2594 	ld	sp, iy
   11FC DD 75 FB      [19] 2595 	ld	-5 (ix), l
   11FF C3r84r12      [10] 2596 	jp	00158$
   1202                    2597 00154$:
                           2598 ;src\CFG8266.c:510: else if (ucNagleOn)
   1202 3Ar0Ar00      [13] 2599 	ld	a,(#_ucNagleOn + 0)
   1205 B7            [ 4] 2600 	or	a, a
   1206 28 26         [12] 2601 	jr	Z,00151$
                           2602 ;src\CFG8266.c:511: bResponse = WaitForRXData(nagleonResponse,2,60,true,false,NULL,0);
   1208 21 00 00      [10] 2603 	ld	hl, #0x0000
   120B E5            [11] 2604 	push	hl
   120C 2E 00         [ 7] 2605 	ld	l, #0x00
   120E E5            [11] 2606 	push	hl
   120F AF            [ 4] 2607 	xor	a, a
   1210 57            [ 4] 2608 	ld	d,a
   1211 1E 01         [ 7] 2609 	ld	e,#0x01
   1213 D5            [11] 2610 	push	de
   1214 2E 3C         [ 7] 2611 	ld	l, #0x3c
   1216 E5            [11] 2612 	push	hl
   1217 2E 02         [ 7] 2613 	ld	l, #0x02
   1219 E5            [11] 2614 	push	hl
   121A 21r14r01      [10] 2615 	ld	hl, #_nagleonResponse
   121D E5            [11] 2616 	push	hl
   121E CDrCBr08      [17] 2617 	call	_WaitForRXData
   1221 FD 21 0C 00   [14] 2618 	ld	iy, #12
   1225 FD 39         [15] 2619 	add	iy, sp
   1227 FD F9         [10] 2620 	ld	sp, iy
   1229 DD 75 FB      [19] 2621 	ld	-5 (ix), l
   122C 18 56         [12] 2622 	jr	00158$
   122E                    2623 00151$:
                           2624 ;src\CFG8266.c:512: else if (ucRadioOff)
   122E 3Ar0Br00      [13] 2625 	ld	a,(#_ucRadioOff + 0)
   1231 B7            [ 4] 2626 	or	a, a
   1232 28 26         [12] 2627 	jr	Z,00148$
                           2628 ;src\CFG8266.c:513: bResponse = WaitForRXData(radioOffResponse,2,60,true,false,NULL,0);
   1234 21 00 00      [10] 2629 	ld	hl, #0x0000
   1237 E5            [11] 2630 	push	hl
   1238 2E 00         [ 7] 2631 	ld	l, #0x00
   123A E5            [11] 2632 	push	hl
   123B AF            [ 4] 2633 	xor	a, a
   123C 57            [ 4] 2634 	ld	d,a
   123D 1E 01         [ 7] 2635 	ld	e,#0x01
   123F D5            [11] 2636 	push	de
   1240 2E 3C         [ 7] 2637 	ld	l, #0x3c
   1242 E5            [11] 2638 	push	hl
   1243 2E 02         [ 7] 2639 	ld	l, #0x02
   1245 E5            [11] 2640 	push	hl
   1246 21r2Br01      [10] 2641 	ld	hl, #_radioOffResponse
   1249 E5            [11] 2642 	push	hl
   124A CDrCBr08      [17] 2643 	call	_WaitForRXData
   124D FD 21 0C 00   [14] 2644 	ld	iy, #12
   1251 FD 39         [15] 2645 	add	iy, sp
   1253 FD F9         [10] 2646 	ld	sp, iy
   1255 DD 75 FB      [19] 2647 	ld	-5 (ix), l
   1258 18 2A         [12] 2648 	jr	00158$
   125A                    2649 00148$:
                           2650 ;src\CFG8266.c:514: else if (ucSetTimeout)
   125A 3Ar0Cr00      [13] 2651 	ld	a,(#_ucSetTimeout + 0)
   125D B7            [ 4] 2652 	or	a, a
   125E 28 24         [12] 2653 	jr	Z,00158$
                           2654 ;src\CFG8266.c:515: bResponse = WaitForRXData(responseRadioOnTimeout,2,60,true,false,NULL,0);
   1260 21 00 00      [10] 2655 	ld	hl, #0x0000
   1263 E5            [11] 2656 	push	hl
   1264 2E 00         [ 7] 2657 	ld	l, #0x00
   1266 E5            [11] 2658 	push	hl
   1267 AF            [ 4] 2659 	xor	a, a
   1268 57            [ 4] 2660 	ld	d,a
   1269 1E 01         [ 7] 2661 	ld	e,#0x01
   126B D5            [11] 2662 	push	de
   126C 2E 3C         [ 7] 2663 	ld	l, #0x3c
   126E E5            [11] 2664 	push	hl
   126F 2E 02         [ 7] 2665 	ld	l, #0x02
   1271 E5            [11] 2666 	push	hl
   1272 21r29r01      [10] 2667 	ld	hl, #_responseRadioOnTimeout
   1275 E5            [11] 2668 	push	hl
   1276 CDrCBr08      [17] 2669 	call	_WaitForRXData
   1279 FD 21 0C 00   [14] 2670 	ld	iy, #12
   127D FD 39         [15] 2671 	add	iy, sp
   127F FD F9         [10] 2672 	ld	sp, iy
   1281 DD 75 FB      [19] 2673 	ld	-5 (ix), l
   1284                    2674 00158$:
                           2675 ;src\CFG8266.c:518: if ((bResponse)&&(ucScan))
   1284 DD 7E FB      [19] 2676 	ld	a, -5 (ix)
   1287 B7            [ 4] 2677 	or	a, a
   1288 CAr52r18      [10] 2678 	jp	Z, 00294$
   128B FD 21r00r00   [14] 2679 	ld	iy, #_ucScan
   128F FD 7E 00      [19] 2680 	ld	a, 0 (iy)
   1292 B7            [ 4] 2681 	or	a, a
   1293 CAr52r18      [10] 2682 	jp	Z, 00294$
                           2683 ;src\CFG8266.c:521: do
   1296 0E 14         [ 7] 2684 	ld	c, #0x14
   1298                    2685 00161$:
                           2686 ;src\CFG8266.c:523: --ucRetries;
   1298 0D            [ 4] 2687 	dec	c
                           2688 ;src\CFG8266.c:524: for (ucHalt = 30;ucHalt>0;--ucHalt)
   1299 06 1E         [ 7] 2689 	ld	b, #0x1e
   129B                    2690 00379$:
                           2691 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   129B 76            [ 4] 2692 	halt
                           2693 ;src\CFG8266.c:524: for (ucHalt = 30;ucHalt>0;--ucHalt)
   129C 78            [ 4] 2694 	ld	a, b
   129D 3D            [ 4] 2695 	dec	a
   129E 47            [ 4] 2696 	ld	b, a
   129F B7            [ 4] 2697 	or	a, a
   12A0 20 F9         [12] 2698 	jr	NZ,00379$
                           2699 ;src\CFG8266.c:526: TxByte('s'); //Request SCAN result
   12A2 C5            [11] 2700 	push	bc
   12A3 3E 73         [ 7] 2701 	ld	a, #0x73
   12A5 F5            [11] 2702 	push	af
   12A6 33            [ 6] 2703 	inc	sp
   12A7 CDr4Fr07      [17] 2704 	call	_TxByte
   12AA 33            [ 6] 2705 	inc	sp
   12AB 21 02 00      [10] 2706 	ld	hl, #0x0002
   12AE E5            [11] 2707 	push	hl
   12AF 21r12r01      [10] 2708 	ld	hl, #_scanresNoNetwork
   12B2 E5            [11] 2709 	push	hl
   12B3 AF            [ 4] 2710 	xor	a, a
   12B4 F5            [11] 2711 	push	af
   12B5 33            [ 6] 2712 	inc	sp
   12B6 AF            [ 4] 2713 	xor	a, a
   12B7 F5            [11] 2714 	push	af
   12B8 33            [ 6] 2715 	inc	sp
   12B9 21 3C 00      [10] 2716 	ld	hl, #0x003c
   12BC E5            [11] 2717 	push	hl
   12BD 2E 02         [ 7] 2718 	ld	l, #0x02
   12BF E5            [11] 2719 	push	hl
   12C0 21r18r01      [10] 2720 	ld	hl, #_scanresResponse
   12C3 E5            [11] 2721 	push	hl
   12C4 CDrCBr08      [17] 2722 	call	_WaitForRXData
   12C7 FD 21 0C 00   [14] 2723 	ld	iy, #12
   12CB FD 39         [15] 2724 	add	iy, sp
   12CD FD F9         [10] 2725 	ld	sp, iy
   12CF C1            [10] 2726 	pop	bc
                           2727 ;src\CFG8266.c:529: while ((ucRetries)&&(!bResponse));
   12D0 79            [ 4] 2728 	ld	a, c
   12D1 B7            [ 4] 2729 	or	a, a
   12D2 28 04         [12] 2730 	jr	Z,00163$
   12D4 7D            [ 4] 2731 	ld	a, l
   12D5 B7            [ 4] 2732 	or	a, a
   12D6 28 C0         [12] 2733 	jr	Z,00161$
   12D8                    2734 00163$:
                           2735 ;src\CFG8266.c:531: if (bResponse==1)
   12D8 2D            [ 4] 2736 	dec	l
   12D9 C2r47r18      [10] 2737 	jp	NZ,00268$
                           2738 ;src\CFG8266.c:534: while(!UartRXData());
   12DC                    2739 00164$:
   12DC DB 07         [11] 2740 	in	a, (_myPort7)
   12DE D6 01         [ 7] 2741 	sub	a,#0x01
   12E0 3E 00         [ 7] 2742 	ld	a, #0x00
   12E2 17            [ 4] 2743 	rla
   12E3 CB 47         [ 8] 2744 	bit	0, a
   12E5 20 F5         [12] 2745 	jr	NZ,00164$
                           2746 ;src\CFG8266.c:535: ucAPs = GetUARTData();
   12E7 DB 06         [11] 2747 	in	a, (_myPort6)
   12E9 DD 77 F0      [19] 2748 	ld	-16 (ix), a
                           2749 ;src\CFG8266.c:536: if (ucAPs>100)
   12EC 3E 64         [ 7] 2750 	ld	a, #0x64
   12EE DD 96 F0      [19] 2751 	sub	a, -16 (ix)
   12F1 30 04         [12] 2752 	jr	NC,00168$
                           2753 ;src\CFG8266.c:537: ucAPs=100;
   12F3 DD 36 F0 64   [19] 2754 	ld	-16 (ix), #0x64
   12F7                    2755 00168$:
                           2756 ;src\CFG8266.c:539: printf ("\r\n");
   12F7 21r3Ar22      [10] 2757 	ld	hl, #___str_38
   12FA E5            [11] 2758 	push	hl
   12FB CDr00r00      [17] 2759 	call	_puts
   12FE F1            [10] 2760 	pop	af
                           2761 ;src\CFG8266.c:540: do
   12FF 21 53 00      [10] 2762 	ld	hl, #83
   1302 39            [11] 2763 	add	hl, sp
   1303 DD 75 F1      [19] 2764 	ld	-15 (ix), l
   1306 DD 74 F2      [19] 2765 	ld	-14 (ix), h
   1309 AF            [ 4] 2766 	xor	a, a
   130A DD 77 FD      [19] 2767 	ld	-3 (ix), a
                           2768 ;src\CFG8266.c:545: while(!UartRXData());
   130D                    2769 00433$:
   130D DD 4E FD      [19] 2770 	ld	c, -3 (ix)
   1310 06 00         [ 7] 2771 	ld	b, #0x00
   1312 69            [ 4] 2772 	ld	l, c
   1313 60            [ 4] 2773 	ld	h, b
   1314 29            [11] 2774 	add	hl, hl
   1315 29            [11] 2775 	add	hl, hl
   1316 29            [11] 2776 	add	hl, hl
   1317 29            [11] 2777 	add	hl, hl
   1318 09            [11] 2778 	add	hl, bc
   1319 29            [11] 2779 	add	hl, hl
   131A EB            [ 4] 2780 	ex	de, hl
   131B 7B            [ 4] 2781 	ld	a, e
   131C DD 86 F1      [19] 2782 	add	a, -15 (ix)
   131F 4F            [ 4] 2783 	ld	c, a
   1320 7A            [ 4] 2784 	ld	a, d
   1321 DD 8E F2      [19] 2785 	adc	a, -14 (ix)
   1324 47            [ 4] 2786 	ld	b, a
   1325 1E 00         [ 7] 2787 	ld	e, #0x00
   1327                    2788 00169$:
   1327 DB 07         [11] 2789 	in	a, (_myPort7)
   1329 D6 01         [ 7] 2790 	sub	a,#0x01
   132B 3E 00         [ 7] 2791 	ld	a, #0x00
   132D 17            [ 4] 2792 	rla
   132E CB 47         [ 8] 2793 	bit	0, a
   1330 20 F5         [12] 2794 	jr	NZ,00169$
                           2795 ;src\CFG8266.c:546: rx_data=GetUARTData();
   1332 DB 06         [11] 2796 	in	a, (_myPort6)
   1334 DD 77 FC      [19] 2797 	ld	-4 (ix), a
                           2798 ;src\CFG8266.c:547: stAP[tx_data].APName[ucIndex++]=rx_data;
   1337 7B            [ 4] 2799 	ld	a, e
   1338 1C            [ 4] 2800 	inc	e
   1339 6F            [ 4] 2801 	ld	l, a
   133A 26 00         [ 7] 2802 	ld	h, #0x00
   133C 09            [11] 2803 	add	hl, bc
   133D DD 7E FC      [19] 2804 	ld	a, -4 (ix)
   1340 77            [ 7] 2805 	ld	(hl), a
                           2806 ;src\CFG8266.c:549: while(rx_data!=0);
   1341 DD 7E FC      [19] 2807 	ld	a, -4 (ix)
   1344 B7            [ 4] 2808 	or	a, a
   1345 20 E0         [12] 2809 	jr	NZ,00169$
                           2810 ;src\CFG8266.c:550: while(!UartRXData());
   1347                    2811 00175$:
   1347 DB 07         [11] 2812 	in	a, (_myPort7)
   1349 D6 01         [ 7] 2813 	sub	a,#0x01
   134B 3E 00         [ 7] 2814 	ld	a, #0x00
   134D 17            [ 4] 2815 	rla
   134E CB 47         [ 8] 2816 	bit	0, a
   1350 20 F5         [12] 2817 	jr	NZ,00175$
                           2818 ;src\CFG8266.c:551: rx_data=GetUARTData();
   1352 DB 06         [11] 2819 	in	a, (_myPort6)
   1354 4F            [ 4] 2820 	ld	c, a
                           2821 ;src\CFG8266.c:552: stAP[tx_data].isEncrypted = (rx_data == 'E') ? 1 : 0;
   1355 DD 5E FD      [19] 2822 	ld	e, -3 (ix)
   1358 16 00         [ 7] 2823 	ld	d, #0x00
   135A 6B            [ 4] 2824 	ld	l, e
   135B 62            [ 4] 2825 	ld	h, d
   135C 29            [11] 2826 	add	hl, hl
   135D 29            [11] 2827 	add	hl, hl
   135E 29            [11] 2828 	add	hl, hl
   135F 29            [11] 2829 	add	hl, hl
   1360 19            [11] 2830 	add	hl, de
   1361 29            [11] 2831 	add	hl, hl
   1362 EB            [ 4] 2832 	ex	de, hl
   1363 DD 7E F1      [19] 2833 	ld	a, -15 (ix)
   1366 83            [ 4] 2834 	add	a, e
   1367 5F            [ 4] 2835 	ld	e, a
   1368 DD 7E F2      [19] 2836 	ld	a, -14 (ix)
   136B 8A            [ 4] 2837 	adc	a, d
   136C 57            [ 4] 2838 	ld	d, a
   136D 21 21 00      [10] 2839 	ld	hl, #0x0021
   1370 19            [11] 2840 	add	hl, de
   1371 DD 75 F9      [19] 2841 	ld	-7 (ix), l
   1374 DD 74 FA      [19] 2842 	ld	-6 (ix), h
   1377 79            [ 4] 2843 	ld	a, c
   1378 D6 45         [ 7] 2844 	sub	a, #0x45
   137A 20 0A         [12] 2845 	jr	NZ,00392$
   137C DD 36 FB 01   [19] 2846 	ld	-5 (ix), #0x01
   1380 AF            [ 4] 2847 	xor	a, a
   1381 DD 77 FC      [19] 2848 	ld	-4 (ix), a
   1384 18 07         [12] 2849 	jr	00393$
   1386                    2850 00392$:
   1386 AF            [ 4] 2851 	xor	a, a
   1387 DD 77 FB      [19] 2852 	ld	-5 (ix), a
   138A DD 77 FC      [19] 2853 	ld	-4 (ix), a
   138D                    2854 00393$:
   138D DD 7E FB      [19] 2855 	ld	a, -5 (ix)
   1390 DD 6E F9      [19] 2856 	ld	l, -7 (ix)
   1393 DD 66 FA      [19] 2857 	ld	h, -6 (ix)
   1396 77            [ 7] 2858 	ld	(hl), a
                           2859 ;src\CFG8266.c:553: ++tx_data;
   1397 DD 34 FD      [23] 2860 	inc	-3 (ix)
                           2861 ;src\CFG8266.c:555: while (tx_data!=ucAPs);
   139A DD 7E FD      [19] 2862 	ld	a, -3 (ix)
   139D DD 96 F0      [19] 2863 	sub	a, -16 (ix)
   13A0 C2r0Dr13      [10] 2864 	jp	NZ,00433$
                           2865 ;src\CFG8266.c:556: ClearUartData();
   13A3 3E 14         [ 7] 2866 	ld	a, #0x14
   13A5 D3 06         [11] 2867 	out	(_myPort6), a
                           2868 ;src\CFG8266.c:558: do
   13A7 DD 7E FE      [19] 2869 	ld	a, -2 (ix)
   13AA D6 02         [ 7] 2870 	sub	a, #0x02
   13AC 3E 00         [ 7] 2871 	ld	a, #0x00
   13AE 17            [ 4] 2872 	rla
   13AF DD 77 F3      [19] 2873 	ld	-13 (ix), a
   13B2 DD 7E FF      [19] 2874 	ld	a, -1 (ix)
   13B5 D6 01         [ 7] 2875 	sub	a, #0x01
   13B7 3E 00         [ 7] 2876 	ld	a, #0x00
   13B9 17            [ 4] 2877 	rla
   13BA DD 77 F4      [19] 2878 	ld	-12 (ix), a
   13BD 21 C5 0D      [10] 2879 	ld	hl, #3525
   13C0 39            [11] 2880 	add	hl, sp
   13C1 DD 75 F5      [19] 2881 	ld	-11 (ix), l
   13C4 DD 74 F6      [19] 2882 	ld	-10 (ix), h
   13C7 DD 7E F5      [19] 2883 	ld	a, -11 (ix)
   13CA C6 01         [ 7] 2884 	add	a, #0x01
   13CC DD 77 F7      [19] 2885 	ld	-9 (ix), a
   13CF DD 7E F6      [19] 2886 	ld	a, -10 (ix)
   13D2 CE 00         [ 7] 2887 	adc	a, #0x00
   13D4 DD 77 F8      [19] 2888 	ld	-8 (ix), a
   13D7 AF            [ 4] 2889 	xor	a, a
   13D8 DD 77 FE      [19] 2890 	ld	-2 (ix), a
   13DB                    2891 00264$:
                           2892 ;src\CFG8266.c:560: Cls();
   13DB CDr00r00      [17] 2893 	call	_Cls
                           2894 ;src\CFG8266.c:561: printf("%s%s\r\n\n",strAPSts[chAPStsInfo[0]],&chAPStsInfo[1]);
   13DE DD 7E F7      [19] 2895 	ld	a, -9 (ix)
   13E1 DD 77 FA      [19] 2896 	ld	-6 (ix), a
   13E4 DD 7E F8      [19] 2897 	ld	a, -8 (ix)
   13E7 DD 77 FB      [19] 2898 	ld	-5 (ix), a
   13EA DD 6E F5      [19] 2899 	ld	l, -11 (ix)
   13ED DD 66 F6      [19] 2900 	ld	h, -10 (ix)
   13F0 7E            [ 7] 2901 	ld	a, (hl)
   13F1 DD 77 FF      [19] 2902 	ld	-1 (ix), a
   13F4 DD 77 FC      [19] 2903 	ld	-4 (ix), a
   13F7 AF            [ 4] 2904 	xor	a, a
   13F8 DD 77 FD      [19] 2905 	ld	-3 (ix), a
   13FB DD 7E FC      [19] 2906 	ld	a, -4 (ix)
   13FE FD 21 10 00   [14] 2907 	ld	iy, #16
   1402 FD 39         [15] 2908 	add	iy, sp
   1404 FD 77 00      [19] 2909 	ld	0 (iy), a
   1407 DD 7E FD      [19] 2910 	ld	a, -3 (ix)
   140A FD 77 01      [19] 2911 	ld	1 (iy), a
   140D FD CB 00 26   [23] 2912 	sla	0 (iy)
   1411 FD CB 01 16   [23] 2913 	rl	1 (iy)
   1415 3Er00         [ 7] 2914 	ld	a, #<(_strAPSts)
   1417 21 10 00      [10] 2915 	ld	hl, #16
   141A 39            [11] 2916 	add	hl, sp
   141B 86            [ 7] 2917 	add	a, (hl)
   141C DD 77 FC      [19] 2918 	ld	-4 (ix), a
   141F 3Es00         [ 7] 2919 	ld	a, #>(_strAPSts)
   1421 23            [ 6] 2920 	inc	hl
   1422 8E            [ 7] 2921 	adc	a, (hl)
   1423 DD 77 FD      [19] 2922 	ld	-3 (ix), a
   1426 DD 6E FC      [19] 2923 	ld	l, -4 (ix)
   1429 DD 66 FD      [19] 2924 	ld	h, -3 (ix)
   142C 7E            [ 7] 2925 	ld	a, (hl)
   142D DD 77 FC      [19] 2926 	ld	-4 (ix), a
   1430 23            [ 6] 2927 	inc	hl
   1431 7E            [ 7] 2928 	ld	a, (hl)
   1432 DD 77 FD      [19] 2929 	ld	-3 (ix), a
   1435 DD 6E FA      [19] 2930 	ld	l, -6 (ix)
   1438 DD 66 FB      [19] 2931 	ld	h, -5 (ix)
   143B E5            [11] 2932 	push	hl
   143C DD 6E FC      [19] 2933 	ld	l, -4 (ix)
   143F DD 66 FD      [19] 2934 	ld	h, -3 (ix)
   1442 E5            [11] 2935 	push	hl
   1443 21r3Cr22      [10] 2936 	ld	hl, #___str_39
   1446 E5            [11] 2937 	push	hl
   1447 CDr00r00      [17] 2938 	call	_printf
   144A 21 06 00      [10] 2939 	ld	hl, #6
   144D 39            [11] 2940 	add	hl, sp
   144E F9            [ 6] 2941 	ld	sp, hl
                           2942 ;src\CFG8266.c:562: printf("Choose AP:\r\n\n");
   144F 21r44r22      [10] 2943 	ld	hl, #___str_41
   1452 E5            [11] 2944 	push	hl
   1453 CDr00r00      [17] 2945 	call	_puts
   1456 F1            [10] 2946 	pop	af
                           2947 ;src\CFG8266.c:564: ucIndex = scanPageLimit*ucScanPage;
   1457 DD 7E FE      [19] 2948 	ld	a, -2 (ix)
   145A 4F            [ 4] 2949 	ld	c, a
   145B 87            [ 4] 2950 	add	a, a
   145C 87            [ 4] 2951 	add	a, a
   145D 81            [ 4] 2952 	add	a, c
   145E 87            [ 4] 2953 	add	a, a
   145F DD 77 FF      [19] 2954 	ld	-1 (ix), a
                           2955 ;src\CFG8266.c:566: if ((ucAPs-ucIndex)<=scanPageLimit)
   1462 DD 7E F0      [19] 2956 	ld	a, -16 (ix)
   1465 DD 77 F9      [19] 2957 	ld	-7 (ix), a
   1468 AF            [ 4] 2958 	xor	a, a
   1469 DD 77 FA      [19] 2959 	ld	-6 (ix), a
   146C DD 7E FF      [19] 2960 	ld	a, -1 (ix)
   146F FD 21 10 00   [14] 2961 	ld	iy, #16
   1473 FD 39         [15] 2962 	add	iy, sp
   1475 FD 77 00      [19] 2963 	ld	0 (iy), a
   1478 AF            [ 4] 2964 	xor	a, a
   1479 FD 77 01      [19] 2965 	ld	1 (iy), a
   147C 21 10 00      [10] 2966 	ld	hl, #16
   147F 39            [11] 2967 	add	hl, sp
   1480 DD 7E F9      [19] 2968 	ld	a, -7 (ix)
   1483 96            [ 7] 2969 	sub	a, (hl)
   1484 DD 77 FC      [19] 2970 	ld	-4 (ix), a
   1487 DD 7E FA      [19] 2971 	ld	a, -6 (ix)
   148A 23            [ 6] 2972 	inc	hl
   148B 9E            [ 7] 2973 	sbc	a, (hl)
   148C DD 77 FD      [19] 2974 	ld	-3 (ix), a
   148F 3E 0A         [ 7] 2975 	ld	a, #0x0a
   1491 DD BE FC      [19] 2976 	cp	a, -4 (ix)
   1494 3E 00         [ 7] 2977 	ld	a, #0x00
   1496 DD 9E FD      [19] 2978 	sbc	a, -3 (ix)
   1499 E2r9Er14      [10] 2979 	jp	PO, 01009$
   149C EE 80         [ 7] 2980 	xor	a, #0x80
   149E                    2981 01009$:
   149E FArA9r14      [10] 2982 	jp	M, 00182$
                           2983 ;src\CFG8266.c:567: ucPageCheck = ucAPs;
   14A1 DD 7E F0      [19] 2984 	ld	a, -16 (ix)
   14A4 DD 77 FB      [19] 2985 	ld	-5 (ix), a
   14A7 18 0B         [12] 2986 	jr	00443$
   14A9                    2987 00182$:
                           2988 ;src\CFG8266.c:569: ucPageCheck = ucIndex + scanPageLimit;
   14A9 DD 7E FF      [19] 2989 	ld	a, -1 (ix)
   14AC DD 77 FD      [19] 2990 	ld	-3 (ix), a
   14AF C6 0A         [ 7] 2991 	add	a, #0x0a
   14B1 DD 77 FB      [19] 2992 	ld	-5 (ix), a
   14B4                    2993 00443$:
   14B4                    2994 00382$:
                           2995 ;src\CFG8266.c:571: for (;ucIndex<ucPageCheck;ucIndex++)
   14B4 DD 7E FF      [19] 2996 	ld	a, -1 (ix)
   14B7 DD 96 FB      [19] 2997 	sub	a, -5 (ix)
   14BA 30 66         [12] 2998 	jr	NC,00187$
                           2999 ;src\CFG8266.c:573: printf("%u - %s",(ucIndex%scanPageLimit),stAP[ucIndex].APName);
   14BC DD 4E FF      [19] 3000 	ld	c, -1 (ix)
   14BF 06 00         [ 7] 3001 	ld	b, #0x00
   14C1 69            [ 4] 3002 	ld	l, c
   14C2 60            [ 4] 3003 	ld	h, b
   14C3 29            [11] 3004 	add	hl, hl
   14C4 29            [11] 3005 	add	hl, hl
   14C5 29            [11] 3006 	add	hl, hl
   14C6 29            [11] 3007 	add	hl, hl
   14C7 09            [11] 3008 	add	hl, bc
   14C8 29            [11] 3009 	add	hl, hl
   14C9 EB            [ 4] 3010 	ex	de, hl
   14CA DD 6E F1      [19] 3011 	ld	l, -15 (ix)
   14CD DD 66 F2      [19] 3012 	ld	h, -14 (ix)
   14D0 19            [11] 3013 	add	hl, de
   14D1 DD 75 FC      [19] 3014 	ld	-4 (ix), l
   14D4 DD 74 FD      [19] 3015 	ld	-3 (ix), h
   14D7 DD 4E FF      [19] 3016 	ld	c, -1 (ix)
   14DA 06 00         [ 7] 3017 	ld	b, #0x00
   14DC D5            [11] 3018 	push	de
   14DD 21 0A 00      [10] 3019 	ld	hl, #0x000a
   14E0 E5            [11] 3020 	push	hl
   14E1 C5            [11] 3021 	push	bc
   14E2 CDr00r00      [17] 3022 	call	__modsint
   14E5 F1            [10] 3023 	pop	af
   14E6 F1            [10] 3024 	pop	af
   14E7 DD 4E FC      [19] 3025 	ld	c, -4 (ix)
   14EA DD 46 FD      [19] 3026 	ld	b, -3 (ix)
   14ED C5            [11] 3027 	push	bc
   14EE E5            [11] 3028 	push	hl
   14EF 21r51r22      [10] 3029 	ld	hl, #___str_42
   14F2 E5            [11] 3030 	push	hl
   14F3 CDr00r00      [17] 3031 	call	_printf
   14F6 21 06 00      [10] 3032 	ld	hl, #6
   14F9 39            [11] 3033 	add	hl, sp
   14FA F9            [ 6] 3034 	ld	sp, hl
   14FB D1            [10] 3035 	pop	de
                           3036 ;src\CFG8266.c:574: if (stAP[ucIndex].isEncrypted)
   14FC DD 6E F1      [19] 3037 	ld	l, -15 (ix)
   14FF DD 66 F2      [19] 3038 	ld	h, -14 (ix)
   1502 19            [11] 3039 	add	hl, de
   1503 11 21 00      [10] 3040 	ld	de, #0x0021
   1506 19            [11] 3041 	add	hl, de
   1507 7E            [ 7] 3042 	ld	a, (hl)
   1508 B7            [ 4] 3043 	or	a, a
   1509 28 0A         [12] 3044 	jr	Z,00185$
                           3045 ;src\CFG8266.c:575: printf(" (PWD)\r\n");
   150B 21r59r22      [10] 3046 	ld	hl, #___str_44
   150E E5            [11] 3047 	push	hl
   150F CDr00r00      [17] 3048 	call	_puts
   1512 F1            [10] 3049 	pop	af
   1513 18 08         [12] 3050 	jr	00383$
   1515                    3051 00185$:
                           3052 ;src\CFG8266.c:577: printf(" (OPEN)\r\n");
   1515 21r61r22      [10] 3053 	ld	hl, #___str_46
   1518 E5            [11] 3054 	push	hl
   1519 CDr00r00      [17] 3055 	call	_puts
   151C F1            [10] 3056 	pop	af
   151D                    3057 00383$:
                           3058 ;src\CFG8266.c:571: for (;ucIndex<ucPageCheck;ucIndex++)
   151D DD 34 FF      [23] 3059 	inc	-1 (ix)
   1520 18 92         [12] 3060 	jr	00382$
   1522                    3061 00187$:
                           3062 ;src\CFG8266.c:580: if (ucAPs-ucIndex) // still APs left to list?
   1522 DD 4E FF      [19] 3063 	ld	c, -1 (ix)
   1525 06 00         [ 7] 3064 	ld	b, #0x00
   1527 DD 7E F9      [19] 3065 	ld	a, -7 (ix)
   152A 91            [ 4] 3066 	sub	a, c
   152B DD 77 FC      [19] 3067 	ld	-4 (ix), a
   152E DD 7E FA      [19] 3068 	ld	a, -6 (ix)
   1531 98            [ 4] 3069 	sbc	a, b
   1532 DD 77 FD      [19] 3070 	ld	-3 (ix), a
   1535 DD B6 FC      [19] 3071 	or	a, -4 (ix)
   1538 28 0A         [12] 3072 	jr	Z,00189$
                           3073 ;src\CFG8266.c:581: printf("\r\nWhich one to connect? (ESC exit/SPACE BAR next page)");
   153A 21r6Ar22      [10] 3074 	ld	hl, #___str_47
   153D E5            [11] 3075 	push	hl
   153E CDr00r00      [17] 3076 	call	_printf
   1541 F1            [10] 3077 	pop	af
   1542 18 08         [12] 3078 	jr	00204$
   1544                    3079 00189$:
                           3080 ;src\CFG8266.c:583: printf("\r\nWhich one to connect? (ESC exit)");
   1544 21rA1r22      [10] 3081 	ld	hl, #___str_48
   1547 E5            [11] 3082 	push	hl
   1548 CDr00r00      [17] 3083 	call	_printf
   154B F1            [10] 3084 	pop	af
                           3085 ;src\CFG8266.c:585: do
   154C                    3086 00204$:
                           3087 ;src\CFG8266.c:587: tx_data = Inkey ();
   154C CDr00r00      [17] 3088 	call	_Inkey
   154F 4D            [ 4] 3089 	ld	c, l
                           3090 ;src\CFG8266.c:589: if (tx_data==0x1b)
                           3091 ;src\CFG8266.c:592: if ((tx_data==' ')&&(ucAPs-ucIndex))
   1550 79            [ 4] 3092 	ld	a,c
   1551 FE 1B         [ 7] 3093 	cp	a,#0x1b
   1553 28 54         [12] 3094 	jr	Z,00206$
   1555 D6 20         [ 7] 3095 	sub	a, #0x20
   1557 20 08         [12] 3096 	jr	NZ,00194$
   1559 DD 7E FD      [19] 3097 	ld	a, -3 (ix)
   155C DD B6 FC      [19] 3098 	or	a, -4 (ix)
   155F 20 48         [12] 3099 	jr	NZ,00206$
                           3100 ;src\CFG8266.c:593: break;
   1561                    3101 00194$:
                           3102 ;src\CFG8266.c:595: if ((tx_data>='0')&&(tx_data<='9'))
   1561 79            [ 4] 3103 	ld	a, c
   1562 D6 30         [ 7] 3104 	sub	a, #0x30
   1564 38 3A         [12] 3105 	jr	C,00200$
   1566 3E 39         [ 7] 3106 	ld	a, #0x39
   1568 91            [ 4] 3107 	sub	a, c
   1569 38 35         [12] 3108 	jr	C,00200$
                           3109 ;src\CFG8266.c:597: if (((tx_data-'0')<scanPageLimit)&&(((scanPageLimit*ucScanPage)+(tx_data-'0'))<ucAPs))
   156B 41            [ 4] 3110 	ld	b, c
   156C 16 00         [ 7] 3111 	ld	d, #0x00
   156E 78            [ 4] 3112 	ld	a, b
   156F C6 D0         [ 7] 3113 	add	a, #0xd0
   1571 5F            [ 4] 3114 	ld	e, a
   1572 7A            [ 4] 3115 	ld	a, d
   1573 CE FF         [ 7] 3116 	adc	a, #0xff
   1575 57            [ 4] 3117 	ld	d, a
   1576 7B            [ 4] 3118 	ld	a, e
   1577 D6 0A         [ 7] 3119 	sub	a, #0x0a
   1579 7A            [ 4] 3120 	ld	a, d
   157A 17            [ 4] 3121 	rla
   157B 3F            [ 4] 3122 	ccf
   157C 1F            [ 4] 3123 	rra
   157D DE 80         [ 7] 3124 	sbc	a, #0x80
   157F 30 1F         [12] 3125 	jr	NC,00200$
   1581 DD 6E FE      [19] 3126 	ld	l, -2 (ix)
   1584 26 00         [ 7] 3127 	ld	h, #0x00
   1586 D5            [11] 3128 	push	de
   1587 5D            [ 4] 3129 	ld	e, l
   1588 54            [ 4] 3130 	ld	d, h
   1589 29            [11] 3131 	add	hl, hl
   158A 29            [11] 3132 	add	hl, hl
   158B 19            [11] 3133 	add	hl, de
   158C 29            [11] 3134 	add	hl, hl
   158D D1            [10] 3135 	pop	de
   158E 19            [11] 3136 	add	hl, de
   158F EB            [ 4] 3137 	ex	de, hl
   1590 7B            [ 4] 3138 	ld	a, e
   1591 DD 96 F9      [19] 3139 	sub	a, -7 (ix)
   1594 7A            [ 4] 3140 	ld	a, d
   1595 DD 9E FA      [19] 3141 	sbc	a, -6 (ix)
   1598 E2r9Dr15      [10] 3142 	jp	PO, 01013$
   159B EE 80         [ 7] 3143 	xor	a, #0x80
   159D                    3144 01013$:
   159D FArA9r15      [10] 3145 	jp	M, 00206$
                           3146 ;src\CFG8266.c:598: break;
   15A0                    3147 00200$:
                           3148 ;src\CFG8266.c:600: if (tx_data)
   15A0 79            [ 4] 3149 	ld	a, c
   15A1 B7            [ 4] 3150 	or	a, a
   15A2 28 A8         [12] 3151 	jr	Z,00204$
                           3152 ;src\CFG8266.c:601: Beep();
   15A4 CDr00r00      [17] 3153 	call	_Beep
                           3154 ;src\CFG8266.c:603: while (1);
   15A7 18 A3         [12] 3155 	jr	00204$
   15A9                    3156 00206$:
                           3157 ;src\CFG8266.c:605: if ((tx_data!=0x1b)&&(tx_data!=' ')) // AP Choosen?
   15A9 79            [ 4] 3158 	ld	a,c
   15AA FE 1B         [ 7] 3159 	cp	a,#0x1b
   15AC CArBEr17      [10] 3160 	jp	Z,00261$
   15AF D6 20         [ 7] 3161 	sub	a, #0x20
   15B1 CArBEr17      [10] 3162 	jp	Z,00261$
                           3163 ;src\CFG8266.c:608: printf(" %c\r\n\n",tx_data); // Print accepted char
   15B4 59            [ 4] 3164 	ld	e, c
   15B5 16 00         [ 7] 3165 	ld	d, #0x00
   15B7 C5            [11] 3166 	push	bc
   15B8 D5            [11] 3167 	push	de
   15B9 21rC4r22      [10] 3168 	ld	hl, #___str_49
   15BC E5            [11] 3169 	push	hl
   15BD CDr00r00      [17] 3170 	call	_printf
   15C0 F1            [10] 3171 	pop	af
   15C1 F1            [10] 3172 	pop	af
   15C2 C1            [10] 3173 	pop	bc
                           3174 ;src\CFG8266.c:609: ucIndex = (scanPageLimit*ucScanPage) + (tx_data-'0');
   15C3 DD 7E EF      [19] 3175 	ld	a, -17 (ix)
   15C6 5F            [ 4] 3176 	ld	e, a
   15C7 87            [ 4] 3177 	add	a, a
   15C8 87            [ 4] 3178 	add	a, a
   15C9 83            [ 4] 3179 	add	a, e
   15CA 87            [ 4] 3180 	add	a, a
   15CB 5F            [ 4] 3181 	ld	e, a
   15CC 79            [ 4] 3182 	ld	a, c
   15CD C6 D0         [ 7] 3183 	add	a, #0xd0
   15CF 83            [ 4] 3184 	add	a, e
                           3185 ;src\CFG8266.c:610: if (stAP[ucIndex].isEncrypted)
   15D0 4F            [ 4] 3186 	ld	c, a
   15D1 06 00         [ 7] 3187 	ld	b, #0x00
   15D3 69            [ 4] 3188 	ld	l, c
   15D4 60            [ 4] 3189 	ld	h, b
   15D5 29            [11] 3190 	add	hl, hl
   15D6 29            [11] 3191 	add	hl, hl
   15D7 29            [11] 3192 	add	hl, hl
   15D8 29            [11] 3193 	add	hl, hl
   15D9 09            [11] 3194 	add	hl, bc
   15DA 29            [11] 3195 	add	hl, hl
   15DB DD 75 FC      [19] 3196 	ld	-4 (ix), l
   15DE DD 74 FD      [19] 3197 	ld	-3 (ix), h
   15E1 DD 7E F1      [19] 3198 	ld	a, -15 (ix)
   15E4 DD 86 FC      [19] 3199 	add	a, -4 (ix)
   15E7 4F            [ 4] 3200 	ld	c, a
   15E8 DD 7E F2      [19] 3201 	ld	a, -14 (ix)
   15EB DD 8E FD      [19] 3202 	adc	a, -3 (ix)
   15EE 47            [ 4] 3203 	ld	b, a
   15EF 21 21 00      [10] 3204 	ld	hl, #0x0021
   15F2 09            [11] 3205 	add	hl, bc
   15F3 DD 75 FE      [19] 3206 	ld	-2 (ix), l
   15F6 DD 74 FF      [19] 3207 	ld	-1 (ix), h
   15F9 7E            [ 7] 3208 	ld	a, (hl)
   15FA B7            [ 4] 3209 	or	a, a
   15FB 28 21         [12] 3210 	jr	Z,00208$
                           3211 ;src\CFG8266.c:613: printf("Password? ");
   15FD C5            [11] 3212 	push	bc
   15FE 21rCBr22      [10] 3213 	ld	hl, #___str_50
   1601 E5            [11] 3214 	push	hl
   1602 CDr00r00      [17] 3215 	call	_printf
   1605 F1            [10] 3216 	pop	af
   1606 C1            [10] 3217 	pop	bc
                           3218 ;src\CFG8266.c:614: InputString(ucPWD,64);
   1607 21 12 00      [10] 3219 	ld	hl, #18
   160A 39            [11] 3220 	add	hl, sp
   160B C5            [11] 3221 	push	bc
   160C 11 40 00      [10] 3222 	ld	de, #0x0040
   160F D5            [11] 3223 	push	de
   1610 E5            [11] 3224 	push	hl
   1611 CDr00r00      [17] 3225 	call	_InputString
   1614 F1            [10] 3226 	pop	af
   1615 21r3Ar22      [10] 3227 	ld	hl, #___str_38
   1618 E3            [19] 3228 	ex	(sp),hl
   1619 CDr00r00      [17] 3229 	call	_puts
   161C F1            [10] 3230 	pop	af
   161D C1            [10] 3231 	pop	bc
   161E                    3232 00208$:
                           3233 ;src\CFG8266.c:618: printf("Connecting to: %s \r\n",stAP[ucIndex].APName);
   161E 59            [ 4] 3234 	ld	e, c
   161F 50            [ 4] 3235 	ld	d, b
   1620 C5            [11] 3236 	push	bc
   1621 D5            [11] 3237 	push	de
   1622 21rD6r22      [10] 3238 	ld	hl, #___str_52
   1625 E5            [11] 3239 	push	hl
   1626 CDr00r00      [17] 3240 	call	_printf
   1629 F1            [10] 3241 	pop	af
   162A F1            [10] 3242 	pop	af
   162B CDr00r00      [17] 3243 	call	_strlen
   162E F1            [10] 3244 	pop	af
   162F 23            [ 6] 3245 	inc	hl
   1630 4D            [ 4] 3246 	ld	c,l
   1631 44            [ 4] 3247 	ld	b,h
                           3248 ;src\CFG8266.c:621: if (stAP[ucIndex].isEncrypted)
   1632 DD 6E FE      [19] 3249 	ld	l, -2 (ix)
   1635 DD 66 FF      [19] 3250 	ld	h, -1 (ix)
   1638 7E            [ 7] 3251 	ld	a, (hl)
   1639 B7            [ 4] 3252 	or	a, a
   163A 28 0E         [12] 3253 	jr	Z,00210$
                           3254 ;src\CFG8266.c:622: uiCMDLen += strlen(ucPWD);
   163C 21 12 00      [10] 3255 	ld	hl, #18
   163F 39            [11] 3256 	add	hl, sp
   1640 C5            [11] 3257 	push	bc
   1641 E5            [11] 3258 	push	hl
   1642 CDr00r00      [17] 3259 	call	_strlen
   1645 F1            [10] 3260 	pop	af
   1646 C1            [10] 3261 	pop	bc
   1647 09            [11] 3262 	add	hl, bc
   1648 4D            [ 4] 3263 	ld	c, l
   1649 44            [ 4] 3264 	ld	b, h
   164A                    3265 00210$:
                           3266 ;src\CFG8266.c:623: TxByte('A'); //Request connect AP
   164A C5            [11] 3267 	push	bc
   164B 3E 41         [ 7] 3268 	ld	a, #0x41
   164D F5            [11] 3269 	push	af
   164E 33            [ 6] 3270 	inc	sp
   164F CDr4Fr07      [17] 3271 	call	_TxByte
   1652 33            [ 6] 3272 	inc	sp
   1653 C1            [10] 3273 	pop	bc
                           3274 ;src\CFG8266.c:624: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   1654 78            [ 4] 3275 	ld	a, b
   1655 C5            [11] 3276 	push	bc
   1656 F5            [11] 3277 	push	af
   1657 33            [ 6] 3278 	inc	sp
   1658 CDr4Fr07      [17] 3279 	call	_TxByte
   165B 33            [ 6] 3280 	inc	sp
   165C C1            [10] 3281 	pop	bc
                           3282 ;src\CFG8266.c:625: TxByte((unsigned char)(uiCMDLen&0xff));
   165D 79            [ 4] 3283 	ld	a, c
   165E C5            [11] 3284 	push	bc
   165F F5            [11] 3285 	push	af
   1660 33            [ 6] 3286 	inc	sp
   1661 CDr4Fr07      [17] 3287 	call	_TxByte
   1664 33            [ 6] 3288 	inc	sp
   1665 C1            [10] 3289 	pop	bc
                           3290 ;src\CFG8266.c:627: do
   1666 DD 7E FC      [19] 3291 	ld	a, -4 (ix)
   1669 DD 86 F1      [19] 3292 	add	a, -15 (ix)
   166C DD 77 FE      [19] 3293 	ld	-2 (ix), a
   166F DD 7E FD      [19] 3294 	ld	a, -3 (ix)
   1672 DD 8E F2      [19] 3295 	adc	a, -14 (ix)
   1675 DD 77 FF      [19] 3296 	ld	-1 (ix), a
   1678 1E 00         [ 7] 3297 	ld	e, #0x00
   167A                    3298 00212$:
                           3299 ;src\CFG8266.c:629: tx_data = stAP[ucIndex].APName[rx_data];
   167A DD 7E FE      [19] 3300 	ld	a, -2 (ix)
   167D 83            [ 4] 3301 	add	a, e
   167E 57            [ 4] 3302 	ld	d, a
   167F DD 7E FF      [19] 3303 	ld	a, -1 (ix)
   1682 CE 00         [ 7] 3304 	adc	a, #0x00
   1684 6A            [ 4] 3305 	ld	l, d
   1685 67            [ 4] 3306 	ld	h, a
   1686 56            [ 7] 3307 	ld	d, (hl)
                           3308 ;src\CFG8266.c:630: TxByte(tx_data);
   1687 C5            [11] 3309 	push	bc
   1688 D5            [11] 3310 	push	de
   1689 D5            [11] 3311 	push	de
   168A 33            [ 6] 3312 	inc	sp
   168B CDr4Fr07      [17] 3313 	call	_TxByte
   168E 33            [ 6] 3314 	inc	sp
   168F D1            [10] 3315 	pop	de
   1690 C1            [10] 3316 	pop	bc
                           3317 ;src\CFG8266.c:631: --uiCMDLen;
   1691 0B            [ 6] 3318 	dec	bc
                           3319 ;src\CFG8266.c:632: ++rx_data;
   1692 1C            [ 4] 3320 	inc	e
                           3321 ;src\CFG8266.c:634: while((uiCMDLen)&&(tx_data!=0));
   1693 78            [ 4] 3322 	ld	a, b
   1694 B1            [ 4] 3323 	or	a, c
   1695 28 04         [12] 3324 	jr	Z,00214$
   1697 7A            [ 4] 3325 	ld	a, d
   1698 B7            [ 4] 3326 	or	a, a
   1699 20 DF         [12] 3327 	jr	NZ,00212$
   169B                    3328 00214$:
                           3329 ;src\CFG8266.c:635: if(uiCMDLen)
   169B 78            [ 4] 3330 	ld	a, b
   169C B1            [ 4] 3331 	or	a, c
   169D 28 2C         [12] 3332 	jr	Z,00219$
                           3333 ;src\CFG8266.c:638: do
   169F 21 12 00      [10] 3334 	ld	hl, #18
   16A2 39            [11] 3335 	add	hl, sp
   16A3 DD 75 FD      [19] 3336 	ld	-3 (ix), l
   16A6 DD 74 FE      [19] 3337 	ld	-2 (ix), h
   16A9 AF            [ 4] 3338 	xor	a, a
   16AA DD 77 FF      [19] 3339 	ld	-1 (ix), a
   16AD                    3340 00215$:
                           3341 ;src\CFG8266.c:640: tx_data = ucPWD[rx_data];
   16AD DD 7E FD      [19] 3342 	ld	a, -3 (ix)
   16B0 DD 86 FF      [19] 3343 	add	a, -1 (ix)
   16B3 5F            [ 4] 3344 	ld	e, a
   16B4 DD 7E FE      [19] 3345 	ld	a, -2 (ix)
   16B7 CE 00         [ 7] 3346 	adc	a, #0x00
   16B9 57            [ 4] 3347 	ld	d, a
   16BA 1A            [ 7] 3348 	ld	a, (de)
                           3349 ;src\CFG8266.c:641: TxByte(tx_data);
   16BB C5            [11] 3350 	push	bc
   16BC F5            [11] 3351 	push	af
   16BD 33            [ 6] 3352 	inc	sp
   16BE CDr4Fr07      [17] 3353 	call	_TxByte
   16C1 33            [ 6] 3354 	inc	sp
   16C2 C1            [10] 3355 	pop	bc
                           3356 ;src\CFG8266.c:642: --uiCMDLen;
   16C3 0B            [ 6] 3357 	dec	bc
                           3358 ;src\CFG8266.c:643: ++rx_data;
   16C4 DD 34 FF      [23] 3359 	inc	-1 (ix)
                           3360 ;src\CFG8266.c:645: while(uiCMDLen);
   16C7 78            [ 4] 3361 	ld	a, b
   16C8 B1            [ 4] 3362 	or	a, c
   16C9 20 E2         [12] 3363 	jr	NZ,00215$
   16CB                    3364 00219$:
                           3365 ;src\CFG8266.c:649: bResponse = WaitForRXData(apconfigurationResponse,2,600,true,false,NULL,0); //Wait up to 10s
   16CB 21 00 00      [10] 3366 	ld	hl, #0x0000
   16CE E5            [11] 3367 	push	hl
   16CF 2E 00         [ 7] 3368 	ld	l, #0x00
   16D1 E5            [11] 3369 	push	hl
   16D2 AF            [ 4] 3370 	xor	a, a
   16D3 57            [ 4] 3371 	ld	d,a
   16D4 1E 01         [ 7] 3372 	ld	e,#0x01
   16D6 D5            [11] 3373 	push	de
   16D7 21 58 02      [10] 3374 	ld	hl, #0x0258
   16DA E5            [11] 3375 	push	hl
   16DB 21 02 00      [10] 3376 	ld	hl, #0x0002
   16DE E5            [11] 3377 	push	hl
   16DF 21r1Ar01      [10] 3378 	ld	hl, #_apconfigurationResponse
   16E2 E5            [11] 3379 	push	hl
   16E3 CDrCBr08      [17] 3380 	call	_WaitForRXData
   16E6 FD 21 0C 00   [14] 3381 	ld	iy, #12
   16EA FD 39         [15] 3382 	add	iy, sp
   16EC FD F9         [10] 3383 	ld	sp, iy
   16EE 7D            [ 4] 3384 	ld	a, l
                           3385 ;src\CFG8266.c:650: if (bResponse)
   16EF B7            [ 4] 3386 	or	a, a
   16F0 28 0B         [12] 3387 	jr	Z,00241$
                           3388 ;src\CFG8266.c:651: printf("Success, AP configured to be used.\r\n");
   16F2 21rEBr22      [10] 3389 	ld	hl, #___str_54
   16F5 E5            [11] 3390 	push	hl
   16F6 CDr00r00      [17] 3391 	call	_puts
   16F9 F1            [10] 3392 	pop	af
   16FA C3r60r21      [10] 3393 	jp	00375$
   16FD                    3394 00241$:
                           3395 ;src\CFG8266.c:654: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   16FD DD CB F4 46   [20] 3396 	bit	0, -12 (ix)
   1701 C2rB3r17      [10] 3397 	jp	NZ, 00237$
   1704 DD CB F3 46   [20] 3398 	bit	0, -13 (ix)
   1708 C2rB3r17      [10] 3399 	jp	NZ, 00237$
                           3400 ;src\CFG8266.c:656: for (i=90;i>0;--i)
   170B 01 5A 00      [10] 3401 	ld	bc, #0x005a
   170E                    3402 00384$:
                           3403 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   170E 76            [ 4] 3404 	halt
                           3405 ;src\CFG8266.c:656: for (i=90;i>0;--i)
   170F 0B            [ 6] 3406 	dec	bc
   1710 78            [ 4] 3407 	ld	a, b
   1711 B1            [ 4] 3408 	or	a, c
   1712 20 FA         [12] 3409 	jr	NZ,00384$
                           3410 ;src\CFG8266.c:658: TxByte('g'); //Request current AP status
   1714 3E 67         [ 7] 3411 	ld	a, #0x67
   1716 F5            [11] 3412 	push	af
   1717 33            [ 6] 3413 	inc	sp
   1718 CDr4Fr07      [17] 3414 	call	_TxByte
   171B 33            [ 6] 3415 	inc	sp
                           3416 ;src\CFG8266.c:659: bResponse = WaitForRXData(apstsResponse,3,120,true,false,NULL,0);
   171C 21 00 00      [10] 3417 	ld	hl, #0x0000
   171F E5            [11] 3418 	push	hl
   1720 2E 00         [ 7] 3419 	ld	l, #0x00
   1722 E5            [11] 3420 	push	hl
   1723 AF            [ 4] 3421 	xor	a, a
   1724 57            [ 4] 3422 	ld	d,a
   1725 1E 01         [ 7] 3423 	ld	e,#0x01
   1727 D5            [11] 3424 	push	de
   1728 2E 78         [ 7] 3425 	ld	l, #0x78
   172A E5            [11] 3426 	push	hl
   172B 2E 03         [ 7] 3427 	ld	l, #0x03
   172D E5            [11] 3428 	push	hl
   172E 21r1Cr01      [10] 3429 	ld	hl, #_apstsResponse
   1731 E5            [11] 3430 	push	hl
   1732 CDrCBr08      [17] 3431 	call	_WaitForRXData
   1735 FD 21 0C 00   [14] 3432 	ld	iy, #12
   1739 FD 39         [15] 3433 	add	iy, sp
   173B FD F9         [10] 3434 	ld	sp, iy
   173D 7D            [ 4] 3435 	ld	a, l
                           3436 ;src\CFG8266.c:660: if (bResponse)
   173E B7            [ 4] 3437 	or	a, a
   173F 28 67         [12] 3438 	jr	Z,00234$
                           3439 ;src\CFG8266.c:662: while(!UartRXData());
   1741                    3440 00221$:
   1741 DB 07         [11] 3441 	in	a, (_myPort7)
   1743 D6 01         [ 7] 3442 	sub	a,#0x01
   1745 3E 00         [ 7] 3443 	ld	a, #0x00
   1747 17            [ 4] 3444 	rla
   1748 CB 47         [ 8] 3445 	bit	0, a
   174A 20 F5         [12] 3446 	jr	NZ,00221$
                           3447 ;src\CFG8266.c:663: ucAPstsRspSize=GetUARTData();
   174C DB 06         [11] 3448 	in	a, (_myPort6)
   174E 4F            [ 4] 3449 	ld	c, a
                           3450 ;src\CFG8266.c:667: while(!UartRXData());
   174F AF            [ 4] 3451 	xor	a, a
   1750 DD 77 FE      [19] 3452 	ld	-2 (ix), a
   1753 DD 77 FF      [19] 3453 	ld	-1 (ix), a
   1756                    3454 00224$:
   1756 DB 07         [11] 3455 	in	a, (_myPort7)
   1758 D6 01         [ 7] 3456 	sub	a,#0x01
   175A 3E 00         [ 7] 3457 	ld	a, #0x00
   175C 17            [ 4] 3458 	rla
   175D CB 47         [ 8] 3459 	bit	0, a
   175F 20 F5         [12] 3460 	jr	NZ,00224$
                           3461 ;src\CFG8266.c:668: chAPStsInfo[i]=GetUARTData();
   1761 DD 7E F5      [19] 3462 	ld	a, -11 (ix)
   1764 DD 86 FE      [19] 3463 	add	a, -2 (ix)
   1767 5F            [ 4] 3464 	ld	e, a
   1768 DD 7E F6      [19] 3465 	ld	a, -10 (ix)
   176B DD 8E FF      [19] 3466 	adc	a, -1 (ix)
   176E 57            [ 4] 3467 	ld	d, a
   176F DB 06         [11] 3468 	in	a, (_myPort6)
   1771 12            [ 7] 3469 	ld	(de), a
                           3470 ;src\CFG8266.c:669: ++i;
   1772 DD 34 FE      [23] 3471 	inc	-2 (ix)
   1775 20 03         [12] 3472 	jr	NZ,01016$
   1777 DD 34 FF      [23] 3473 	inc	-1 (ix)
   177A                    3474 01016$:
                           3475 ;src\CFG8266.c:671: while(i<ucAPstsRspSize);
   177A 41            [ 4] 3476 	ld	b, c
   177B 1E 00         [ 7] 3477 	ld	e, #0x00
   177D DD 7E FE      [19] 3478 	ld	a, -2 (ix)
   1780 90            [ 4] 3479 	sub	a, b
   1781 DD 7E FF      [19] 3480 	ld	a, -1 (ix)
   1784 9B            [ 4] 3481 	sbc	a, e
   1785 38 CF         [12] 3482 	jr	C,00224$
                           3483 ;src\CFG8266.c:673: if (chAPStsInfo[0]==2)
   1787 DD 6E F5      [19] 3484 	ld	l, -11 (ix)
   178A DD 66 F6      [19] 3485 	ld	h, -10 (ix)
   178D 7E            [ 7] 3486 	ld	a, (hl)
   178E D6 02         [ 7] 3487 	sub	a, #0x02
   1790 20 0B         [12] 3488 	jr	NZ,00231$
                           3489 ;src\CFG8266.c:674: printf("Error, wrong password!\r\n");
   1792 21r0Fr23      [10] 3490 	ld	hl, #___str_56
   1795 E5            [11] 3491 	push	hl
   1796 CDr00r00      [17] 3492 	call	_puts
   1799 F1            [10] 3493 	pop	af
   179A C3r60r21      [10] 3494 	jp	00375$
   179D                    3495 00231$:
                           3496 ;src\CFG8266.c:676: printf("Error, if protected network, check password.\r\n");
   179D 21r27r23      [10] 3497 	ld	hl, #___str_58
   17A0 E5            [11] 3498 	push	hl
   17A1 CDr00r00      [17] 3499 	call	_puts
   17A4 F1            [10] 3500 	pop	af
   17A5 C3r60r21      [10] 3501 	jp	00375$
   17A8                    3502 00234$:
                           3503 ;src\CFG8266.c:679: printf("Error, if protected network, check password.\r\n");
   17A8 21r27r23      [10] 3504 	ld	hl, #___str_58
   17AB E5            [11] 3505 	push	hl
   17AC CDr00r00      [17] 3506 	call	_puts
   17AF F1            [10] 3507 	pop	af
   17B0 C3r60r21      [10] 3508 	jp	00375$
   17B3                    3509 00237$:
                           3510 ;src\CFG8266.c:682: printf("Error, if protected network, check password.\r\n");
   17B3 21r27r23      [10] 3511 	ld	hl, #___str_58
   17B6 E5            [11] 3512 	push	hl
   17B7 CDr00r00      [17] 3513 	call	_puts
   17BA F1            [10] 3514 	pop	af
                           3515 ;src\CFG8266.c:685: break;
   17BB C3r60r21      [10] 3516 	jp	00375$
   17BE                    3517 00261$:
                           3518 ;src\CFG8266.c:687: else if (tx_data==0x1b)
   17BE 79            [ 4] 3519 	ld	a, c
   17BF D6 1B         [ 7] 3520 	sub	a, #0x1b
   17C1 20 0B         [12] 3521 	jr	NZ,00258$
                           3522 ;src\CFG8266.c:689: printf("\r\nUser canceled by ESC key...\r\n");
   17C3 21r55r23      [10] 3523 	ld	hl, #___str_62
   17C6 E5            [11] 3524 	push	hl
   17C7 CDr00r00      [17] 3525 	call	_puts
   17CA F1            [10] 3526 	pop	af
                           3527 ;src\CFG8266.c:690: break;
   17CB C3r60r21      [10] 3528 	jp	00375$
   17CE                    3529 00258$:
                           3530 ;src\CFG8266.c:694: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   17CE DD CB F4 46   [20] 3531 	bit	0, -12 (ix)
   17D2 20 67         [12] 3532 	jr	NZ,00255$
   17D4 DD CB F3 46   [20] 3533 	bit	0, -13 (ix)
   17D8 20 61         [12] 3534 	jr	NZ,00255$
                           3535 ;src\CFG8266.c:696: TxByte('g'); //Request current AP status
   17DA 3E 67         [ 7] 3536 	ld	a, #0x67
   17DC F5            [11] 3537 	push	af
   17DD 33            [ 6] 3538 	inc	sp
   17DE CDr4Fr07      [17] 3539 	call	_TxByte
   17E1 33            [ 6] 3540 	inc	sp
                           3541 ;src\CFG8266.c:697: bResponse = WaitForRXData(apstsResponse,3,30,true,false,NULL,0);
   17E2 21 00 00      [10] 3542 	ld	hl, #0x0000
   17E5 E5            [11] 3543 	push	hl
   17E6 2E 00         [ 7] 3544 	ld	l, #0x00
   17E8 E5            [11] 3545 	push	hl
   17E9 AF            [ 4] 3546 	xor	a, a
   17EA 57            [ 4] 3547 	ld	d,a
   17EB 1E 01         [ 7] 3548 	ld	e,#0x01
   17ED D5            [11] 3549 	push	de
   17EE 2E 1E         [ 7] 3550 	ld	l, #0x1e
   17F0 E5            [11] 3551 	push	hl
   17F1 2E 03         [ 7] 3552 	ld	l, #0x03
   17F3 E5            [11] 3553 	push	hl
   17F4 21r1Cr01      [10] 3554 	ld	hl, #_apstsResponse
   17F7 E5            [11] 3555 	push	hl
   17F8 CDrCBr08      [17] 3556 	call	_WaitForRXData
   17FB FD 21 0C 00   [14] 3557 	ld	iy, #12
   17FF FD 39         [15] 3558 	add	iy, sp
   1801 FD F9         [10] 3559 	ld	sp, iy
   1803 7D            [ 4] 3560 	ld	a, l
                           3561 ;src\CFG8266.c:698: if (bResponse)
   1804 B7            [ 4] 3562 	or	a, a
   1805 28 34         [12] 3563 	jr	Z,00255$
                           3564 ;src\CFG8266.c:700: while(!UartRXData());
   1807                    3565 00243$:
   1807 DB 07         [11] 3566 	in	a, (_myPort7)
   1809 D6 01         [ 7] 3567 	sub	a,#0x01
   180B 3E 00         [ 7] 3568 	ld	a, #0x00
   180D 17            [ 4] 3569 	rla
   180E CB 47         [ 8] 3570 	bit	0, a
   1810 20 F5         [12] 3571 	jr	NZ,00243$
                           3572 ;src\CFG8266.c:701: ucAPstsRspSize=GetUARTData();
   1812 DB 06         [11] 3573 	in	a, (_myPort6)
   1814 DD 77 FF      [19] 3574 	ld	-1 (ix), a
                           3575 ;src\CFG8266.c:705: while(!UartRXData());
   1817 11 00 00      [10] 3576 	ld	de, #0x0000
   181A                    3577 00246$:
   181A DB 07         [11] 3578 	in	a, (_myPort7)
   181C D6 01         [ 7] 3579 	sub	a,#0x01
   181E 3E 00         [ 7] 3580 	ld	a, #0x00
   1820 17            [ 4] 3581 	rla
   1821 CB 47         [ 8] 3582 	bit	0, a
   1823 20 F5         [12] 3583 	jr	NZ,00246$
                           3584 ;src\CFG8266.c:706: chAPStsInfo[i]=GetUARTData();
   1825 DD 6E F5      [19] 3585 	ld	l, -11 (ix)
   1828 DD 66 F6      [19] 3586 	ld	h, -10 (ix)
   182B 19            [11] 3587 	add	hl, de
   182C DB 06         [11] 3588 	in	a, (_myPort6)
   182E 77            [ 7] 3589 	ld	(hl), a
                           3590 ;src\CFG8266.c:707: ++i;
   182F 13            [ 6] 3591 	inc	de
                           3592 ;src\CFG8266.c:709: while(i<ucAPstsRspSize);
   1830 DD 4E FF      [19] 3593 	ld	c, -1 (ix)
   1833 06 00         [ 7] 3594 	ld	b, #0x00
   1835 7B            [ 4] 3595 	ld	a, e
   1836 91            [ 4] 3596 	sub	a, c
   1837 7A            [ 4] 3597 	ld	a, d
   1838 98            [ 4] 3598 	sbc	a, b
   1839 38 DF         [12] 3599 	jr	C,00246$
   183B                    3600 00255$:
                           3601 ;src\CFG8266.c:712: ++ucScanPage;
   183B DD 34 FE      [23] 3602 	inc	-2 (ix)
   183E DD 7E FE      [19] 3603 	ld	a, -2 (ix)
   1841 DD 77 EF      [19] 3604 	ld	-17 (ix), a
                           3605 ;src\CFG8266.c:715: while(1);
   1844 C3rDBr13      [10] 3606 	jp	00264$
   1847                    3607 00268$:
                           3608 ;src\CFG8266.c:718: printf("\r\nScan results: no answer...\r\n");
   1847 21r74r23      [10] 3609 	ld	hl, #___str_64
   184A E5            [11] 3610 	push	hl
   184B CDr00r00      [17] 3611 	call	_puts
   184E F1            [10] 3612 	pop	af
   184F C3r60r21      [10] 3613 	jp	00375$
   1852                    3614 00294$:
                           3615 ;src\CFG8266.c:722: if (ucScan)
   1852 3Ar00r00      [13] 3616 	ld	a,(#_ucScan + 0)
   1855 B7            [ 4] 3617 	or	a, a
   1856 28 0B         [12] 3618 	jr	Z,00291$
                           3619 ;src\CFG8266.c:723: printf ("\rScan request: no answer...\r\n");
   1858 21r92r23      [10] 3620 	ld	hl, #___str_66
   185B E5            [11] 3621 	push	hl
   185C CDr00r00      [17] 3622 	call	_puts
   185F F1            [10] 3623 	pop	af
   1860 C3r60r21      [10] 3624 	jp	00375$
   1863                    3625 00291$:
                           3626 ;src\CFG8266.c:724: else if (((ucNagleOff)||(ucNagleOn))&&(bResponse))
   1863 3Ar09r00      [13] 3627 	ld	a,(#_ucNagleOff + 0)
   1866 B7            [ 4] 3628 	or	a, a
   1867 20 06         [12] 3629 	jr	NZ,00289$
   1869 3Ar0Ar00      [13] 3630 	ld	a,(#_ucNagleOn + 0)
   186C B7            [ 4] 3631 	or	a, a
   186D 28 14         [12] 3632 	jr	Z,00286$
   186F                    3633 00289$:
   186F DD 7E FB      [19] 3634 	ld	a, -5 (ix)
   1872 B7            [ 4] 3635 	or	a, a
   1873 28 0E         [12] 3636 	jr	Z,00286$
                           3637 ;src\CFG8266.c:726: printf("\rNagle set as requested...\r\n");
   1875 21rAFr23      [10] 3638 	ld	hl, #___str_68
   1878 E5            [11] 3639 	push	hl
   1879 CDr00r00      [17] 3640 	call	_puts
   187C F1            [10] 3641 	pop	af
                           3642 ;src\CFG8266.c:727: return 0;
   187D 21 00 00      [10] 3643 	ld	hl, #0x0000
   1880 C3r63r21      [10] 3644 	jp	00388$
   1883                    3645 00286$:
                           3646 ;src\CFG8266.c:729: else if ((ucNagleOff)||(ucNagleOn))
   1883 3Ar09r00      [13] 3647 	ld	a,(#_ucNagleOff + 0)
   1886 B7            [ 4] 3648 	or	a, a
   1887 20 06         [12] 3649 	jr	NZ,00281$
   1889 3Ar0Ar00      [13] 3650 	ld	a,(#_ucNagleOn + 0)
   188C B7            [ 4] 3651 	or	a, a
   188D 28 0E         [12] 3652 	jr	Z,00282$
   188F                    3653 00281$:
                           3654 ;src\CFG8266.c:731: printf("\rNagle not set as requested, error!\r\n");
   188F 21rCBr23      [10] 3655 	ld	hl, #___str_70
   1892 E5            [11] 3656 	push	hl
   1893 CDr00r00      [17] 3657 	call	_puts
   1896 F1            [10] 3658 	pop	af
                           3659 ;src\CFG8266.c:732: return 0;
   1897 21 00 00      [10] 3660 	ld	hl, #0x0000
   189A C3r63r21      [10] 3661 	jp	00388$
   189D                    3662 00282$:
                           3663 ;src\CFG8266.c:734: else if (ucRadioOff)
   189D 3Ar0Br00      [13] 3664 	ld	a,(#_ucRadioOff + 0)
   18A0 B7            [ 4] 3665 	or	a, a
   18A1 28 1E         [12] 3666 	jr	Z,00279$
                           3667 ;src\CFG8266.c:736: if (bResponse)
   18A3 DD 7E FB      [19] 3668 	ld	a, -5 (ix)
   18A6 B7            [ 4] 3669 	or	a, a
   18A7 28 0A         [12] 3670 	jr	Z,00271$
                           3671 ;src\CFG8266.c:737: printf("\rRequested to turn off Wi-Fi Radio...\r\n");
   18A9 21rF0r23      [10] 3672 	ld	hl, #___str_72
   18AC E5            [11] 3673 	push	hl
   18AD CDr00r00      [17] 3674 	call	_puts
   18B0 F1            [10] 3675 	pop	af
   18B1 18 08         [12] 3676 	jr	00272$
   18B3                    3677 00271$:
                           3678 ;src\CFG8266.c:739: printf("\rRequest to turnoff Wi-Fi Radio error!\r\n");
   18B3 21r17r24      [10] 3679 	ld	hl, #___str_74
   18B6 E5            [11] 3680 	push	hl
   18B7 CDr00r00      [17] 3681 	call	_puts
   18BA F1            [10] 3682 	pop	af
   18BB                    3683 00272$:
                           3684 ;src\CFG8266.c:740: return 0;
   18BB 21 00 00      [10] 3685 	ld	hl, #0x0000
   18BE C3r63r21      [10] 3686 	jp	00388$
   18C1                    3687 00279$:
                           3688 ;src\CFG8266.c:742: else if (ucSetTimeout)
   18C1 3Ar0Cr00      [13] 3689 	ld	a,(#_ucSetTimeout + 0)
   18C4 B7            [ 4] 3690 	or	a, a
   18C5 CAr60r21      [10] 3691 	jp	Z, 00375$
                           3692 ;src\CFG8266.c:744: if (bResponse)
   18C8 DD 7E FB      [19] 3693 	ld	a, -5 (ix)
   18CB B7            [ 4] 3694 	or	a, a
   18CC 28 0A         [12] 3695 	jr	Z,00274$
                           3696 ;src\CFG8266.c:745: printf("\rWi-Fi radio on Time-out set successfully...\r\n");
   18CE 21r3Fr24      [10] 3697 	ld	hl, #___str_76
   18D1 E5            [11] 3698 	push	hl
   18D2 CDr00r00      [17] 3699 	call	_puts
   18D5 F1            [10] 3700 	pop	af
   18D6 18 08         [12] 3701 	jr	00275$
   18D8                    3702 00274$:
                           3703 ;src\CFG8266.c:747: printf("\rError setting Wi-Fi radio on Time-out!\r\n");
   18D8 21r6Dr24      [10] 3704 	ld	hl, #___str_78
   18DB E5            [11] 3705 	push	hl
   18DC CDr00r00      [17] 3706 	call	_puts
   18DF F1            [10] 3707 	pop	af
   18E0                    3708 00275$:
                           3709 ;src\CFG8266.c:748: return 0;
   18E0 21 00 00      [10] 3710 	ld	hl, #0x0000
   18E3 C3r63r21      [10] 3711 	jp	00388$
   18E6                    3712 00364$:
                           3713 ;src\CFG8266.c:752: else if (ucLocalUpdate)
   18E6 3Ar07r00      [13] 3714 	ld	a,(#_ucLocalUpdate + 0)
   18E9 B7            [ 4] 3715 	or	a, a
   18EA CAr61r1F      [10] 3716 	jp	Z, 00361$
                           3717 ;src\CFG8266.c:755: iFile = Open (ucFile,O_RDONLY);
   18ED DD 4E FC      [19] 3718 	ld	c, -4 (ix)
   18F0 DD 46 FD      [19] 3719 	ld	b, -3 (ix)
   18F3 21 00 00      [10] 3720 	ld	hl, #0x0000
   18F6 E5            [11] 3721 	push	hl
   18F7 C5            [11] 3722 	push	bc
   18F8 CDr00r00      [17] 3723 	call	_Open
   18FB F1            [10] 3724 	pop	af
   18FC F1            [10] 3725 	pop	af
   18FD DD 75 FE      [19] 3726 	ld	-2 (ix), l
   1900 DD 74 FF      [19] 3727 	ld	-1 (ix), h
                           3728 ;src\CFG8266.c:757: if (iFile!=-1)
   1903 DD 7E FE      [19] 3729 	ld	a, -2 (ix)
   1906 DD A6 FF      [19] 3730 	and	a, -1 (ix)
   1909 3C            [ 4] 3731 	inc	a
   190A CAr3Fr1F      [10] 3732 	jp	Z,00334$
                           3733 ;src\CFG8266.c:764: regs.Words.HL = 0; //set pointer as 0
   190D 21 9B 0D      [10] 3734 	ld	hl, #3483
   1910 39            [11] 3735 	add	hl, sp
   1911 EB            [ 4] 3736 	ex	de, hl
   1912 21 06 00      [10] 3737 	ld	hl, #0x0006
   1915 19            [11] 3738 	add	hl, de
   1916 AF            [ 4] 3739 	xor	a, a
   1917 77            [ 7] 3740 	ld	(hl), a
   1918 23            [ 6] 3741 	inc	hl
   1919 77            [ 7] 3742 	ld	(hl), a
                           3743 ;src\CFG8266.c:765: regs.Words.DE = 0; //so it will return the position
   191A 13            [ 6] 3744 	inc	de
   191B 13            [ 6] 3745 	inc	de
   191C 13            [ 6] 3746 	inc	de
   191D 13            [ 6] 3747 	inc	de
   191E AF            [ 4] 3748 	xor	a, a
   191F 12            [ 7] 3749 	ld	(de), a
   1920 13            [ 6] 3750 	inc	de
   1921 12            [ 7] 3751 	ld	(de), a
                           3752 ;src\CFG8266.c:766: regs.Bytes.A = 2; //relative to the end of file, i.e.:file size
   1922 21 9B 0D      [10] 3753 	ld	hl, #3483
   1925 39            [11] 3754 	add	hl, sp
   1926 EB            [ 4] 3755 	ex	de, hl
   1927 6B            [ 4] 3756 	ld	l, e
   1928 62            [ 4] 3757 	ld	h, d
   1929 23            [ 6] 3758 	inc	hl
   192A 36 02         [10] 3759 	ld	(hl), #0x02
                           3760 ;src\CFG8266.c:767: regs.Bytes.B = (unsigned char)(iFile&0xff);
   192C 13            [ 6] 3761 	inc	de
   192D 13            [ 6] 3762 	inc	de
   192E 13            [ 6] 3763 	inc	de
   192F 7A            [ 4] 3764 	ld	a, d
   1930 DD 4E FE      [19] 3765 	ld	c, -2 (ix)
   1933 6B            [ 4] 3766 	ld	l, e
   1934 67            [ 4] 3767 	ld	h, a
   1935 71            [ 7] 3768 	ld	(hl), c
                           3769 ;src\CFG8266.c:768: DosCall(0x4A, &regs, REGS_ALL, REGS_ALL); // MOVE FILE HANDLER
   1936 21 9B 0D      [10] 3770 	ld	hl, #3483
   1939 39            [11] 3771 	add	hl, sp
   193A DD 75 FA      [19] 3772 	ld	-6 (ix), l
   193D DD 74 FB      [19] 3773 	ld	-5 (ix), h
   1940 4D            [ 4] 3774 	ld	c, l
   1941 44            [ 4] 3775 	ld	b, h
   1942 11 03 03      [10] 3776 	ld	de, #0x0303
   1945 D5            [11] 3777 	push	de
   1946 C5            [11] 3778 	push	bc
   1947 3E 4A         [ 7] 3779 	ld	a, #0x4a
   1949 F5            [11] 3780 	push	af
   194A 33            [ 6] 3781 	inc	sp
   194B CDr00r00      [17] 3782 	call	_DosCall
   194E F1            [10] 3783 	pop	af
   194F F1            [10] 3784 	pop	af
   1950 33            [ 6] 3785 	inc	sp
                           3786 ;src\CFG8266.c:769: if (regs.Bytes.A == 0) //moved, now get the file handler position, i.e.: size
   1951 DD 6E FA      [19] 3787 	ld	l, -6 (ix)
   1954 DD 66 FB      [19] 3788 	ld	h, -5 (ix)
   1957 23            [ 6] 3789 	inc	hl
   1958 7E            [ 7] 3790 	ld	a, (hl)
   1959 DD 77 F9      [19] 3791 	ld	-7 (ix), a
   195C B7            [ 4] 3792 	or	a, a
   195D C2r22r1A      [10] 3793 	jp	NZ, 00298$
                           3794 ;src\CFG8266.c:770: SentFileSize = (unsigned long)(regs.Words.HL)&0xffff | ((unsigned long)(regs.Words.DE)<<16)&0xffff0000;
   1960 DD 7E FA      [19] 3795 	ld	a, -6 (ix)
   1963 DD 77 F8      [19] 3796 	ld	-8 (ix), a
   1966 DD 7E FB      [19] 3797 	ld	a, -5 (ix)
   1969 DD 77 F9      [19] 3798 	ld	-7 (ix), a
   196C DD 6E F8      [19] 3799 	ld	l, -8 (ix)
   196F DD 66 F9      [19] 3800 	ld	h, -7 (ix)
   1972 11 06 00      [10] 3801 	ld	de, #0x0006
   1975 19            [11] 3802 	add	hl, de
   1976 7E            [ 7] 3803 	ld	a, (hl)
   1977 DD 77 F8      [19] 3804 	ld	-8 (ix), a
   197A 23            [ 6] 3805 	inc	hl
   197B 7E            [ 7] 3806 	ld	a, (hl)
   197C DD 77 F9      [19] 3807 	ld	-7 (ix), a
   197F DD 7E F8      [19] 3808 	ld	a, -8 (ix)
   1982 DD 77 F1      [19] 3809 	ld	-15 (ix), a
   1985 DD 7E F9      [19] 3810 	ld	a, -7 (ix)
   1988 DD 77 F2      [19] 3811 	ld	-14 (ix), a
   198B 17            [ 4] 3812 	rla
   198C 9F            [ 4] 3813 	sbc	a, a
   198D DD 77 F3      [19] 3814 	ld	-13 (ix), a
   1990 DD 77 F4      [19] 3815 	ld	-12 (ix), a
   1993 DD 7E F1      [19] 3816 	ld	a, -15 (ix)
   1996 FD 21 0E 00   [14] 3817 	ld	iy, #14
   199A FD 39         [15] 3818 	add	iy, sp
   199C FD 77 00      [19] 3819 	ld	0 (iy), a
   199F DD 7E F2      [19] 3820 	ld	a, -14 (ix)
   19A2 FD 77 01      [19] 3821 	ld	1 (iy), a
   19A5 FD 36 02 00   [19] 3822 	ld	2 (iy), #0x00
   19A9 FD 36 03 00   [19] 3823 	ld	3 (iy), #0x00
   19AD DD 6E FA      [19] 3824 	ld	l, -6 (ix)
   19B0 DD 66 FB      [19] 3825 	ld	h, -5 (ix)
   19B3 11 04 00      [10] 3826 	ld	de, #0x0004
   19B6 19            [11] 3827 	add	hl, de
   19B7 7E            [ 7] 3828 	ld	a, (hl)
   19B8 DD 77 FA      [19] 3829 	ld	-6 (ix), a
   19BB 23            [ 6] 3830 	inc	hl
   19BC 7E            [ 7] 3831 	ld	a, (hl)
   19BD DD 77 FB      [19] 3832 	ld	-5 (ix), a
   19C0 DD 7E FA      [19] 3833 	ld	a, -6 (ix)
   19C3 DD 77 F8      [19] 3834 	ld	-8 (ix), a
   19C6 DD 7E FB      [19] 3835 	ld	a, -5 (ix)
   19C9 DD 77 F9      [19] 3836 	ld	-7 (ix), a
   19CC 17            [ 4] 3837 	rla
   19CD 9F            [ 4] 3838 	sbc	a, a
   19CE DD 77 FA      [19] 3839 	ld	-6 (ix), a
   19D1 DD 77 FB      [19] 3840 	ld	-5 (ix), a
   19D4 06 10         [ 7] 3841 	ld	b, #0x10
   19D6                    3842 01022$:
   19D6 DD CB F8 26   [23] 3843 	sla	-8 (ix)
   19DA DD CB F9 16   [23] 3844 	rl	-7 (ix)
   19DE DD CB FA 16   [23] 3845 	rl	-6 (ix)
   19E2 DD CB FB 16   [23] 3846 	rl	-5 (ix)
   19E6 10 EE         [13] 3847 	djnz	01022$
   19E8 DD 36 F1 00   [19] 3848 	ld	-15 (ix), #0x00
   19EC DD 36 F2 00   [19] 3849 	ld	-14 (ix), #0x00
   19F0 DD 7E FA      [19] 3850 	ld	a, -6 (ix)
   19F3 DD 77 F3      [19] 3851 	ld	-13 (ix), a
   19F6 DD 7E FB      [19] 3852 	ld	a, -5 (ix)
   19F9 DD 77 F4      [19] 3853 	ld	-12 (ix), a
   19FC FD 7E 00      [19] 3854 	ld	a, 0 (iy)
   19FF DD B6 F1      [19] 3855 	or	a, -15 (ix)
   1A02 DD 77 F8      [19] 3856 	ld	-8 (ix), a
   1A05 FD 7E 01      [19] 3857 	ld	a, 1 (iy)
   1A08 DD B6 F2      [19] 3858 	or	a, -14 (ix)
   1A0B DD 77 F9      [19] 3859 	ld	-7 (ix), a
   1A0E FD 7E 02      [19] 3860 	ld	a, 2 (iy)
   1A11 DD B6 F3      [19] 3861 	or	a, -13 (ix)
   1A14 DD 77 FA      [19] 3862 	ld	-6 (ix), a
   1A17 FD 7E 03      [19] 3863 	ld	a, 3 (iy)
   1A1A DD B6 F4      [19] 3864 	or	a, -12 (ix)
   1A1D DD 77 FB      [19] 3865 	ld	-5 (ix), a
   1A20 18 0D         [12] 3866 	jr	00299$
   1A22                    3867 00298$:
                           3868 ;src\CFG8266.c:772: SentFileSize = 0;
   1A22 AF            [ 4] 3869 	xor	a, a
   1A23 DD 77 F8      [19] 3870 	ld	-8 (ix), a
   1A26 DD 77 F9      [19] 3871 	ld	-7 (ix), a
   1A29 DD 77 FA      [19] 3872 	ld	-6 (ix), a
   1A2C DD 77 FB      [19] 3873 	ld	-5 (ix), a
   1A2F                    3874 00299$:
                           3875 ;src\CFG8266.c:774: ultostr(SentFileSize,chFileSize,10);
   1A2F 21 A7 0D      [10] 3876 	ld	hl, #3495
   1A32 39            [11] 3877 	add	hl, sp
   1A33 4D            [ 4] 3878 	ld	c, l
   1A34 44            [ 4] 3879 	ld	b, h
   1A35 E5            [11] 3880 	push	hl
   1A36 11 0A 00      [10] 3881 	ld	de, #0x000a
   1A39 D5            [11] 3882 	push	de
   1A3A C5            [11] 3883 	push	bc
   1A3B DD 6E FA      [19] 3884 	ld	l, -6 (ix)
   1A3E DD 66 FB      [19] 3885 	ld	h, -5 (ix)
   1A41 E5            [11] 3886 	push	hl
   1A42 DD 6E F8      [19] 3887 	ld	l, -8 (ix)
   1A45 DD 66 F9      [19] 3888 	ld	h, -7 (ix)
   1A48 E5            [11] 3889 	push	hl
   1A49 CDr5Dr07      [17] 3890 	call	_ultostr
   1A4C 21 08 00      [10] 3891 	ld	hl, #8
   1A4F 39            [11] 3892 	add	hl, sp
   1A50 F9            [ 6] 3893 	ld	sp, hl
   1A51 DD 4E FE      [19] 3894 	ld	c, -2 (ix)
   1A54 DD 46 FF      [19] 3895 	ld	b, -1 (ix)
   1A57 C5            [11] 3896 	push	bc
   1A58 CDr00r00      [17] 3897 	call	_Close
   1A5B F1            [10] 3898 	pop	af
   1A5C E1            [10] 3899 	pop	hl
                           3900 ;src\CFG8266.c:776: printf ("File: %s Size: %s \r\n",ucFile,chFileSize);
   1A5D DD 4E FC      [19] 3901 	ld	c, -4 (ix)
   1A60 DD 46 FD      [19] 3902 	ld	b, -3 (ix)
   1A63 11r96r24      [10] 3903 	ld	de, #___str_79+0
   1A66 E5            [11] 3904 	push	hl
   1A67 C5            [11] 3905 	push	bc
   1A68 D5            [11] 3906 	push	de
   1A69 CDr00r00      [17] 3907 	call	_printf
   1A6C 21 06 00      [10] 3908 	ld	hl, #6
   1A6F 39            [11] 3909 	add	hl, sp
   1A70 F9            [ 6] 3910 	ld	sp, hl
                           3911 ;src\CFG8266.c:777: if (SentFileSize)
   1A71 DD 7E FB      [19] 3912 	ld	a, -5 (ix)
   1A74 DD B6 FA      [19] 3913 	or	a, -6 (ix)
   1A77 DD B6 F9      [19] 3914 	or	a, -7 (ix)
   1A7A DD B6 F8      [19] 3915 	or	a, -8 (ix)
   1A7D CAr1Dr1F      [10] 3916 	jp	Z, 00331$
                           3917 ;src\CFG8266.c:779: iFile = Open (ucFile,O_RDONLY);
   1A80 DD 4E FC      [19] 3918 	ld	c, -4 (ix)
   1A83 DD 46 FD      [19] 3919 	ld	b, -3 (ix)
   1A86 21 00 00      [10] 3920 	ld	hl, #0x0000
   1A89 E5            [11] 3921 	push	hl
   1A8A C5            [11] 3922 	push	bc
   1A8B CDr00r00      [17] 3923 	call	_Open
   1A8E F1            [10] 3924 	pop	af
   1A8F F1            [10] 3925 	pop	af
   1A90 FD 21 10 00   [14] 3926 	ld	iy, #16
   1A94 FD 39         [15] 3927 	add	iy, sp
   1A96 FD 75 00      [19] 3928 	ld	0 (iy), l
   1A99 FD 74 01      [19] 3929 	ld	1 (iy), h
                           3930 ;src\CFG8266.c:780: if (iFile!=-1)
   1A9C FD 7E 00      [19] 3931 	ld	a, 0 (iy)
   1A9F 3C            [ 4] 3932 	inc	a
   1AA0 20 07         [12] 3933 	jr	NZ,01024$
   1AA2 FD 7E 01      [19] 3934 	ld	a, 1 (iy)
   1AA5 3C            [ 4] 3935 	inc	a
   1AA6 CArFBr1E      [10] 3936 	jp	Z,00328$
   1AA9                    3937 01024$:
                           3938 ;src\CFG8266.c:782: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1AA9 DD 4E F6      [19] 3939 	ld	c, -10 (ix)
   1AAC DD 46 F7      [19] 3940 	ld	b, -9 (ix)
   1AAF 21 00 01      [10] 3941 	ld	hl, #0x0100
   1AB2 E5            [11] 3942 	push	hl
   1AB3 C5            [11] 3943 	push	bc
   1AB4 FD 6E 00      [19] 3944 	ld	l, 0 (iy)
   1AB7 FD 66 01      [19] 3945 	ld	h, 1 (iy)
   1ABA E5            [11] 3946 	push	hl
   1ABB CDr00r00      [17] 3947 	call	_MyRead
   1ABE F1            [10] 3948 	pop	af
   1ABF F1            [10] 3949 	pop	af
   1AC0 F1            [10] 3950 	pop	af
   1AC1 DD 75 F0      [19] 3951 	ld	-16 (ix), l
   1AC4 DD 74 F1      [19] 3952 	ld	-15 (ix), h
                           3953 ;src\CFG8266.c:783: if (FileRead == 256)
   1AC7 DD 7E F0      [19] 3954 	ld	a, -16 (ix)
   1ACA B7            [ 4] 3955 	or	a, a
   1ACB C2rE4r1E      [10] 3956 	jp	NZ,00325$
   1ACE DD 7E F1      [19] 3957 	ld	a, -15 (ix)
   1AD1 3D            [ 4] 3958 	dec	a
   1AD2 C2rE4r1E      [10] 3959 	jp	NZ,00325$
                           3960 ;src\CFG8266.c:786: if (ucIsFw)
   1AD5 3Ar08r00      [13] 3961 	ld	a,(#_ucIsFw + 0)
   1AD8 B7            [ 4] 3962 	or	a, a
   1AD9 28 0A         [12] 3963 	jr	Z,00301$
                           3964 ;src\CFG8266.c:787: TxByte('Z'); //Request start of RS232 update
   1ADB 3E 5A         [ 7] 3965 	ld	a, #0x5a
   1ADD F5            [11] 3966 	push	af
   1ADE 33            [ 6] 3967 	inc	sp
   1ADF CDr4Fr07      [17] 3968 	call	_TxByte
   1AE2 33            [ 6] 3969 	inc	sp
   1AE3 18 08         [12] 3970 	jr	00302$
   1AE5                    3971 00301$:
                           3972 ;src\CFG8266.c:789: TxByte('Y'); //Request start of RS232 cert update
   1AE5 3E 59         [ 7] 3973 	ld	a, #0x59
   1AE7 F5            [11] 3974 	push	af
   1AE8 33            [ 6] 3975 	inc	sp
   1AE9 CDr4Fr07      [17] 3976 	call	_TxByte
   1AEC 33            [ 6] 3977 	inc	sp
   1AED                    3978 00302$:
                           3979 ;src\CFG8266.c:790: TxByte(0);
   1AED AF            [ 4] 3980 	xor	a, a
   1AEE F5            [11] 3981 	push	af
   1AEF 33            [ 6] 3982 	inc	sp
   1AF0 CDr4Fr07      [17] 3983 	call	_TxByte
   1AF3 33            [ 6] 3984 	inc	sp
                           3985 ;src\CFG8266.c:791: TxByte(12);
   1AF4 3E 0C         [ 7] 3986 	ld	a, #0x0c
   1AF6 F5            [11] 3987 	push	af
   1AF7 33            [ 6] 3988 	inc	sp
   1AF8 CDr4Fr07      [17] 3989 	call	_TxByte
   1AFB 33            [ 6] 3990 	inc	sp
                           3991 ;src\CFG8266.c:792: TxByte((unsigned char)(SentFileSize&0xff));
   1AFC DD 7E F8      [19] 3992 	ld	a, -8 (ix)
   1AFF F5            [11] 3993 	push	af
   1B00 33            [ 6] 3994 	inc	sp
   1B01 CDr4Fr07      [17] 3995 	call	_TxByte
   1B04 33            [ 6] 3996 	inc	sp
                           3997 ;src\CFG8266.c:793: TxByte((unsigned char)((SentFileSize&0xff00)>>8));
   1B05 DD 46 F9      [19] 3998 	ld	b, -7 (ix)
   1B08 0E 00         [ 7] 3999 	ld	c, #0x00
   1B0A C5            [11] 4000 	push	bc
   1B0B 33            [ 6] 4001 	inc	sp
   1B0C CDr4Fr07      [17] 4002 	call	_TxByte
   1B0F 33            [ 6] 4003 	inc	sp
                           4004 ;src\CFG8266.c:794: TxByte((unsigned char)((SentFileSize&0xff0000)>>16));
   1B10 DD 7E FA      [19] 4005 	ld	a, -6 (ix)
   1B13 F5            [11] 4006 	push	af
   1B14 33            [ 6] 4007 	inc	sp
   1B15 CDr4Fr07      [17] 4008 	call	_TxByte
   1B18 33            [ 6] 4009 	inc	sp
                           4010 ;src\CFG8266.c:795: TxByte((unsigned char)((SentFileSize&0xff000000)>>24));
   1B19 DD 7E FB      [19] 4011 	ld	a, -5 (ix)
   1B1C F5            [11] 4012 	push	af
   1B1D 33            [ 6] 4013 	inc	sp
   1B1E CDr4Fr07      [17] 4014 	call	_TxByte
   1B21 33            [ 6] 4015 	inc	sp
                           4016 ;src\CFG8266.c:796: TxByte((unsigned char)((SentFileSize&0xff00000000)>>32));
   1B22 DD 7E F8      [19] 4017 	ld	a, -8 (ix)
   1B25 FD 21 00 00   [14] 4018 	ld	iy, #0
   1B29 FD 39         [15] 4019 	add	iy, sp
   1B2B FD 77 00      [19] 4020 	ld	0 (iy), a
   1B2E DD 7E F9      [19] 4021 	ld	a, -7 (ix)
   1B31 FD 77 01      [19] 4022 	ld	1 (iy), a
   1B34 DD 7E FA      [19] 4023 	ld	a, -6 (ix)
   1B37 FD 77 02      [19] 4024 	ld	2 (iy), a
   1B3A DD 7E FB      [19] 4025 	ld	a, -5 (ix)
   1B3D FD 77 03      [19] 4026 	ld	3 (iy), a
   1B40 AF            [ 4] 4027 	xor	a, a
   1B41 FD 77 04      [19] 4028 	ld	4 (iy), a
   1B44 FD 77 05      [19] 4029 	ld	5 (iy), a
   1B47 FD 77 06      [19] 4030 	ld	6 (iy), a
   1B4A FD 77 07      [19] 4031 	ld	7 (iy), a
   1B4D FD 21 08 00   [14] 4032 	ld	iy, #8
   1B51 FD 39         [15] 4033 	add	iy, sp
   1B53 FD 36 00 00   [19] 4034 	ld	0 (iy), #0x00
   1B57 FD 36 01 00   [19] 4035 	ld	1 (iy), #0x00
   1B5B FD 36 02 00   [19] 4036 	ld	2 (iy), #0x00
   1B5F FD 36 03 00   [19] 4037 	ld	3 (iy), #0x00
   1B63 21 04 00      [10] 4038 	ld	hl, #0+4
   1B66 39            [11] 4039 	add	hl, sp
   1B67 7E            [ 7] 4040 	ld	a, (hl)
   1B68 FD 21 08 00   [14] 4041 	ld	iy, #8
   1B6C FD 39         [15] 4042 	add	iy, sp
   1B6E FD 77 04      [19] 4043 	ld	4 (iy), a
   1B71 FD 36 05 00   [19] 4044 	ld	5 (iy), #0x00
   1B75 FD 36 06 00   [19] 4045 	ld	6 (iy), #0x00
   1B79 FD 36 07 00   [19] 4046 	ld	7 (iy), #0x00
   1B7D 06 20         [ 7] 4047 	ld	b, #0x20
   1B7F                    4048 01031$:
   1B7F FD CB 07 2E   [23] 4049 	sra	7 (iy)
   1B83 FD CB 06 1E   [23] 4050 	rr	6 (iy)
   1B87 FD CB 05 1E   [23] 4051 	rr	5 (iy)
   1B8B FD CB 04 1E   [23] 4052 	rr	4 (iy)
   1B8F FD CB 03 1E   [23] 4053 	rr	3 (iy)
   1B93 FD CB 02 1E   [23] 4054 	rr	2 (iy)
   1B97 FD CB 01 1E   [23] 4055 	rr	1 (iy)
   1B9B FD CB 00 1E   [23] 4056 	rr	0 (iy)
   1B9F 10 DE         [13] 4057 	djnz	01031$
   1BA1 FD 7E 00      [19] 4058 	ld	a, 0 (iy)
   1BA4 F5            [11] 4059 	push	af
   1BA5 33            [ 6] 4060 	inc	sp
   1BA6 CDr4Fr07      [17] 4061 	call	_TxByte
   1BA9 33            [ 6] 4062 	inc	sp
                           4063 ;src\CFG8266.c:797: TxByte((unsigned char)((SentFileSize&0xff0000000000)>>40));
   1BAA FD 21 08 00   [14] 4064 	ld	iy, #8
   1BAE FD 39         [15] 4065 	add	iy, sp
   1BB0 FD 36 00 00   [19] 4066 	ld	0 (iy), #0x00
   1BB4 FD 36 01 00   [19] 4067 	ld	1 (iy), #0x00
   1BB8 FD 36 02 00   [19] 4068 	ld	2 (iy), #0x00
   1BBC FD 36 03 00   [19] 4069 	ld	3 (iy), #0x00
   1BC0 FD 36 04 00   [19] 4070 	ld	4 (iy), #0x00
   1BC4 21 05 00      [10] 4071 	ld	hl, #0+5
   1BC7 39            [11] 4072 	add	hl, sp
   1BC8 7E            [ 7] 4073 	ld	a, (hl)
   1BC9 FD 21 08 00   [14] 4074 	ld	iy, #8
   1BCD FD 39         [15] 4075 	add	iy, sp
   1BCF FD 77 05      [19] 4076 	ld	5 (iy), a
   1BD2 FD 36 06 00   [19] 4077 	ld	6 (iy), #0x00
   1BD6 FD 36 07 00   [19] 4078 	ld	7 (iy), #0x00
   1BDA 06 28         [ 7] 4079 	ld	b, #0x28
   1BDC                    4080 01033$:
   1BDC FD CB 07 2E   [23] 4081 	sra	7 (iy)
   1BE0 FD CB 06 1E   [23] 4082 	rr	6 (iy)
   1BE4 FD CB 05 1E   [23] 4083 	rr	5 (iy)
   1BE8 FD CB 04 1E   [23] 4084 	rr	4 (iy)
   1BEC FD CB 03 1E   [23] 4085 	rr	3 (iy)
   1BF0 FD CB 02 1E   [23] 4086 	rr	2 (iy)
   1BF4 FD CB 01 1E   [23] 4087 	rr	1 (iy)
   1BF8 FD CB 00 1E   [23] 4088 	rr	0 (iy)
   1BFC 10 DE         [13] 4089 	djnz	01033$
   1BFE FD 7E 00      [19] 4090 	ld	a, 0 (iy)
   1C01 F5            [11] 4091 	push	af
   1C02 33            [ 6] 4092 	inc	sp
   1C03 CDr4Fr07      [17] 4093 	call	_TxByte
   1C06 33            [ 6] 4094 	inc	sp
                           4095 ;src\CFG8266.c:798: TxByte((unsigned char)((SentFileSize&0xff000000000000)>>48));
   1C07 FD 21 08 00   [14] 4096 	ld	iy, #8
   1C0B FD 39         [15] 4097 	add	iy, sp
   1C0D FD 36 00 00   [19] 4098 	ld	0 (iy), #0x00
   1C11 FD 36 01 00   [19] 4099 	ld	1 (iy), #0x00
   1C15 FD 36 02 00   [19] 4100 	ld	2 (iy), #0x00
   1C19 FD 36 03 00   [19] 4101 	ld	3 (iy), #0x00
   1C1D FD 36 04 00   [19] 4102 	ld	4 (iy), #0x00
   1C21 FD 36 05 00   [19] 4103 	ld	5 (iy), #0x00
   1C25 21 06 00      [10] 4104 	ld	hl, #0+6
   1C28 39            [11] 4105 	add	hl, sp
   1C29 7E            [ 7] 4106 	ld	a, (hl)
   1C2A FD 21 08 00   [14] 4107 	ld	iy, #8
   1C2E FD 39         [15] 4108 	add	iy, sp
   1C30 FD 77 06      [19] 4109 	ld	6 (iy), a
   1C33 FD 36 07 00   [19] 4110 	ld	7 (iy), #0x00
   1C37 06 30         [ 7] 4111 	ld	b, #0x30
   1C39                    4112 01035$:
   1C39 FD CB 07 2E   [23] 4113 	sra	7 (iy)
   1C3D FD CB 06 1E   [23] 4114 	rr	6 (iy)
   1C41 FD CB 05 1E   [23] 4115 	rr	5 (iy)
   1C45 FD CB 04 1E   [23] 4116 	rr	4 (iy)
   1C49 FD CB 03 1E   [23] 4117 	rr	3 (iy)
   1C4D FD CB 02 1E   [23] 4118 	rr	2 (iy)
   1C51 FD CB 01 1E   [23] 4119 	rr	1 (iy)
   1C55 FD CB 00 1E   [23] 4120 	rr	0 (iy)
   1C59 10 DE         [13] 4121 	djnz	01035$
   1C5B FD 7E 00      [19] 4122 	ld	a, 0 (iy)
   1C5E F5            [11] 4123 	push	af
   1C5F 33            [ 6] 4124 	inc	sp
   1C60 CDr4Fr07      [17] 4125 	call	_TxByte
   1C63 33            [ 6] 4126 	inc	sp
                           4127 ;src\CFG8266.c:799: TxByte((unsigned char)((SentFileSize&0xff00000000000000)>>56));
   1C64 DD 7E F8      [19] 4128 	ld	a, -8 (ix)
   1C67 FD 21 08 00   [14] 4129 	ld	iy, #8
   1C6B FD 39         [15] 4130 	add	iy, sp
   1C6D FD 77 00      [19] 4131 	ld	0 (iy), a
   1C70 DD 7E F9      [19] 4132 	ld	a, -7 (ix)
   1C73 FD 77 01      [19] 4133 	ld	1 (iy), a
   1C76 DD 7E FA      [19] 4134 	ld	a, -6 (ix)
   1C79 FD 77 02      [19] 4135 	ld	2 (iy), a
   1C7C DD 7E FB      [19] 4136 	ld	a, -5 (ix)
   1C7F FD 77 03      [19] 4137 	ld	3 (iy), a
   1C82 AF            [ 4] 4138 	xor	a, a
   1C83 FD 77 04      [19] 4139 	ld	4 (iy), a
   1C86 FD 77 05      [19] 4140 	ld	5 (iy), a
   1C89 FD 77 06      [19] 4141 	ld	6 (iy), a
   1C8C FD 77 07      [19] 4142 	ld	7 (iy), a
   1C8F FD 36 00 00   [19] 4143 	ld	0 (iy), #0x00
   1C93 FD 36 01 00   [19] 4144 	ld	1 (iy), #0x00
   1C97 FD 36 02 00   [19] 4145 	ld	2 (iy), #0x00
   1C9B FD 36 03 00   [19] 4146 	ld	3 (iy), #0x00
   1C9F FD 36 04 00   [19] 4147 	ld	4 (iy), #0x00
   1CA3 FD 36 05 00   [19] 4148 	ld	5 (iy), #0x00
   1CA7 FD 36 06 00   [19] 4149 	ld	6 (iy), #0x00
   1CAB FD 7E 07      [19] 4150 	ld	a, 7 (iy)
   1CAE FD 77 07      [19] 4151 	ld	7 (iy), a
   1CB1 06 38         [ 7] 4152 	ld	b, #0x38
   1CB3                    4153 01037$:
   1CB3 FD CB 07 3E   [23] 4154 	srl	7 (iy)
   1CB7 FD CB 06 1E   [23] 4155 	rr	6 (iy)
   1CBB FD CB 05 1E   [23] 4156 	rr	5 (iy)
   1CBF FD CB 04 1E   [23] 4157 	rr	4 (iy)
   1CC3 FD CB 03 1E   [23] 4158 	rr	3 (iy)
   1CC7 FD CB 02 1E   [23] 4159 	rr	2 (iy)
   1CCB FD CB 01 1E   [23] 4160 	rr	1 (iy)
   1CCF FD CB 00 1E   [23] 4161 	rr	0 (iy)
   1CD3 10 DE         [13] 4162 	djnz	01037$
   1CD5 FD 7E 00      [19] 4163 	ld	a, 0 (iy)
   1CD8 F5            [11] 4164 	push	af
   1CD9 33            [ 6] 4165 	inc	sp
   1CDA CDr4Fr07      [17] 4166 	call	_TxByte
   1CDD 33            [ 6] 4167 	inc	sp
                           4168 ;src\CFG8266.c:800: TxByte(ucServer[0]);
   1CDE DD 6E F6      [19] 4169 	ld	l, -10 (ix)
   1CE1 DD 66 F7      [19] 4170 	ld	h, -9 (ix)
   1CE4 7E            [ 7] 4171 	ld	a, (hl)
   1CE5 F5            [11] 4172 	push	af
   1CE6 33            [ 6] 4173 	inc	sp
   1CE7 CDr4Fr07      [17] 4174 	call	_TxByte
   1CEA 33            [ 6] 4175 	inc	sp
                           4176 ;src\CFG8266.c:801: TxByte(ucServer[1]);
   1CEB DD 6E F6      [19] 4177 	ld	l, -10 (ix)
   1CEE DD 66 F7      [19] 4178 	ld	h, -9 (ix)
   1CF1 23            [ 6] 4179 	inc	hl
   1CF2 7E            [ 7] 4180 	ld	a, (hl)
   1CF3 F5            [11] 4181 	push	af
   1CF4 33            [ 6] 4182 	inc	sp
   1CF5 CDr4Fr07      [17] 4183 	call	_TxByte
   1CF8 33            [ 6] 4184 	inc	sp
                           4185 ;src\CFG8266.c:802: TxByte(ucServer[2]);
   1CF9 DD 6E F6      [19] 4186 	ld	l, -10 (ix)
   1CFC DD 66 F7      [19] 4187 	ld	h, -9 (ix)
   1CFF 23            [ 6] 4188 	inc	hl
   1D00 23            [ 6] 4189 	inc	hl
   1D01 7E            [ 7] 4190 	ld	a, (hl)
   1D02 F5            [11] 4191 	push	af
   1D03 33            [ 6] 4192 	inc	sp
   1D04 CDr4Fr07      [17] 4193 	call	_TxByte
   1D07 33            [ 6] 4194 	inc	sp
                           4195 ;src\CFG8266.c:803: TxByte(ucServer[3]);
   1D08 DD 6E F6      [19] 4196 	ld	l, -10 (ix)
   1D0B DD 66 F7      [19] 4197 	ld	h, -9 (ix)
   1D0E 23            [ 6] 4198 	inc	hl
   1D0F 23            [ 6] 4199 	inc	hl
   1D10 23            [ 6] 4200 	inc	hl
   1D11 7E            [ 7] 4201 	ld	a, (hl)
   1D12 F5            [11] 4202 	push	af
   1D13 33            [ 6] 4203 	inc	sp
   1D14 CDr4Fr07      [17] 4204 	call	_TxByte
   1D17 33            [ 6] 4205 	inc	sp
                           4206 ;src\CFG8266.c:805: if (ucIsFw)
   1D18 3Ar08r00      [13] 4207 	ld	a,(#_ucIsFw + 0)
   1D1B B7            [ 4] 4208 	or	a, a
   1D1C 28 26         [12] 4209 	jr	Z,00304$
                           4210 ;src\CFG8266.c:806: bResponse = WaitForRXData(responseRSFWUpdate,2,60,true,false,NULL,0);
   1D1E 21 00 00      [10] 4211 	ld	hl, #0x0000
   1D21 E5            [11] 4212 	push	hl
   1D22 2E 00         [ 7] 4213 	ld	l, #0x00
   1D24 E5            [11] 4214 	push	hl
   1D25 AF            [ 4] 4215 	xor	a, a
   1D26 57            [ 4] 4216 	ld	d,a
   1D27 1E 01         [ 7] 4217 	ld	e,#0x01
   1D29 D5            [11] 4218 	push	de
   1D2A 2E 3C         [ 7] 4219 	ld	l, #0x3c
   1D2C E5            [11] 4220 	push	hl
   1D2D 2E 02         [ 7] 4221 	ld	l, #0x02
   1D2F E5            [11] 4222 	push	hl
   1D30 21r1Fr01      [10] 4223 	ld	hl, #_responseRSFWUpdate
   1D33 E5            [11] 4224 	push	hl
   1D34 CDrCBr08      [17] 4225 	call	_WaitForRXData
   1D37 FD 21 0C 00   [14] 4226 	ld	iy, #12
   1D3B FD 39         [15] 4227 	add	iy, sp
   1D3D FD F9         [10] 4228 	ld	sp, iy
   1D3F DD 75 F2      [19] 4229 	ld	-14 (ix), l
   1D42 18 24         [12] 4230 	jr	00305$
   1D44                    4231 00304$:
                           4232 ;src\CFG8266.c:808: bResponse = WaitForRXData(responseRSCERTUpdate,2,60,true,false,NULL,0);
   1D44 21 00 00      [10] 4233 	ld	hl, #0x0000
   1D47 E5            [11] 4234 	push	hl
   1D48 2E 00         [ 7] 4235 	ld	l, #0x00
   1D4A E5            [11] 4236 	push	hl
   1D4B AF            [ 4] 4237 	xor	a, a
   1D4C 57            [ 4] 4238 	ld	d,a
   1D4D 1E 01         [ 7] 4239 	ld	e,#0x01
   1D4F D5            [11] 4240 	push	de
   1D50 2E 3C         [ 7] 4241 	ld	l, #0x3c
   1D52 E5            [11] 4242 	push	hl
   1D53 2E 02         [ 7] 4243 	ld	l, #0x02
   1D55 E5            [11] 4244 	push	hl
   1D56 21r21r01      [10] 4245 	ld	hl, #_responseRSCERTUpdate
   1D59 E5            [11] 4246 	push	hl
   1D5A CDrCBr08      [17] 4247 	call	_WaitForRXData
   1D5D FD 21 0C 00   [14] 4248 	ld	iy, #12
   1D61 FD 39         [15] 4249 	add	iy, sp
   1D63 FD F9         [10] 4250 	ld	sp, iy
   1D65 DD 75 F2      [19] 4251 	ld	-14 (ix), l
   1D68                    4252 00305$:
                           4253 ;src\CFG8266.c:810: if (!bResponse)
   1D68 DD 7E F2      [19] 4254 	ld	a, -14 (ix)
   1D6B B7            [ 4] 4255 	or	a, a
   1D6C 20 0B         [12] 4256 	jr	NZ,00322$
                           4257 ;src\CFG8266.c:811: printf("Error requesting to start firmware update.\r\n");
   1D6E 21rABr24      [10] 4258 	ld	hl, #___str_81
   1D71 E5            [11] 4259 	push	hl
   1D72 CDr00r00      [17] 4260 	call	_puts
   1D75 F1            [10] 4261 	pop	af
   1D76 C3rECr1E      [10] 4262 	jp	00326$
   1D79                    4263 00322$:
                           4264 ;src\CFG8266.c:814: uiAnimationTimeOut = TickCount + 9;
   1D79 FD 21 9E FC   [14] 4265 	ld	iy, #_TickCount
   1D7D FD 7E 00      [19] 4266 	ld	a, 0 (iy)
   1D80 C6 09         [ 7] 4267 	add	a, #0x09
   1D82 DD 77 FC      [19] 4268 	ld	-4 (ix), a
   1D85 FD 7E 01      [19] 4269 	ld	a, 1 (iy)
   1D88 CE 00         [ 7] 4270 	adc	a, #0x00
   1D8A DD 77 FD      [19] 4271 	ld	-3 (ix), a
                           4272 ;src\CFG8266.c:815: do
   1D8D DD 7E F6      [19] 4273 	ld	a, -10 (ix)
   1D90 DD 77 F3      [19] 4274 	ld	-13 (ix), a
   1D93 DD 7E F7      [19] 4275 	ld	a, -9 (ix)
   1D96 DD 77 F4      [19] 4276 	ld	-12 (ix), a
   1D99 AF            [ 4] 4277 	xor	a, a
   1D9A DD 77 FE      [19] 4278 	ld	-2 (ix), a
   1D9D DD 77 FF      [19] 4279 	ld	-1 (ix), a
   1DA0                    4280 00316$:
                           4281 ;src\CFG8266.c:817: --uiAnimationTimeOut;
   1DA0 DD 6E FC      [19] 4282 	ld	l, -4 (ix)
   1DA3 DD 66 FD      [19] 4283 	ld	h, -3 (ix)
   1DA6 2B            [ 6] 4284 	dec	hl
   1DA7 DD 75 FC      [19] 4285 	ld	-4 (ix), l
   1DAA DD 74 FD      [19] 4286 	ld	-3 (ix), h
                           4287 ;src\CFG8266.c:818: if (TickCount>=uiAnimationTimeOut)
   1DAD FD 21 9E FC   [14] 4288 	ld	iy, #_TickCount
   1DB1 FD 7E 00      [19] 4289 	ld	a, 0 (iy)
   1DB4 DD 96 FC      [19] 4290 	sub	a, -4 (ix)
   1DB7 FD 7E 01      [19] 4291 	ld	a, 1 (iy)
   1DBA DD 9E FD      [19] 4292 	sbc	a, -3 (ix)
   1DBD 38 35         [12] 4293 	jr	C,00307$
                           4294 ;src\CFG8266.c:820: uiAnimationTimeOut = 9;
   1DBF DD 36 FC 09   [19] 4295 	ld	-4 (ix), #0x09
   1DC3 AF            [ 4] 4296 	xor	a, a
   1DC4 DD 77 FD      [19] 4297 	ld	-3 (ix), a
                           4298 ;src\CFG8266.c:822: printf("%s",advance[i%5]); // next animation step
   1DC7 21 05 00      [10] 4299 	ld	hl, #0x0005
   1DCA E5            [11] 4300 	push	hl
   1DCB DD 6E FE      [19] 4301 	ld	l, -2 (ix)
   1DCE DD 66 FF      [19] 4302 	ld	h, -1 (ix)
   1DD1 E5            [11] 4303 	push	hl
   1DD2 CDr00r00      [17] 4304 	call	__moduint
   1DD5 F1            [10] 4305 	pop	af
   1DD6 F1            [10] 4306 	pop	af
   1DD7 4D            [ 4] 4307 	ld	c, l
   1DD8 44            [ 4] 4308 	ld	b, h
   1DD9 29            [11] 4309 	add	hl, hl
   1DDA 29            [11] 4310 	add	hl, hl
   1DDB 29            [11] 4311 	add	hl, hl
   1DDC 09            [11] 4312 	add	hl, bc
   1DDD 29            [11] 4313 	add	hl, hl
   1DDE 11r2Dr01      [10] 4314 	ld	de, #_advance
   1DE1 19            [11] 4315 	add	hl, de
   1DE2 E5            [11] 4316 	push	hl
   1DE3 21rD7r24      [10] 4317 	ld	hl, #___str_82
   1DE6 E5            [11] 4318 	push	hl
   1DE7 CDr00r00      [17] 4319 	call	_printf
   1DEA F1            [10] 4320 	pop	af
   1DEB F1            [10] 4321 	pop	af
                           4322 ;src\CFG8266.c:823: ++i;
   1DEC DD 34 FE      [23] 4323 	inc	-2 (ix)
   1DEF 20 03         [12] 4324 	jr	NZ,01039$
   1DF1 DD 34 FF      [23] 4325 	inc	-1 (ix)
   1DF4                    4326 01039$:
   1DF4                    4327 00307$:
                           4328 ;src\CFG8266.c:825: if (!ucFirstBlock)
   1DF4 DD 7E F5      [19] 4329 	ld	a, -11 (ix)
   1DF7 B7            [ 4] 4330 	or	a, a
   1DF8 20 30         [12] 4331 	jr	NZ,00311$
                           4332 ;src\CFG8266.c:827: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1DFA DD 4E F3      [19] 4333 	ld	c, -13 (ix)
   1DFD DD 46 F4      [19] 4334 	ld	b, -12 (ix)
   1E00 21 00 01      [10] 4335 	ld	hl, #0x0100
   1E03 E5            [11] 4336 	push	hl
   1E04 C5            [11] 4337 	push	bc
   1E05 21 14 00      [10] 4338 	ld	hl, #20
   1E08 39            [11] 4339 	add	hl, sp
   1E09 4E            [ 7] 4340 	ld	c, (hl)
   1E0A 23            [ 6] 4341 	inc	hl
   1E0B 46            [ 7] 4342 	ld	b, (hl)
   1E0C C5            [11] 4343 	push	bc
   1E0D CDr00r00      [17] 4344 	call	_MyRead
   1E10 F1            [10] 4345 	pop	af
   1E11 F1            [10] 4346 	pop	af
   1E12 F1            [10] 4347 	pop	af
   1E13 DD 75 F0      [19] 4348 	ld	-16 (ix), l
                           4349 ;src\CFG8266.c:828: if (FileRead ==0)
   1E16 DD 74 F1      [19] 4350 	ld	-15 (ix), h
   1E19 7C            [ 4] 4351 	ld	a, h
   1E1A DD B6 F0      [19] 4352 	or	a, -16 (ix)
   1E1D 20 0F         [12] 4353 	jr	NZ,00312$
                           4354 ;src\CFG8266.c:830: printf("\rError reading file...\r\n");
   1E1F 21rDAr24      [10] 4355 	ld	hl, #___str_84
   1E22 E5            [11] 4356 	push	hl
   1E23 CDr00r00      [17] 4357 	call	_puts
   1E26 F1            [10] 4358 	pop	af
                           4359 ;src\CFG8266.c:831: break;
   1E27 C3rC8r1E      [10] 4360 	jp	00318$
   1E2A                    4361 00311$:
                           4362 ;src\CFG8266.c:835: ucFirstBlock = 0;
   1E2A AF            [ 4] 4363 	xor	a, a
   1E2B DD 77 F5      [19] 4364 	ld	-11 (ix), a
   1E2E                    4365 00312$:
                           4366 ;src\CFG8266.c:837: TxByte('z'); //Write block
   1E2E 3E 7A         [ 7] 4367 	ld	a, #0x7a
   1E30 F5            [11] 4368 	push	af
   1E31 33            [ 6] 4369 	inc	sp
   1E32 CDr4Fr07      [17] 4370 	call	_TxByte
   1E35 33            [ 6] 4371 	inc	sp
                           4372 ;src\CFG8266.c:838: TxByte((unsigned char)((FileRead&0xff00)>>8));
   1E36 DD 46 F1      [19] 4373 	ld	b, -15 (ix)
   1E39 0E 00         [ 7] 4374 	ld	c, #0x00
   1E3B C5            [11] 4375 	push	bc
   1E3C 33            [ 6] 4376 	inc	sp
   1E3D CDr4Fr07      [17] 4377 	call	_TxByte
   1E40 33            [ 6] 4378 	inc	sp
                           4379 ;src\CFG8266.c:839: TxByte((unsigned char)(FileRead&0xff));
   1E41 DD 7E F0      [19] 4380 	ld	a, -16 (ix)
   1E44 F5            [11] 4381 	push	af
   1E45 33            [ 6] 4382 	inc	sp
   1E46 CDr4Fr07      [17] 4383 	call	_TxByte
   1E49 33            [ 6] 4384 	inc	sp
                           4385 ;src\CFG8266.c:840: for (ii=0;ii<256;ii++)
   1E4A 01 00 00      [10] 4386 	ld	bc, #0x0000
   1E4D                    4387 00386$:
                           4388 ;src\CFG8266.c:841: TxByte(ucServer[ii]);
   1E4D DD 6E F6      [19] 4389 	ld	l, -10 (ix)
   1E50 DD 66 F7      [19] 4390 	ld	h, -9 (ix)
   1E53 09            [11] 4391 	add	hl, bc
   1E54 7E            [ 7] 4392 	ld	a, (hl)
   1E55 C5            [11] 4393 	push	bc
   1E56 F5            [11] 4394 	push	af
   1E57 33            [ 6] 4395 	inc	sp
   1E58 CDr4Fr07      [17] 4396 	call	_TxByte
   1E5B 33            [ 6] 4397 	inc	sp
   1E5C C1            [10] 4398 	pop	bc
                           4399 ;src\CFG8266.c:840: for (ii=0;ii<256;ii++)
   1E5D 03            [ 6] 4400 	inc	bc
   1E5E 78            [ 4] 4401 	ld	a, b
   1E5F D6 01         [ 7] 4402 	sub	a, #0x01
   1E61 38 EA         [12] 4403 	jr	C,00386$
                           4404 ;src\CFG8266.c:843: bResponse = WaitForRXData(responseWRBlock,2,600,true,false,NULL,0);
   1E63 21 00 00      [10] 4405 	ld	hl, #0x0000
   1E66 E5            [11] 4406 	push	hl
   1E67 2E 00         [ 7] 4407 	ld	l, #0x00
   1E69 E5            [11] 4408 	push	hl
   1E6A AF            [ 4] 4409 	xor	a, a
   1E6B 57            [ 4] 4410 	ld	d,a
   1E6C 1E 01         [ 7] 4411 	ld	e,#0x01
   1E6E D5            [11] 4412 	push	de
   1E6F 21 58 02      [10] 4413 	ld	hl, #0x0258
   1E72 E5            [11] 4414 	push	hl
   1E73 21 02 00      [10] 4415 	ld	hl, #0x0002
   1E76 E5            [11] 4416 	push	hl
   1E77 21r23r01      [10] 4417 	ld	hl, #_responseWRBlock
   1E7A E5            [11] 4418 	push	hl
   1E7B CDrCBr08      [17] 4419 	call	_WaitForRXData
   1E7E FD 21 0C 00   [14] 4420 	ld	iy, #12
   1E82 FD 39         [15] 4421 	add	iy, sp
   1E84 FD F9         [10] 4422 	ld	sp, iy
                           4423 ;src\CFG8266.c:845: if (!bResponse)
   1E86 DD 75 F2      [19] 4424 	ld	-14 (ix), l
   1E89 7D            [ 4] 4425 	ld	a, l
   1E8A B7            [ 4] 4426 	or	a, a
   1E8B 20 0A         [12] 4427 	jr	NZ,00315$
                           4428 ;src\CFG8266.c:847: printf("\rError requesting to write firmware block.\r\n");
   1E8D 21rF2r24      [10] 4429 	ld	hl, #___str_86
   1E90 E5            [11] 4430 	push	hl
   1E91 CDr00r00      [17] 4431 	call	_puts
   1E94 F1            [10] 4432 	pop	af
                           4433 ;src\CFG8266.c:848: break;
   1E95 18 31         [12] 4434 	jr	00318$
   1E97                    4435 00315$:
                           4436 ;src\CFG8266.c:850: SentFileSize = SentFileSize - FileRead;
   1E97 DD 4E F0      [19] 4437 	ld	c, -16 (ix)
   1E9A DD 46 F1      [19] 4438 	ld	b, -15 (ix)
   1E9D 11 00 00      [10] 4439 	ld	de, #0x0000
   1EA0 DD 7E F8      [19] 4440 	ld	a, -8 (ix)
   1EA3 91            [ 4] 4441 	sub	a, c
   1EA4 DD 77 F8      [19] 4442 	ld	-8 (ix), a
   1EA7 DD 7E F9      [19] 4443 	ld	a, -7 (ix)
   1EAA 98            [ 4] 4444 	sbc	a, b
   1EAB DD 77 F9      [19] 4445 	ld	-7 (ix), a
   1EAE DD 7E FA      [19] 4446 	ld	a, -6 (ix)
   1EB1 9B            [ 4] 4447 	sbc	a, e
   1EB2 DD 77 FA      [19] 4448 	ld	-6 (ix), a
   1EB5 DD 7E FB      [19] 4449 	ld	a, -5 (ix)
   1EB8 9A            [ 4] 4450 	sbc	a, d
                           4451 ;src\CFG8266.c:852: while(SentFileSize);
   1EB9 DD 77 FB      [19] 4452 	ld	-5 (ix), a
   1EBC DD B6 FA      [19] 4453 	or	a, -6 (ix)
   1EBF DD B6 F9      [19] 4454 	or	a, -7 (ix)
   1EC2 DD B6 F8      [19] 4455 	or	a, -8 (ix)
   1EC5 C2rA0r1D      [10] 4456 	jp	NZ, 00316$
   1EC8                    4457 00318$:
                           4458 ;src\CFG8266.c:853: printf("%s",aDone);
   1EC8 21r87r01      [10] 4459 	ld	hl, #_aDone
   1ECB E5            [11] 4460 	push	hl
   1ECC 21rD7r24      [10] 4461 	ld	hl, #___str_82
   1ECF E5            [11] 4462 	push	hl
   1ED0 CDr00r00      [17] 4463 	call	_printf
   1ED3 F1            [10] 4464 	pop	af
   1ED4 F1            [10] 4465 	pop	af
                           4466 ;src\CFG8266.c:856: if (bResponse)
   1ED5 DD 7E F2      [19] 4467 	ld	a, -14 (ix)
   1ED8 B7            [ 4] 4468 	or	a, a
   1ED9 28 11         [12] 4469 	jr	Z,00326$
                           4470 ;src\CFG8266.c:857: FinishUpdate(false);
   1EDB AF            [ 4] 4471 	xor	a, a
   1EDC F5            [11] 4472 	push	af
   1EDD 33            [ 6] 4473 	inc	sp
   1EDE CDrBBr0B      [17] 4474 	call	_FinishUpdate
   1EE1 33            [ 6] 4475 	inc	sp
   1EE2 18 08         [12] 4476 	jr	00326$
   1EE4                    4477 00325$:
                           4478 ;src\CFG8266.c:861: Print("\rError reading firmware file!\r\n");
   1EE4 21r1Er25      [10] 4479 	ld	hl, #___str_87
   1EE7 E5            [11] 4480 	push	hl
   1EE8 CDr00r00      [17] 4481 	call	_Print
   1EEB F1            [10] 4482 	pop	af
   1EEC                    4483 00326$:
                           4484 ;src\CFG8266.c:862: Close(iFile);
   1EEC 21 10 00      [10] 4485 	ld	hl, #16
   1EEF 39            [11] 4486 	add	hl, sp
   1EF0 4E            [ 7] 4487 	ld	c, (hl)
   1EF1 23            [ 6] 4488 	inc	hl
   1EF2 46            [ 7] 4489 	ld	b, (hl)
   1EF3 C5            [11] 4490 	push	bc
   1EF4 CDr00r00      [17] 4491 	call	_Close
   1EF7 F1            [10] 4492 	pop	af
   1EF8 C3r60r21      [10] 4493 	jp	00375$
   1EFB                    4494 00328$:
                           4495 ;src\CFG8266.c:866: printf("Error, couldn't open %s ...\r\n",ucFile);
   1EFB DD 7E FC      [19] 4496 	ld	a, -4 (ix)
   1EFE DD 77 FE      [19] 4497 	ld	-2 (ix), a
   1F01 DD 7E FD      [19] 4498 	ld	a, -3 (ix)
   1F04 DD 77 FF      [19] 4499 	ld	-1 (ix), a
   1F07 DD 6E FE      [19] 4500 	ld	l, -2 (ix)
   1F0A DD 66 FF      [19] 4501 	ld	h, -1 (ix)
   1F0D E5            [11] 4502 	push	hl
   1F0E 21r3Er25      [10] 4503 	ld	hl, #___str_88
   1F11 E5            [11] 4504 	push	hl
   1F12 CDr00r00      [17] 4505 	call	_printf
   1F15 F1            [10] 4506 	pop	af
   1F16 F1            [10] 4507 	pop	af
                           4508 ;src\CFG8266.c:867: return 0;
   1F17 21 00 00      [10] 4509 	ld	hl, #0x0000
   1F1A C3r63r21      [10] 4510 	jp	00388$
   1F1D                    4511 00331$:
                           4512 ;src\CFG8266.c:872: printf("Error, %s is 0 bytes long...\r\n",ucFile);
   1F1D DD 7E FC      [19] 4513 	ld	a, -4 (ix)
   1F20 DD 77 FE      [19] 4514 	ld	-2 (ix), a
   1F23 DD 7E FD      [19] 4515 	ld	a, -3 (ix)
   1F26 DD 77 FF      [19] 4516 	ld	-1 (ix), a
   1F29 DD 6E FE      [19] 4517 	ld	l, -2 (ix)
   1F2C DD 66 FF      [19] 4518 	ld	h, -1 (ix)
   1F2F E5            [11] 4519 	push	hl
   1F30 21r5Cr25      [10] 4520 	ld	hl, #___str_89
   1F33 E5            [11] 4521 	push	hl
   1F34 CDr00r00      [17] 4522 	call	_printf
   1F37 F1            [10] 4523 	pop	af
   1F38 F1            [10] 4524 	pop	af
                           4525 ;src\CFG8266.c:873: return 0;
   1F39 21 00 00      [10] 4526 	ld	hl, #0x0000
   1F3C C3r63r21      [10] 4527 	jp	00388$
   1F3F                    4528 00334$:
                           4529 ;src\CFG8266.c:878: printf("Error, couldn't open %s ...\r\n",ucFile);
   1F3F DD 7E FC      [19] 4530 	ld	a, -4 (ix)
   1F42 DD 77 FE      [19] 4531 	ld	-2 (ix), a
   1F45 DD 7E FD      [19] 4532 	ld	a, -3 (ix)
   1F48 DD 77 FF      [19] 4533 	ld	-1 (ix), a
   1F4B DD 6E FE      [19] 4534 	ld	l, -2 (ix)
   1F4E DD 66 FF      [19] 4535 	ld	h, -1 (ix)
   1F51 E5            [11] 4536 	push	hl
   1F52 21r3Er25      [10] 4537 	ld	hl, #___str_88
   1F55 E5            [11] 4538 	push	hl
   1F56 CDr00r00      [17] 4539 	call	_printf
   1F59 F1            [10] 4540 	pop	af
   1F5A F1            [10] 4541 	pop	af
                           4542 ;src\CFG8266.c:879: return 0;
   1F5B 21 00 00      [10] 4543 	ld	hl, #0x0000
   1F5E C3r63r21      [10] 4544 	jp	00388$
   1F61                    4545 00361$:
                           4546 ;src\CFG8266.c:884: if (ucIsFw)
   1F61 3Ar08r00      [13] 4547 	ld	a,(#_ucIsFw + 0)
   1F64 B7            [ 4] 4548 	or	a, a
   1F65 28 20         [12] 4549 	jr	Z,00337$
                           4550 ;src\CFG8266.c:885: printf ("Ok, updating FW using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   1F67 DD 5E FC      [19] 4551 	ld	e, -4 (ix)
   1F6A DD 56 FD      [19] 4552 	ld	d, -3 (ix)
   1F6D DD 4E F6      [19] 4553 	ld	c, -10 (ix)
   1F70 DD 46 F7      [19] 4554 	ld	b, -9 (ix)
   1F73 D5            [11] 4555 	push	de
   1F74 2Ar01r00      [16] 4556 	ld	hl, (_uiPort)
   1F77 E5            [11] 4557 	push	hl
   1F78 C5            [11] 4558 	push	bc
   1F79 21r7Br25      [10] 4559 	ld	hl, #___str_90
   1F7C E5            [11] 4560 	push	hl
   1F7D CDr00r00      [17] 4561 	call	_printf
   1F80 21 08 00      [10] 4562 	ld	hl, #8
   1F83 39            [11] 4563 	add	hl, sp
   1F84 F9            [ 6] 4564 	ld	sp, hl
   1F85 18 1E         [12] 4565 	jr	00338$
   1F87                    4566 00337$:
                           4567 ;src\CFG8266.c:887: printf ("Ok, updating certificates using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   1F87 DD 5E FC      [19] 4568 	ld	e, -4 (ix)
   1F8A DD 56 FD      [19] 4569 	ld	d, -3 (ix)
   1F8D DD 4E F6      [19] 4570 	ld	c, -10 (ix)
   1F90 DD 46 F7      [19] 4571 	ld	b, -9 (ix)
   1F93 D5            [11] 4572 	push	de
   1F94 2Ar01r00      [16] 4573 	ld	hl, (_uiPort)
   1F97 E5            [11] 4574 	push	hl
   1F98 C5            [11] 4575 	push	bc
   1F99 21rE4r25      [10] 4576 	ld	hl, #___str_91
   1F9C E5            [11] 4577 	push	hl
   1F9D CDr00r00      [17] 4578 	call	_printf
   1FA0 21 08 00      [10] 4579 	ld	hl, #8
   1FA3 39            [11] 4580 	add	hl, sp
   1FA4 F9            [ 6] 4581 	ld	sp, hl
   1FA5                    4582 00338$:
                           4583 ;src\CFG8266.c:888: uiCMDLen = strlen(ucServer) + 3; //3 = 0 terminator + 2 bytes port
   1FA5 DD 4E F6      [19] 4584 	ld	c, -10 (ix)
   1FA8 DD 46 F7      [19] 4585 	ld	b, -9 (ix)
   1FAB C5            [11] 4586 	push	bc
   1FAC CDr00r00      [17] 4587 	call	_strlen
   1FAF F1            [10] 4588 	pop	af
   1FB0 DD 75 FE      [19] 4589 	ld	-2 (ix), l
   1FB3 DD 74 FF      [19] 4590 	ld	-1 (ix), h
   1FB6 DD 7E FE      [19] 4591 	ld	a, -2 (ix)
   1FB9 C6 03         [ 7] 4592 	add	a, #0x03
   1FBB DD 77 F8      [19] 4593 	ld	-8 (ix), a
   1FBE DD 7E FF      [19] 4594 	ld	a, -1 (ix)
   1FC1 CE 00         [ 7] 4595 	adc	a, #0x00
   1FC3 DD 77 F9      [19] 4596 	ld	-7 (ix), a
                           4597 ;src\CFG8266.c:889: uiCMDLen += strlen(ucFile);
   1FC6 DD 7E FC      [19] 4598 	ld	a, -4 (ix)
   1FC9 DD 77 FE      [19] 4599 	ld	-2 (ix), a
   1FCC DD 7E FD      [19] 4600 	ld	a, -3 (ix)
   1FCF DD 77 FF      [19] 4601 	ld	-1 (ix), a
   1FD2 DD 6E FE      [19] 4602 	ld	l, -2 (ix)
   1FD5 DD 66 FF      [19] 4603 	ld	h, -1 (ix)
   1FD8 E5            [11] 4604 	push	hl
   1FD9 CDr00r00      [17] 4605 	call	_strlen
   1FDC F1            [10] 4606 	pop	af
   1FDD DD 75 FE      [19] 4607 	ld	-2 (ix), l
   1FE0 DD 74 FF      [19] 4608 	ld	-1 (ix), h
   1FE3 DD 7E FE      [19] 4609 	ld	a, -2 (ix)
   1FE6 DD 86 F8      [19] 4610 	add	a, -8 (ix)
   1FE9 DD 77 FA      [19] 4611 	ld	-6 (ix), a
   1FEC DD 7E FF      [19] 4612 	ld	a, -1 (ix)
   1FEF DD 8E F9      [19] 4613 	adc	a, -7 (ix)
   1FF2 DD 77 FB      [19] 4614 	ld	-5 (ix), a
                           4615 ;src\CFG8266.c:890: if (ucIsFw)
   1FF5 3Ar08r00      [13] 4616 	ld	a,(#_ucIsFw + 0)
   1FF8 B7            [ 4] 4617 	or	a, a
   1FF9 28 0A         [12] 4618 	jr	Z,00340$
                           4619 ;src\CFG8266.c:891: TxByte('U'); //Request Update Main Firmware remotely
   1FFB 3E 55         [ 7] 4620 	ld	a, #0x55
   1FFD F5            [11] 4621 	push	af
   1FFE 33            [ 6] 4622 	inc	sp
   1FFF CDr4Fr07      [17] 4623 	call	_TxByte
   2002 33            [ 6] 4624 	inc	sp
   2003 18 08         [12] 4625 	jr	00341$
   2005                    4626 00340$:
                           4627 ;src\CFG8266.c:893: TxByte('u'); //Request Update spiffs remotely
   2005 3E 75         [ 7] 4628 	ld	a, #0x75
   2007 F5            [11] 4629 	push	af
   2008 33            [ 6] 4630 	inc	sp
   2009 CDr4Fr07      [17] 4631 	call	_TxByte
   200C 33            [ 6] 4632 	inc	sp
   200D                    4633 00341$:
                           4634 ;src\CFG8266.c:894: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   200D DD 36 FE 00   [19] 4635 	ld	-2 (ix), #0x00
   2011 DD 7E FB      [19] 4636 	ld	a, -5 (ix)
   2014 DD 77 FF      [19] 4637 	ld	-1 (ix), a
   2017 DD 77 FE      [19] 4638 	ld	-2 (ix), a
   201A DD 36 FF 00   [19] 4639 	ld	-1 (ix), #0x00
   201E DD 7E FE      [19] 4640 	ld	a, -2 (ix)
   2021 DD 77 FF      [19] 4641 	ld	-1 (ix), a
   2024 F5            [11] 4642 	push	af
   2025 33            [ 6] 4643 	inc	sp
   2026 CDr4Fr07      [17] 4644 	call	_TxByte
   2029 33            [ 6] 4645 	inc	sp
                           4646 ;src\CFG8266.c:895: TxByte((unsigned char)(uiCMDLen&0xff));
   202A DD 7E FA      [19] 4647 	ld	a, -6 (ix)
   202D F5            [11] 4648 	push	af
   202E 33            [ 6] 4649 	inc	sp
   202F CDr4Fr07      [17] 4650 	call	_TxByte
   2032 33            [ 6] 4651 	inc	sp
                           4652 ;src\CFG8266.c:896: TxByte((unsigned char)(uiPort&0xff));
   2033 3Ar01r00      [13] 4653 	ld	a,(#_uiPort + 0)
   2036 F5            [11] 4654 	push	af
   2037 33            [ 6] 4655 	inc	sp
   2038 CDr4Fr07      [17] 4656 	call	_TxByte
   203B 33            [ 6] 4657 	inc	sp
                           4658 ;src\CFG8266.c:897: TxByte((unsigned char)((uiPort&0xff00)>>8));
   203C DD 36 FE 00   [19] 4659 	ld	-2 (ix), #0x00
   2040 3Ar02r00      [13] 4660 	ld	a,(#_uiPort + 1)
   2043 DD 77 FF      [19] 4661 	ld	-1 (ix), a
   2046 DD 77 FE      [19] 4662 	ld	-2 (ix), a
   2049 DD 36 FF 00   [19] 4663 	ld	-1 (ix), #0x00
   204D DD 7E FE      [19] 4664 	ld	a, -2 (ix)
   2050 DD 77 FF      [19] 4665 	ld	-1 (ix), a
   2053 F5            [11] 4666 	push	af
   2054 33            [ 6] 4667 	inc	sp
   2055 CDr4Fr07      [17] 4668 	call	_TxByte
   2058 33            [ 6] 4669 	inc	sp
                           4670 ;src\CFG8266.c:899: do
   2059 DD 4E FA      [19] 4671 	ld	c, -6 (ix)
   205C DD 46 FB      [19] 4672 	ld	b, -5 (ix)
   205F AF            [ 4] 4673 	xor	a, a
   2060 DD 77 FF      [19] 4674 	ld	-1 (ix), a
   2063                    4675 00343$:
                           4676 ;src\CFG8266.c:901: tx_data = ucServer[rx_data];
   2063 DD 7E F6      [19] 4677 	ld	a, -10 (ix)
   2066 DD 86 FF      [19] 4678 	add	a, -1 (ix)
   2069 5F            [ 4] 4679 	ld	e, a
   206A DD 7E F7      [19] 4680 	ld	a, -9 (ix)
   206D CE 00         [ 7] 4681 	adc	a, #0x00
   206F 6B            [ 4] 4682 	ld	l, e
   2070 67            [ 4] 4683 	ld	h, a
   2071 56            [ 7] 4684 	ld	d, (hl)
                           4685 ;src\CFG8266.c:902: TxByte(tx_data);
   2072 C5            [11] 4686 	push	bc
   2073 D5            [11] 4687 	push	de
   2074 D5            [11] 4688 	push	de
   2075 33            [ 6] 4689 	inc	sp
   2076 CDr4Fr07      [17] 4690 	call	_TxByte
   2079 33            [ 6] 4691 	inc	sp
   207A D1            [10] 4692 	pop	de
   207B C1            [10] 4693 	pop	bc
                           4694 ;src\CFG8266.c:903: --uiCMDLen;
   207C 0B            [ 6] 4695 	dec	bc
                           4696 ;src\CFG8266.c:904: ++rx_data;
   207D DD 34 FF      [23] 4697 	inc	-1 (ix)
                           4698 ;src\CFG8266.c:906: while((uiCMDLen)&&(tx_data!=0));
   2080 78            [ 4] 4699 	ld	a, b
   2081 B1            [ 4] 4700 	or	a, c
   2082 28 04         [12] 4701 	jr	Z,00345$
   2084 7A            [ 4] 4702 	ld	a, d
   2085 B7            [ 4] 4703 	or	a, a
   2086 20 DB         [12] 4704 	jr	NZ,00343$
   2088                    4705 00345$:
                           4706 ;src\CFG8266.c:908: do
   2088 DD 71 FA      [19] 4707 	ld	-6 (ix), c
   208B DD 70 FB      [19] 4708 	ld	-5 (ix), b
   208E AF            [ 4] 4709 	xor	a, a
   208F DD 77 FF      [19] 4710 	ld	-1 (ix), a
   2092                    4711 00348$:
                           4712 ;src\CFG8266.c:910: tx_data = ucFile[rx_data];
   2092 DD 7E FC      [19] 4713 	ld	a, -4 (ix)
   2095 DD 86 FF      [19] 4714 	add	a, -1 (ix)
   2098 DD 77 F8      [19] 4715 	ld	-8 (ix), a
   209B DD 7E FD      [19] 4716 	ld	a, -3 (ix)
   209E CE 00         [ 7] 4717 	adc	a, #0x00
   20A0 DD 77 F9      [19] 4718 	ld	-7 (ix), a
   20A3 DD 6E F8      [19] 4719 	ld	l, -8 (ix)
   20A6 DD 66 F9      [19] 4720 	ld	h, -7 (ix)
   20A9 7E            [ 7] 4721 	ld	a, (hl)
                           4722 ;src\CFG8266.c:911: if (tx_data==0)
   20AA B7            [ 4] 4723 	or	a, a
   20AB 28 1E         [12] 4724 	jr	Z,00350$
                           4725 ;src\CFG8266.c:913: TxByte(tx_data);
   20AD F5            [11] 4726 	push	af
   20AE 33            [ 6] 4727 	inc	sp
   20AF CDr4Fr07      [17] 4728 	call	_TxByte
   20B2 33            [ 6] 4729 	inc	sp
                           4730 ;src\CFG8266.c:914: --uiCMDLen;
   20B3 DD 6E FA      [19] 4731 	ld	l, -6 (ix)
   20B6 DD 66 FB      [19] 4732 	ld	h, -5 (ix)
   20B9 2B            [ 6] 4733 	dec	hl
   20BA DD 75 FA      [19] 4734 	ld	-6 (ix), l
   20BD DD 74 FB      [19] 4735 	ld	-5 (ix), h
                           4736 ;src\CFG8266.c:915: ++rx_data;
   20C0 DD 34 FF      [23] 4737 	inc	-1 (ix)
                           4738 ;src\CFG8266.c:917: while(uiCMDLen);
   20C3 DD 7E FB      [19] 4739 	ld	a, -5 (ix)
   20C6 DD B6 FA      [19] 4740 	or	a, -6 (ix)
   20C9 20 C7         [12] 4741 	jr	NZ,00348$
   20CB                    4742 00350$:
                           4743 ;src\CFG8266.c:919: if (ucIsFw)
   20CB 3Ar08r00      [13] 4744 	ld	a,(#_ucIsFw + 0)
   20CE B7            [ 4] 4745 	or	a, a
   20CF 28 26         [12] 4746 	jr	Z,00352$
                           4747 ;src\CFG8266.c:920: bResponse = WaitForRXData(responseOTAFW,2,18000,true,false,NULL,0);
   20D1 21 00 00      [10] 4748 	ld	hl, #0x0000
   20D4 E5            [11] 4749 	push	hl
   20D5 2E 00         [ 7] 4750 	ld	l, #0x00
   20D7 E5            [11] 4751 	push	hl
   20D8 AF            [ 4] 4752 	xor	a, a
   20D9 57            [ 4] 4753 	ld	d,a
   20DA 1E 01         [ 7] 4754 	ld	e,#0x01
   20DC D5            [11] 4755 	push	de
   20DD 21 50 46      [10] 4756 	ld	hl, #0x4650
   20E0 E5            [11] 4757 	push	hl
   20E1 21 02 00      [10] 4758 	ld	hl, #0x0002
   20E4 E5            [11] 4759 	push	hl
   20E5 21r25r01      [10] 4760 	ld	hl, #_responseOTAFW
   20E8 E5            [11] 4761 	push	hl
   20E9 CDrCBr08      [17] 4762 	call	_WaitForRXData
   20EC FD 21 0C 00   [14] 4763 	ld	iy, #12
   20F0 FD 39         [15] 4764 	add	iy, sp
   20F2 FD F9         [10] 4765 	ld	sp, iy
   20F4 4D            [ 4] 4766 	ld	c, l
   20F5 18 24         [12] 4767 	jr	00353$
   20F7                    4768 00352$:
                           4769 ;src\CFG8266.c:922: bResponse = WaitForRXData(responseOTASPIFF,2,18000,true,false,NULL,0);
   20F7 21 00 00      [10] 4770 	ld	hl, #0x0000
   20FA E5            [11] 4771 	push	hl
   20FB 2E 00         [ 7] 4772 	ld	l, #0x00
   20FD E5            [11] 4773 	push	hl
   20FE AF            [ 4] 4774 	xor	a, a
   20FF 57            [ 4] 4775 	ld	d,a
   2100 1E 01         [ 7] 4776 	ld	e,#0x01
   2102 D5            [11] 4777 	push	de
   2103 21 50 46      [10] 4778 	ld	hl, #0x4650
   2106 E5            [11] 4779 	push	hl
   2107 21 02 00      [10] 4780 	ld	hl, #0x0002
   210A E5            [11] 4781 	push	hl
   210B 21r27r01      [10] 4782 	ld	hl, #_responseOTASPIFF
   210E E5            [11] 4783 	push	hl
   210F CDrCBr08      [17] 4784 	call	_WaitForRXData
   2112 FD 21 0C 00   [14] 4785 	ld	iy, #12
   2116 FD 39         [15] 4786 	add	iy, sp
   2118 FD F9         [10] 4787 	ld	sp, iy
   211A 4D            [ 4] 4788 	ld	c, l
   211B                    4789 00353$:
                           4790 ;src\CFG8266.c:924: if (bResponse)
   211B 79            [ 4] 4791 	ld	a, c
   211C B7            [ 4] 4792 	or	a, a
   211D 28 25         [12] 4793 	jr	Z,00358$
                           4794 ;src\CFG8266.c:926: if ((!ucIsFw))
   211F 3Ar08r00      [13] 4795 	ld	a,(#_ucIsFw + 0)
   2122 B7            [ 4] 4796 	or	a, a
   2123 20 0A         [12] 4797 	jr	NZ,00355$
                           4798 ;src\CFG8266.c:927: printf("\rSuccess updating certificates!\r\n");
   2125 21r57r26      [10] 4799 	ld	hl, #___str_93
   2128 E5            [11] 4800 	push	hl
   2129 CDr00r00      [17] 4801 	call	_puts
   212C F1            [10] 4802 	pop	af
   212D 18 08         [12] 4803 	jr	00356$
   212F                    4804 00355$:
                           4805 ;src\CFG8266.c:929: printf("\rSuccess, firmware updated, wait a minute so it is fully flashed.\r\n");
   212F 21r78r26      [10] 4806 	ld	hl, #___str_95
   2132 E5            [11] 4807 	push	hl
   2133 CDr00r00      [17] 4808 	call	_puts
   2136 F1            [10] 4809 	pop	af
   2137                    4810 00356$:
                           4811 ;src\CFG8266.c:930: FinishUpdate(true);
   2137 3E 01         [ 7] 4812 	ld	a, #0x01
   2139 F5            [11] 4813 	push	af
   213A 33            [ 6] 4814 	inc	sp
   213B CDrBBr0B      [17] 4815 	call	_FinishUpdate
   213E 33            [ 6] 4816 	inc	sp
                           4817 ;src\CFG8266.c:931: return 0;
   213F 21 00 00      [10] 4818 	ld	hl, #0x0000
   2142 18 1F         [12] 4819 	jr	00388$
   2144                    4820 00358$:
                           4821 ;src\CFG8266.c:934: printf("\rFailed to update from remote server...\r\n");
   2144 21rBBr26      [10] 4822 	ld	hl, #___str_97
   2147 E5            [11] 4823 	push	hl
   2148 CDr00r00      [17] 4824 	call	_puts
   214B F1            [10] 4825 	pop	af
   214C 18 12         [12] 4826 	jr	00375$
   214E                    4827 00371$:
                           4828 ;src\CFG8266.c:938: printf("ESP device not found...\r\n");
   214E 21rE4r26      [10] 4829 	ld	hl, #___str_99
   2151 E5            [11] 4830 	push	hl
   2152 CDr00r00      [17] 4831 	call	_puts
   2155 F1            [10] 4832 	pop	af
   2156 18 08         [12] 4833 	jr	00375$
   2158                    4834 00374$:
                           4835 ;src\CFG8266.c:941: printf(strUsage);
   2158 21r97r01      [10] 4836 	ld	hl, #_strUsage
   215B E5            [11] 4837 	push	hl
   215C CDr00r00      [17] 4838 	call	_printf
   215F F1            [10] 4839 	pop	af
   2160                    4840 00375$:
                           4841 ;src\CFG8266.c:943: return 0;
   2160 21 00 00      [10] 4842 	ld	hl, #0x0000
   2163                    4843 00388$:
                           4844 ;src\CFG8266.c:944: }
   2163 DD F9         [10] 4845 	ld	sp, ix
   2165 DD E1         [14] 4846 	pop	ix
   2167 C9            [10] 4847 	ret
   2168                    4848 ___str_31:
   2168 3E 20 53 4D 2D 58  4849 	.ascii "> SM-X ESP8266 Wi-Fi Module Configuration v1.30 <"
        20 45 53 50 38 32
        36 36 20 57 69 2D
        46 69 20 4D 6F 64
        75 6C 65 20 43 6F
        6E 66 69 67 75 72
        61 74 69 6F 6E 20
        76 31 2E 33 30 20
        3C
   2199 0D                 4850 	.db 0x0d
   219A 0A                 4851 	.db 0x0a
   219B 28 63 29 20 32 30  4852 	.ascii "(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com"
        32 30 20 4F 64 75
        76 61 6C 64 6F 20
        50 61 76 61 6E 20
        4A 75 6E 69 6F 72
        20 2D 20 64 75 63
        61 73 70 40 67 6D
        61 69 6C 2E 63 6F
        6D
   21CC 0D                 4853 	.db 0x0d
   21CD 0A                 4854 	.db 0x0a
   21CE 00                 4855 	.db 0x00
   21CF                    4856 ___str_32:
   21CF 42 61 75 64 20 52  4857 	.ascii "Baud Rate: %s"
        61 74 65 3A 20 25
        73
   21DC 0D                 4858 	.db 0x0d
   21DD 0A                 4859 	.db 0x0a
   21DE 00                 4860 	.db 0x00
   21DF                    4861 ___str_33:
   21DF 46 57 20 56 65 72  4862 	.ascii "FW Version: %c.%c"
        73 69 6F 6E 3A 20
        25 63 2E 25 63
   21F0 0D                 4863 	.db 0x0d
   21F1 0A                 4864 	.db 0x0a
   21F2 00                 4865 	.db 0x00
   21F3                    4866 ___str_34:
   21F3 0D                 4867 	.db 0x0d
   21F4 0A                 4868 	.db 0x0a
   21F5 53 65 74 74 69 6E  4869 	.ascii "Setting Wi-Fi idle timeout to %u..."
        67 20 57 69 2D 46
        69 20 69 64 6C 65
        20 74 69 6D 65 6F
        75 74 20 74 6F 20
        25 75 2E 2E 2E
   2218 0D                 4870 	.db 0x0d
   2219 0A                 4871 	.db 0x0a
   221A 00                 4872 	.db 0x00
   221B                    4873 ___str_36:
   221B 0D                 4874 	.db 0x0d
   221C 0A                 4875 	.db 0x0a
   221D 53 65 74 74 69 6E  4876 	.ascii "Setting Wi-Fi to always on!"
        67 20 57 69 2D 46
        69 20 74 6F 20 61
        6C 77 61 79 73 20
        6F 6E 21
   2238 0D                 4877 	.db 0x0d
   2239 00                 4878 	.db 0x00
   223A                    4879 ___str_38:
   223A 0D                 4880 	.db 0x0d
   223B 00                 4881 	.db 0x00
   223C                    4882 ___str_39:
   223C 25 73 25 73        4883 	.ascii "%s%s"
   2240 0D                 4884 	.db 0x0d
   2241 0A                 4885 	.db 0x0a
   2242 0A                 4886 	.db 0x0a
   2243 00                 4887 	.db 0x00
   2244                    4888 ___str_41:
   2244 43 68 6F 6F 73 65  4889 	.ascii "Choose AP:"
        20 41 50 3A
   224E 0D                 4890 	.db 0x0d
   224F 0A                 4891 	.db 0x0a
   2250 00                 4892 	.db 0x00
   2251                    4893 ___str_42:
   2251 25 75 20 2D 20 25  4894 	.ascii "%u - %s"
        73
   2258 00                 4895 	.db 0x00
   2259                    4896 ___str_44:
   2259 20 28 50 57 44 29  4897 	.ascii " (PWD)"
   225F 0D                 4898 	.db 0x0d
   2260 00                 4899 	.db 0x00
   2261                    4900 ___str_46:
   2261 20 28 4F 50 45 4E  4901 	.ascii " (OPEN)"
        29
   2268 0D                 4902 	.db 0x0d
   2269 00                 4903 	.db 0x00
   226A                    4904 ___str_47:
   226A 0D                 4905 	.db 0x0d
   226B 0A                 4906 	.db 0x0a
   226C 57 68 69 63 68 20  4907 	.ascii "Which one to connect? (ESC exit/SPACE BAR next page)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 2F 53 50 41 43
        45 20 42 41 52 20
        6E 65 78 74 20 70
        61 67 65 29
   22A0 00                 4908 	.db 0x00
   22A1                    4909 ___str_48:
   22A1 0D                 4910 	.db 0x0d
   22A2 0A                 4911 	.db 0x0a
   22A3 57 68 69 63 68 20  4912 	.ascii "Which one to connect? (ESC exit)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 29
   22C3 00                 4913 	.db 0x00
   22C4                    4914 ___str_49:
   22C4 20 25 63           4915 	.ascii " %c"
   22C7 0D                 4916 	.db 0x0d
   22C8 0A                 4917 	.db 0x0a
   22C9 0A                 4918 	.db 0x0a
   22CA 00                 4919 	.db 0x00
   22CB                    4920 ___str_50:
   22CB 50 61 73 73 77 6F  4921 	.ascii "Password? "
        72 64 3F 20
   22D5 00                 4922 	.db 0x00
   22D6                    4923 ___str_52:
   22D6 43 6F 6E 6E 65 63  4924 	.ascii "Connecting to: %s "
        74 69 6E 67 20 74
        6F 3A 20 25 73 20
   22E8 0D                 4925 	.db 0x0d
   22E9 0A                 4926 	.db 0x0a
   22EA 00                 4927 	.db 0x00
   22EB                    4928 ___str_54:
   22EB 53 75 63 63 65 73  4929 	.ascii "Success, AP configured to be used."
        73 2C 20 41 50 20
        63 6F 6E 66 69 67
        75 72 65 64 20 74
        6F 20 62 65 20 75
        73 65 64 2E
   230D 0D                 4930 	.db 0x0d
   230E 00                 4931 	.db 0x00
   230F                    4932 ___str_56:
   230F 45 72 72 6F 72 2C  4933 	.ascii "Error, wrong password!"
        20 77 72 6F 6E 67
        20 70 61 73 73 77
        6F 72 64 21
   2325 0D                 4934 	.db 0x0d
   2326 00                 4935 	.db 0x00
   2327                    4936 ___str_58:
   2327 45 72 72 6F 72 2C  4937 	.ascii "Error, if protected network, check password."
        20 69 66 20 70 72
        6F 74 65 63 74 65
        64 20 6E 65 74 77
        6F 72 6B 2C 20 63
        68 65 63 6B 20 70
        61 73 73 77 6F 72
        64 2E
   2353 0D                 4938 	.db 0x0d
   2354 00                 4939 	.db 0x00
   2355                    4940 ___str_62:
   2355 0D                 4941 	.db 0x0d
   2356 0A                 4942 	.db 0x0a
   2357 55 73 65 72 20 63  4943 	.ascii "User canceled by ESC key..."
        61 6E 63 65 6C 65
        64 20 62 79 20 45
        53 43 20 6B 65 79
        2E 2E 2E
   2372 0D                 4944 	.db 0x0d
   2373 00                 4945 	.db 0x00
   2374                    4946 ___str_64:
   2374 0D                 4947 	.db 0x0d
   2375 0A                 4948 	.db 0x0a
   2376 53 63 61 6E 20 72  4949 	.ascii "Scan results: no answer..."
        65 73 75 6C 74 73
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   2390 0D                 4950 	.db 0x0d
   2391 00                 4951 	.db 0x00
   2392                    4952 ___str_66:
   2392 0D                 4953 	.db 0x0d
   2393 53 63 61 6E 20 72  4954 	.ascii "Scan request: no answer..."
        65 71 75 65 73 74
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   23AD 0D                 4955 	.db 0x0d
   23AE 00                 4956 	.db 0x00
   23AF                    4957 ___str_68:
   23AF 0D                 4958 	.db 0x0d
   23B0 4E 61 67 6C 65 20  4959 	.ascii "Nagle set as requested..."
        73 65 74 20 61 73
        20 72 65 71 75 65
        73 74 65 64 2E 2E
        2E
   23C9 0D                 4960 	.db 0x0d
   23CA 00                 4961 	.db 0x00
   23CB                    4962 ___str_70:
   23CB 0D                 4963 	.db 0x0d
   23CC 4E 61 67 6C 65 20  4964 	.ascii "Nagle not set as requested, error!"
        6E 6F 74 20 73 65
        74 20 61 73 20 72
        65 71 75 65 73 74
        65 64 2C 20 65 72
        72 6F 72 21
   23EE 0D                 4965 	.db 0x0d
   23EF 00                 4966 	.db 0x00
   23F0                    4967 ___str_72:
   23F0 0D                 4968 	.db 0x0d
   23F1 52 65 71 75 65 73  4969 	.ascii "Requested to turn off Wi-Fi Radio..."
        74 65 64 20 74 6F
        20 74 75 72 6E 20
        6F 66 66 20 57 69
        2D 46 69 20 52 61
        64 69 6F 2E 2E 2E
   2415 0D                 4970 	.db 0x0d
   2416 00                 4971 	.db 0x00
   2417                    4972 ___str_74:
   2417 0D                 4973 	.db 0x0d
   2418 52 65 71 75 65 73  4974 	.ascii "Request to turnoff Wi-Fi Radio error!"
        74 20 74 6F 20 74
        75 72 6E 6F 66 66
        20 57 69 2D 46 69
        20 52 61 64 69 6F
        20 65 72 72 6F 72
        21
   243D 0D                 4975 	.db 0x0d
   243E 00                 4976 	.db 0x00
   243F                    4977 ___str_76:
   243F 0D                 4978 	.db 0x0d
   2440 57 69 2D 46 69 20  4979 	.ascii "Wi-Fi radio on Time-out set successfully..."
        72 61 64 69 6F 20
        6F 6E 20 54 69 6D
        65 2D 6F 75 74 20
        73 65 74 20 73 75
        63 63 65 73 73 66
        75 6C 6C 79 2E 2E
        2E
   246B 0D                 4980 	.db 0x0d
   246C 00                 4981 	.db 0x00
   246D                    4982 ___str_78:
   246D 0D                 4983 	.db 0x0d
   246E 45 72 72 6F 72 20  4984 	.ascii "Error setting Wi-Fi radio on Time-out!"
        73 65 74 74 69 6E
        67 20 57 69 2D 46
        69 20 72 61 64 69
        6F 20 6F 6E 20 54
        69 6D 65 2D 6F 75
        74 21
   2494 0D                 4985 	.db 0x0d
   2495 00                 4986 	.db 0x00
   2496                    4987 ___str_79:
   2496 46 69 6C 65 3A 20  4988 	.ascii "File: %s Size: %s "
        25 73 20 53 69 7A
        65 3A 20 25 73 20
   24A8 0D                 4989 	.db 0x0d
   24A9 0A                 4990 	.db 0x0a
   24AA 00                 4991 	.db 0x00
   24AB                    4992 ___str_81:
   24AB 45 72 72 6F 72 20  4993 	.ascii "Error requesting to start firmware update."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 73 74 61 72
        74 20 66 69 72 6D
        77 61 72 65 20 75
        70 64 61 74 65 2E
   24D5 0D                 4994 	.db 0x0d
   24D6 00                 4995 	.db 0x00
   24D7                    4996 ___str_82:
   24D7 25 73              4997 	.ascii "%s"
   24D9 00                 4998 	.db 0x00
   24DA                    4999 ___str_84:
   24DA 0D                 5000 	.db 0x0d
   24DB 45 72 72 6F 72 20  5001 	.ascii "Error reading file..."
        72 65 61 64 69 6E
        67 20 66 69 6C 65
        2E 2E 2E
   24F0 0D                 5002 	.db 0x0d
   24F1 00                 5003 	.db 0x00
   24F2                    5004 ___str_86:
   24F2 0D                 5005 	.db 0x0d
   24F3 45 72 72 6F 72 20  5006 	.ascii "Error requesting to write firmware block."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 77 72 69 74
        65 20 66 69 72 6D
        77 61 72 65 20 62
        6C 6F 63 6B 2E
   251C 0D                 5007 	.db 0x0d
   251D 00                 5008 	.db 0x00
   251E                    5009 ___str_87:
   251E 0D                 5010 	.db 0x0d
   251F 45 72 72 6F 72 20  5011 	.ascii "Error reading firmware file!"
        72 65 61 64 69 6E
        67 20 66 69 72 6D
        77 61 72 65 20 66
        69 6C 65 21
   253B 0D                 5012 	.db 0x0d
   253C 0A                 5013 	.db 0x0a
   253D 00                 5014 	.db 0x00
   253E                    5015 ___str_88:
   253E 45 72 72 6F 72 2C  5016 	.ascii "Error, couldn't open %s ..."
        20 63 6F 75 6C 64
        6E 27 74 20 6F 70
        65 6E 20 25 73 20
        2E 2E 2E
   2559 0D                 5017 	.db 0x0d
   255A 0A                 5018 	.db 0x0a
   255B 00                 5019 	.db 0x00
   255C                    5020 ___str_89:
   255C 45 72 72 6F 72 2C  5021 	.ascii "Error, %s is 0 bytes long..."
        20 25 73 20 69 73
        20 30 20 62 79 74
        65 73 20 6C 6F 6E
        67 2E 2E 2E
   2578 0D                 5022 	.db 0x0d
   2579 0A                 5023 	.db 0x0a
   257A 00                 5024 	.db 0x00
   257B                    5025 ___str_90:
   257B 4F 6B 2C 20 75 70  5026 	.ascii "Ok, updating FW using server: %s port: %u"
        64 61 74 69 6E 67
        20 46 57 20 75 73
        69 6E 67 20 73 65
        72 76 65 72 3A 20
        25 73 20 70 6F 72
        74 3A 20 25 75
   25A4 0D                 5027 	.db 0x0d
   25A5 0A                 5028 	.db 0x0a
   25A6 46 69 6C 65 20 70  5029 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   25B3 0A                 5030 	.db 0x0a
   25B4 50 6C 65 61 73 65  5031 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   25E1 0D                 5032 	.db 0x0d
   25E2 0A                 5033 	.db 0x0a
   25E3 00                 5034 	.db 0x00
   25E4                    5035 ___str_91:
   25E4 4F 6B 2C 20 75 70  5036 	.ascii "Ok, updating certificates using server: %s port: %u"
        64 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 75 73 69 6E
        67 20 73 65 72 76
        65 72 3A 20 25 73
        20 70 6F 72 74 3A
        20 25 75
   2617 0D                 5037 	.db 0x0d
   2618 0A                 5038 	.db 0x0a
   2619 46 69 6C 65 20 70  5039 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   2626 0A                 5040 	.db 0x0a
   2627 50 6C 65 61 73 65  5041 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   2654 0D                 5042 	.db 0x0d
   2655 0A                 5043 	.db 0x0a
   2656 00                 5044 	.db 0x00
   2657                    5045 ___str_93:
   2657 0D                 5046 	.db 0x0d
   2658 53 75 63 63 65 73  5047 	.ascii "Success updating certificates!"
        73 20 75 70 64 61
        74 69 6E 67 20 63
        65 72 74 69 66 69
        63 61 74 65 73 21
   2676 0D                 5048 	.db 0x0d
   2677 00                 5049 	.db 0x00
   2678                    5050 ___str_95:
   2678 0D                 5051 	.db 0x0d
   2679 53 75 63 63 65 73  5052 	.ascii "Success, firmware updated, wait a minute so it is fully flas"
        73 2C 20 66 69 72
        6D 77 61 72 65 20
        75 70 64 61 74 65
        64 2C 20 77 61 69
        74 20 61 20 6D 69
        6E 75 74 65 20 73
        6F 20 69 74 20 69
        73 20 66 75 6C 6C
        79 20 66 6C 61 73
   26B5 68 65 64 2E        5053 	.ascii "hed."
   26B9 0D                 5054 	.db 0x0d
   26BA 00                 5055 	.db 0x00
   26BB                    5056 ___str_97:
   26BB 0D                 5057 	.db 0x0d
   26BC 46 61 69 6C 65 64  5058 	.ascii "Failed to update from remote server..."
        20 74 6F 20 75 70
        64 61 74 65 20 66
        72 6F 6D 20 72 65
        6D 6F 74 65 20 73
        65 72 76 65 72 2E
        2E 2E
   26E2 0D                 5059 	.db 0x0d
   26E3 00                 5060 	.db 0x00
   26E4                    5061 ___str_99:
   26E4 45 53 50 20 64 65  5062 	.ascii "ESP device not found..."
        76 69 63 65 20 6E
        6F 74 20 66 6F 75
        6E 64 2E 2E 2E
   26FB 0D                 5063 	.db 0x0d
   26FC 00                 5064 	.db 0x00
                           5065 	.area _CODE
   26FD                    5066 ___str_100:
   26FD 57 69 2D 46 69 20  5067 	.ascii "Wi-Fi is Idle, AP: "
        69 73 20 49 64 6C
        65 2C 20 41 50 3A
        20
   2710 00                 5068 	.db 0x00
   2711                    5069 ___str_101:
   2711 57 69 2D 46 69 20  5070 	.ascii "Wi-Fi Connecting to AP: "
        43 6F 6E 6E 65 63
        74 69 6E 67 20 74
        6F 20 41 50 3A 20
   2729 00                 5071 	.db 0x00
   272A                    5072 ___str_102:
   272A 57 69 2D 46 69 20  5073 	.ascii "Wi-Fi Wrong Password for AP: "
        57 72 6F 6E 67 20
        50 61 73 73 77 6F
        72 64 20 66 6F 72
        20 41 50 3A 20
   2747 00                 5074 	.db 0x00
   2748                    5075 ___str_103:
   2748 57 69 2D 46 69 20  5076 	.ascii "Wi-Fi Did not find AP: "
        44 69 64 20 6E 6F
        74 20 66 69 6E 64
        20 41 50 3A 20
   275F 00                 5077 	.db 0x00
   2760                    5078 ___str_104:
   2760 57 69 2D 46 69 20  5079 	.ascii "Wi-Fi Failed to connect to: "
        46 61 69 6C 65 64
        20 74 6F 20 63 6F
        6E 6E 65 63 74 20
        74 6F 3A 20
   277C 00                 5080 	.db 0x00
   277D                    5081 ___str_105:
   277D 57 69 2D 46 69 20  5082 	.ascii "Wi-Fi Connected to: "
        43 6F 6E 6E 65 63
        74 65 64 20 74 6F
        3A 20
   2791 00                 5083 	.db 0x00
   2792                    5084 ___str_106:
   2792 38 35 39 33 37 32  5085 	.ascii "859372 bps"
        20 62 70 73
   279C 00                 5086 	.db 0x00
   279D                    5087 ___str_107:
   279D 33 34 36 35 32 30  5088 	.ascii "346520 bps"
        20 62 70 73
   27A7 00                 5089 	.db 0x00
   27A8                    5090 ___str_108:
   27A8 32 33 31 30 31 34  5091 	.ascii "231014 bps"
        20 62 70 73
   27B2 00                 5092 	.db 0x00
   27B3                    5093 ___str_109:
   27B3 31 31 35 32 30 30  5094 	.ascii "115200 bps"
        20 62 70 73
   27BD 00                 5095 	.db 0x00
   27BE                    5096 ___str_110:
   27BE 35 37 36 30 30 20  5097 	.ascii "57600 bps"
        62 70 73
   27C7 00                 5098 	.db 0x00
   27C8                    5099 ___str_111:
   27C8 33 38 34 30 30 20  5100 	.ascii "38400 bps"
        62 70 73
   27D1 00                 5101 	.db 0x00
   27D2                    5102 ___str_112:
   27D2 33 31 32 35 30 20  5103 	.ascii "31250 bps"
        62 70 73
   27DB 00                 5104 	.db 0x00
   27DC                    5105 ___str_113:
   27DC 31 39 32 30 30 20  5106 	.ascii "19200 bps"
        62 70 73
   27E5 00                 5107 	.db 0x00
   27E6                    5108 ___str_114:
   27E6 39 36 30 30 20 62  5109 	.ascii "9600 bps"
        70 73
   27EE 00                 5110 	.db 0x00
   27EF                    5111 ___str_115:
   27EF 34 38 30 30 20 62  5112 	.ascii "4800 bps"
        70 73
   27F7 00                 5113 	.db 0x00
                           5114 	.area _INITIALIZER
   0000                    5115 __xinit__strAPSts:
   0000rFDr26              5116 	.dw ___str_100
   0002r11r27              5117 	.dw ___str_101
   0004r2Ar27              5118 	.dw ___str_102
   0006r48r27              5119 	.dw ___str_103
   0008r60r27              5120 	.dw ___str_104
   000Ar7Dr27              5121 	.dw ___str_105
   000C                    5122 __xinit__speedStr:
   000Cr92r27              5123 	.dw ___str_106
   000Er9Dr27              5124 	.dw ___str_107
   0010rA8r27              5125 	.dw ___str_108
   0012rB3r27              5126 	.dw ___str_109
   0014rBEr27              5127 	.dw ___str_110
   0016rC8r27              5128 	.dw ___str_111
   0018rD2r27              5129 	.dw ___str_112
   001ArDCr27              5130 	.dw ___str_113
   001CrE6r27              5131 	.dw ___str_114
   001ErEFr27              5132 	.dw ___str_115
                           5133 	.area _CABS (ABS)
